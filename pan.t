#ifdef PEG
struct T_SRC {
	char *fl; int ln;
} T_SRC[NTRANS];

void
tr_2_src(int m, char *file, int ln)
{	T_SRC[m].fl = file;
	T_SRC[m].ln = ln;
}

void
putpeg(int n, int m)
{	printf("%5d	trans %4d ", m, n);
	printf("%s:%d\n",
		T_SRC[n].fl, T_SRC[n].ln);
}
#endif

void
settable(void)
{	Trans *T;
	Trans *settr(int, int, int, int, int, char *, int, int, int);

	trans = (Trans ***) emalloc(15*sizeof(Trans **));

	/* proctype 13: smoke_P1_user_no_pending */

	trans[13] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[13][7]	= settr(1053,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[13][6] = settr(1052,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1052,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1052,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 13][3] = settr(1049,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1049,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[13][1]	= settr(1047,0,6,3,3,"(!(!((((EP==2)&&(pending_exp==0))&&(chain_tick_used==1)))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached13[2] = 1;
	trans[13][2]	= settr(0,0,0,0,0,"assert(!(!(!((((EP==2)&&(pending_exp==0))&&(chain_tick_used==1))))))",0,0,0);
	trans[13][4]	= settr(1050,0,6,1,0,"(1)", 0, 2, 0);
	trans[13][5]	= settr(1051,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[13][8]	= settr(1054,0,9,1,0,"break", 0, 2, 0);
	trans[13][9]	= settr(1055,0,10,1,0,"(1)", 0, 2, 0);
	trans[13][10]	= settr(1056,0,0,4,4,"-end-", 0, 3500, 0);

	/* proctype 12: smoke_P2_user_no_pending */

	trans[12] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[12][7]	= settr(1043,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[12][6] = settr(1042,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1042,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1042,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 12][3] = settr(1039,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1039,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[12][1]	= settr(1037,0,6,5,5,"(!(!((((EP==(2+1))&&(pending_exp==0))&&(chain_tick_used==1)))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached12[2] = 1;
	trans[12][2]	= settr(0,0,0,0,0,"assert(!(!(!((((EP==(2+1))&&(pending_exp==0))&&(chain_tick_used==1))))))",0,0,0);
	trans[12][4]	= settr(1040,0,6,1,0,"(1)", 0, 2, 0);
	trans[12][5]	= settr(1041,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[12][8]	= settr(1044,0,9,1,0,"break", 0, 2, 0);
	trans[12][9]	= settr(1045,0,10,1,0,"(1)", 0, 2, 0);
	trans[12][10]	= settr(1046,0,0,6,6,"-end-", 0, 3500, 0);

	/* proctype 11: p2_double_context_switch */

	trans[11] = (Trans **) emalloc(123*sizeof(Trans *));

	trans[11][21]	= settr(935,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[11][20] = settr(934,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,4,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(934,0,16,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(934,0,18,0,0,"DO", 0, 2, 0);
	T = trans[ 11][3] = settr(917,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(917,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[11][1]	= settr(915,0,20,7,7,"((((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1)))&&(EP==3)))", 1, 2, 0); /* m: 2 -> 20,0 */
	reached11[2] = 1;
	trans[11][2]	= settr(0,0,0,0,0,"assert(!((((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1)))&&(EP==3))))",0,0,0);
	trans[11][4]	= settr(918,0,28,8,0,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][5]	= settr(919,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][6]	= settr(920,0,38,9,0,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][7]	= settr(921,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][8]	= settr(922,0,50,10,0,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][9]	= settr(923,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][10]	= settr(924,0,64,11,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][11]	= settr(925,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][12]	= settr(926,0,80,12,0,"(((((EP==0)&&(EP_Stack==3))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][13]	= settr(927,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][14]	= settr(928,0,98,13,0,"((((EP==1)&&(EP_Stack==3))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][15]	= settr(929,0,98,1,0,"goto T0_S115", 0, 2, 0);
	trans[11][16]	= settr(930,0,118,14,0,"(((EP==3)&&(((pending_exp>>1)&1)==1)))", 1, 2, 0);
	trans[11][17]	= settr(931,0,118,1,0,"goto T0_S114", 0, 2, 0);
	trans[11][18]	= settr(932,0,20,1,0,"(1)", 0, 2, 0);
	trans[11][19]	= settr(933,0,20,1,0,"goto T0_init", 0, 2, 0);
	trans[11][22]	= settr(936,0,28,1,0,"break", 0, 2, 0);
	trans[11][29]	= settr(943,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[11][28] = settr(942,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(942,0,25,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(942,0,26,0,0,"DO", 0, 2, 0);
	T = trans[ 11][25] = settr(939,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(939,2,23,0,0,"ATOMIC", 1, 2, 0);
	trans[11][23]	= settr(937,0,28,15,15,"((EP==3))", 1, 2, 0); /* m: 24 -> 28,0 */
	reached11[24] = 1;
	trans[11][24]	= settr(0,0,0,0,0,"assert(!((EP==3)))",0,0,0);
	trans[11][26]	= settr(940,0,28,16,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][27]	= settr(941,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][30]	= settr(944,0,38,1,0,"break", 0, 2, 0);
	trans[11][39]	= settr(953,0,38,1,0,".(goto)", 0, 2, 0);
	T = trans[11][38] = settr(952,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(952,0,33,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(952,0,34,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(952,0,36,0,0,"DO", 0, 2, 0);
	T = trans[ 11][33] = settr(947,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(947,2,31,0,0,"ATOMIC", 1, 2, 0);
	trans[11][31]	= settr(945,0,38,17,17,"((((EP==0)&&(EP_Stack==3))&&(EP==3)))", 1, 2, 0); /* m: 32 -> 38,0 */
	reached11[32] = 1;
	trans[11][32]	= settr(0,0,0,0,0,"assert(!((((EP==0)&&(EP_Stack==3))&&(EP==3))))",0,0,0);
	trans[11][34]	= settr(948,0,28,18,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][35]	= settr(949,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][36]	= settr(950,0,38,19,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][37]	= settr(951,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][40]	= settr(954,0,50,1,0,"break", 0, 2, 0);
	trans[11][51]	= settr(965,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[11][50] = settr(964,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(964,0,43,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(964,0,44,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(964,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(964,0,48,0,0,"DO", 0, 2, 0);
	T = trans[ 11][43] = settr(957,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(957,2,41,0,0,"ATOMIC", 1, 2, 0);
	trans[11][41]	= settr(955,0,50,20,20,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&(EP==3)))", 1, 2, 0); /* m: 42 -> 50,0 */
	reached11[42] = 1;
	trans[11][42]	= settr(0,0,0,0,0,"assert(!(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&(EP==3))))",0,0,0);
	trans[11][44]	= settr(958,0,28,21,0,"((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][45]	= settr(959,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][46]	= settr(960,0,38,22,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][47]	= settr(961,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][48]	= settr(962,0,50,23,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][49]	= settr(963,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][52]	= settr(966,0,64,1,0,"break", 0, 2, 0);
	trans[11][65]	= settr(979,0,64,1,0,".(goto)", 0, 2, 0);
	T = trans[11][64] = settr(978,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(978,0,55,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(978,0,56,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(978,0,58,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(978,0,60,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(978,0,62,0,0,"DO", 0, 2, 0);
	T = trans[ 11][55] = settr(969,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(969,2,53,0,0,"ATOMIC", 1, 2, 0);
	trans[11][53]	= settr(967,0,64,24,24,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3)))", 1, 2, 0); /* m: 54 -> 64,0 */
	reached11[54] = 1;
	trans[11][54]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3))))",0,0,0);
	trans[11][56]	= settr(970,0,28,25,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][57]	= settr(971,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][58]	= settr(972,0,38,26,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][59]	= settr(973,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][60]	= settr(974,0,50,27,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][61]	= settr(975,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][62]	= settr(976,0,64,28,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][63]	= settr(977,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][66]	= settr(980,0,80,1,0,"break", 0, 2, 0);
	trans[11][81]	= settr(995,0,80,1,0,".(goto)", 0, 2, 0);
	T = trans[11][80] = settr(994,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(994,0,69,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(994,0,70,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(994,0,72,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(994,0,74,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(994,0,76,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(994,0,78,0,0,"DO", 0, 2, 0);
	T = trans[ 11][69] = settr(983,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(983,2,67,0,0,"ATOMIC", 1, 2, 0);
	trans[11][67]	= settr(981,0,80,29,29,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3)))", 1, 2, 0); /* m: 68 -> 80,0 */
	reached11[68] = 1;
	trans[11][68]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3))))",0,0,0);
	trans[11][70]	= settr(984,0,28,30,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][71]	= settr(985,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][72]	= settr(986,0,38,31,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][73]	= settr(987,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][74]	= settr(988,0,50,32,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][75]	= settr(989,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][76]	= settr(990,0,64,33,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][77]	= settr(991,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][78]	= settr(992,0,80,34,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][79]	= settr(993,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][82]	= settr(996,0,98,1,0,"break", 0, 2, 0);
	trans[11][99]	= settr(1013,0,98,1,0,".(goto)", 0, 2, 0);
	T = trans[11][98] = settr(1012,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1012,0,85,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1012,0,86,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1012,0,88,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1012,0,90,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1012,0,92,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1012,0,94,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1012,0,96,0,0,"DO", 0, 2, 0);
	T = trans[ 11][85] = settr(999,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(999,2,83,0,0,"ATOMIC", 1, 2, 0);
	trans[11][83]	= settr(997,0,98,35,35,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3)))", 1, 2, 0); /* m: 84 -> 98,0 */
	reached11[84] = 1;
	trans[11][84]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3))))",0,0,0);
	trans[11][86]	= settr(1000,0,28,36,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][87]	= settr(1001,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][88]	= settr(1002,0,38,37,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][89]	= settr(1003,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][90]	= settr(1004,0,50,38,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][91]	= settr(1005,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][92]	= settr(1006,0,64,39,0,"((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][93]	= settr(1007,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][94]	= settr(1008,0,80,40,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][95]	= settr(1009,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][96]	= settr(1010,0,98,41,0,"(((EP==1)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][97]	= settr(1011,0,98,1,0,"goto T0_S115", 0, 2, 0);
	trans[11][100]	= settr(1014,0,118,1,0,"break", 0, 2, 0);
	trans[11][119]	= settr(1033,0,118,1,0,".(goto)", 0, 2, 0);
	T = trans[11][118] = settr(1032,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,103,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,104,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,106,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,108,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,110,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,112,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1032,0,114,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1032,0,116,0,0,"DO", 0, 2, 0);
	T = trans[ 11][103] = settr(1017,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1017,2,101,0,0,"ATOMIC", 1, 2, 0);
	trans[11][101]	= settr(1015,0,118,42,42,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&(EP==3)))", 1, 2, 0); /* m: 102 -> 118,0 */
	reached11[102] = 1;
	trans[11][102]	= settr(0,0,0,0,0,"assert(!(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&(EP==3))))",0,0,0);
	trans[11][104]	= settr(1018,0,28,43,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][105]	= settr(1019,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][106]	= settr(1020,0,38,44,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][107]	= settr(1021,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][108]	= settr(1022,0,50,45,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][109]	= settr(1023,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][110]	= settr(1024,0,64,46,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][111]	= settr(1025,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][112]	= settr(1026,0,80,47,0,"((((EP==0)&&(EP_Stack==3))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][113]	= settr(1027,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][114]	= settr(1028,0,98,48,0,"(((EP==1)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][115]	= settr(1029,0,98,1,0,"goto T0_S115", 0, 2, 0);
	trans[11][116]	= settr(1030,0,118,49,0,"(((EP==3)&&(((pending_exp>>1)&1)==1)))", 1, 2, 0);
	trans[11][117]	= settr(1031,0,118,1,0,"goto T0_S114", 0, 2, 0);
	trans[11][120]	= settr(1034,0,121,1,0,"break", 0, 2, 0);
	trans[11][121]	= settr(1035,0,122,1,0,"(1)", 0, 2, 0);
	trans[11][122]	= settr(1036,0,0,50,50,"-end-", 0, 3500, 0);

	/* proctype 10: P2_switching_not_P1_witness_unfolded */

	trans[10] = (Trans **) emalloc(101*sizeof(Trans *));

	trans[10][19]	= settr(833,0,18,1,0,".(goto)", 0, 2, 0);
	T = trans[10][18] = settr(832,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,4,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,14,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(832,0,16,0,0,"DO", 0, 2, 0);
	T = trans[ 10][3] = settr(817,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(817,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[10][1]	= settr(815,0,18,51,51,"(((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 2 -> 18,0 */
	reached10[2] = 1;
	trans[10][2]	= settr(0,0,0,0,0,"assert(!(((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][4]	= settr(818,0,26,52,0,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][5]	= settr(819,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][6]	= settr(820,0,36,53,0,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][7]	= settr(821,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][8]	= settr(822,0,48,54,0,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][9]	= settr(823,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][10]	= settr(824,0,62,55,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1)))))", 1, 2, 0);
	trans[10][11]	= settr(825,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][12]	= settr(826,0,78,56,0,"((((EP==0)&&(EP_Stack==(2+1)))&&((EP==1)&&(EP_Stack==(2+1)))))", 1, 2, 0);
	trans[10][13]	= settr(827,0,78,1,0,"goto T0_S80", 0, 2, 0);
	trans[10][14]	= settr(828,0,96,57,0,"(((EP==1)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][15]	= settr(829,0,96,1,0,"goto T0_S79", 0, 2, 0);
	trans[10][16]	= settr(830,0,18,1,0,"(1)", 0, 2, 0);
	trans[10][17]	= settr(831,0,18,1,0,"goto T0_init", 0, 2, 0);
	trans[10][20]	= settr(834,0,26,1,0,"break", 0, 2, 0);
	trans[10][27]	= settr(841,0,26,1,0,".(goto)", 0, 2, 0);
	T = trans[10][26] = settr(840,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(840,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(840,0,24,0,0,"DO", 0, 2, 0);
	T = trans[ 10][23] = settr(837,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(837,2,21,0,0,"ATOMIC", 1, 2, 0);
	trans[10][21]	= settr(835,0,26,58,58,"((EP==(2+1)))", 1, 2, 0); /* m: 22 -> 26,0 */
	reached10[22] = 1;
	trans[10][22]	= settr(0,0,0,0,0,"assert(!((EP==(2+1))))",0,0,0);
	trans[10][24]	= settr(838,0,26,59,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][25]	= settr(839,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][28]	= settr(842,0,36,1,0,"break", 0, 2, 0);
	trans[10][37]	= settr(851,0,36,1,0,".(goto)", 0, 2, 0);
	T = trans[10][36] = settr(850,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(850,0,31,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(850,0,32,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(850,0,34,0,0,"DO", 0, 2, 0);
	T = trans[ 10][31] = settr(845,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(845,2,29,0,0,"ATOMIC", 1, 2, 0);
	trans[10][29]	= settr(843,0,36,60,60,"((((EP==0)&&(EP_Stack==(2+1)))&&(EP==(2+1))))", 1, 2, 0); /* m: 30 -> 36,0 */
	reached10[30] = 1;
	trans[10][30]	= settr(0,0,0,0,0,"assert(!((((EP==0)&&(EP_Stack==(2+1)))&&(EP==(2+1)))))",0,0,0);
	trans[10][32]	= settr(846,0,26,61,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][33]	= settr(847,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][34]	= settr(848,0,36,62,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][35]	= settr(849,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][38]	= settr(852,0,48,1,0,"break", 0, 2, 0);
	trans[10][49]	= settr(863,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[10][48] = settr(862,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(862,0,41,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(862,0,42,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(862,0,44,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(862,0,46,0,0,"DO", 0, 2, 0);
	T = trans[ 10][41] = settr(855,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(855,2,39,0,0,"ATOMIC", 1, 2, 0);
	trans[10][39]	= settr(853,0,48,63,63,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 40 -> 48,0 */
	reached10[40] = 1;
	trans[10][40]	= settr(0,0,0,0,0,"assert(!(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][42]	= settr(856,0,26,64,0,"((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][43]	= settr(857,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][44]	= settr(858,0,36,65,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][45]	= settr(859,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][46]	= settr(860,0,48,66,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][47]	= settr(861,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][50]	= settr(864,0,62,1,0,"break", 0, 2, 0);
	trans[10][63]	= settr(877,0,62,1,0,".(goto)", 0, 2, 0);
	T = trans[10][62] = settr(876,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(876,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(876,0,54,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(876,0,56,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(876,0,58,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(876,0,60,0,0,"DO", 0, 2, 0);
	T = trans[ 10][53] = settr(867,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(867,2,51,0,0,"ATOMIC", 1, 2, 0);
	trans[10][51]	= settr(865,0,62,67,67,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 52 -> 62,0 */
	reached10[52] = 1;
	trans[10][52]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][54]	= settr(868,0,26,68,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][55]	= settr(869,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][56]	= settr(870,0,36,69,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][57]	= settr(871,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][58]	= settr(872,0,48,70,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][59]	= settr(873,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][60]	= settr(874,0,62,71,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][61]	= settr(875,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][64]	= settr(878,0,78,1,0,"break", 0, 2, 0);
	trans[10][79]	= settr(893,0,78,1,0,".(goto)", 0, 2, 0);
	T = trans[10][78] = settr(892,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(892,0,67,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(892,0,68,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(892,0,70,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(892,0,72,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(892,0,74,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(892,0,76,0,0,"DO", 0, 2, 0);
	T = trans[ 10][67] = settr(881,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(881,2,65,0,0,"ATOMIC", 1, 2, 0);
	trans[10][65]	= settr(879,0,78,72,72,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 66 -> 78,0 */
	reached10[66] = 1;
	trans[10][66]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][68]	= settr(882,0,26,73,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][69]	= settr(883,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][70]	= settr(884,0,36,74,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][71]	= settr(885,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][72]	= settr(886,0,48,75,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][73]	= settr(887,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][74]	= settr(888,0,62,76,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][75]	= settr(889,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][76]	= settr(890,0,78,77,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][77]	= settr(891,0,78,1,0,"goto T0_S80", 0, 2, 0);
	trans[10][80]	= settr(894,0,96,1,0,"break", 0, 2, 0);
	trans[10][97]	= settr(911,0,96,1,0,".(goto)", 0, 2, 0);
	T = trans[10][96] = settr(910,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(910,0,83,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(910,0,84,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(910,0,86,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(910,0,88,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(910,0,90,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(910,0,92,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(910,0,94,0,0,"DO", 0, 2, 0);
	T = trans[ 10][83] = settr(897,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(897,2,81,0,0,"ATOMIC", 1, 2, 0);
	trans[10][81]	= settr(895,0,96,78,78,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 82 -> 96,0 */
	reached10[82] = 1;
	trans[10][82]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][84]	= settr(898,0,26,79,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][85]	= settr(899,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][86]	= settr(900,0,36,80,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][87]	= settr(901,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][88]	= settr(902,0,48,81,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][89]	= settr(903,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][90]	= settr(904,0,62,82,0,"((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][91]	= settr(905,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][92]	= settr(906,0,78,83,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][93]	= settr(907,0,78,1,0,"goto T0_S80", 0, 2, 0);
	trans[10][94]	= settr(908,0,96,84,0,"(((EP==1)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][95]	= settr(909,0,96,1,0,"goto T0_S79", 0, 2, 0);
	trans[10][98]	= settr(912,0,99,1,0,"break", 0, 2, 0);
	trans[10][99]	= settr(913,0,100,1,0,"(1)", 0, 2, 0);
	trans[10][100]	= settr(914,0,0,85,85,"-end-", 0, 3500, 0);

	/* proctype 9: all_starvation_free */

	trans[9] = (Trans **) emalloc(157*sizeof(Trans *));

	trans[9][20]	= settr(678,0,19,1,0,".(goto)", 0, 2, 0);
	T = trans[9][19] = settr(677,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,9,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,11,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,13,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(677,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(677,0,17,0,0,"DO", 0, 2, 0);
	trans[9][1]	= settr(659,0,28,86,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[9][2]	= settr(660,0,28,1,0,"goto accept_S9", 0, 2, 0);
	trans[9][3]	= settr(661,0,123,87,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[9][4]	= settr(662,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][5]	= settr(663,0,44,88,0,"(((!((pending_exp>0))&&!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==2))))", 1, 2, 0);
	trans[9][6]	= settr(664,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][7]	= settr(665,0,37,89,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[9][8]	= settr(666,0,37,1,0,"goto accept_S140", 0, 2, 0);
	trans[9][9]	= settr(667,0,132,90,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][10]	= settr(668,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][11]	= settr(669,0,51,91,0,"(((!((pending_exp>0))&&!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][12]	= settr(670,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][13]	= settr(671,0,19,92,0,"((EP>=2))", 1, 2, 0);
	trans[9][14]	= settr(672,0,19,1,0,"goto T0_init", 0, 2, 0);
	trans[9][15]	= settr(673,0,153,1,0,"(1)", 0, 2, 0);
	trans[9][16]	= settr(674,0,153,1,0,"goto T0_S384", 0, 2, 0);
	trans[9][17]	= settr(675,0,114,93,0,"(!((pending_exp>0)))", 1, 2, 0);
	trans[9][18]	= settr(676,0,114,1,0,"goto T0_S317", 0, 2, 0);
	trans[9][21]	= settr(679,0,28,1,0,"break", 0, 2, 0);
	trans[9][29]	= settr(687,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[9][28] = settr(686,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(686,0,22,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(686,0,24,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(686,0,26,0,0,"DO", 0, 2, 0);
	trans[9][22]	= settr(680,0,74,94,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][23]	= settr(681,0,74,1,0,"goto T0_S9", 0, 2, 0);
	trans[9][24]	= settr(682,0,123,95,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][25]	= settr(683,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][26]	= settr(684,0,90,96,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[9][27]	= settr(685,0,90,1,0,"goto T0_S244", 0, 2, 0);
	trans[9][30]	= settr(688,0,37,1,0,"break", 0, 2, 0);
	trans[9][38]	= settr(696,0,37,1,0,".(goto)", 0, 2, 0);
	T = trans[9][37] = settr(695,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(695,0,31,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(695,0,33,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(695,0,35,0,0,"DO", 0, 2, 0);
	trans[9][31]	= settr(689,0,83,97,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][32]	= settr(690,0,83,1,0,"goto T0_S140", 0, 2, 0);
	trans[9][33]	= settr(691,0,132,98,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][34]	= settr(692,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][35]	= settr(693,0,97,99,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][36]	= settr(694,0,97,1,0,"goto T0_S267", 0, 2, 0);
	trans[9][39]	= settr(697,0,44,1,0,"break", 0, 2, 0);
	trans[9][45]	= settr(703,0,44,1,0,".(goto)", 0, 2, 0);
	T = trans[9][44] = settr(702,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(702,0,40,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(702,0,42,0,0,"DO", 0, 2, 0);
	trans[9][40]	= settr(698,0,123,100,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][41]	= settr(699,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][42]	= settr(700,0,90,101,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[9][43]	= settr(701,0,90,1,0,"goto T0_S244", 0, 2, 0);
	trans[9][46]	= settr(704,0,51,1,0,"break", 0, 2, 0);
	trans[9][52]	= settr(710,0,51,1,0,".(goto)", 0, 2, 0);
	T = trans[9][51] = settr(709,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(709,0,47,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(709,0,49,0,0,"DO", 0, 2, 0);
	trans[9][47]	= settr(705,0,132,102,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][48]	= settr(706,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][49]	= settr(707,0,97,103,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[9][50]	= settr(708,0,97,1,0,"goto T0_S267", 0, 2, 0);
	trans[9][53]	= settr(711,0,58,1,0,"break", 0, 2, 0);
	trans[9][59]	= settr(717,0,58,1,0,".(goto)", 0, 2, 0);
	T = trans[9][58] = settr(716,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(716,0,54,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(716,0,56,0,0,"DO", 0, 2, 0);
	trans[9][54]	= settr(712,0,123,104,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][55]	= settr(713,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][56]	= settr(714,0,90,105,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][57]	= settr(715,0,90,1,0,"goto T0_S244", 0, 2, 0);
	trans[9][60]	= settr(718,0,65,1,0,"break", 0, 2, 0);
	trans[9][66]	= settr(724,0,65,1,0,".(goto)", 0, 2, 0);
	T = trans[9][65] = settr(723,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(723,0,61,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(723,0,63,0,0,"DO", 0, 2, 0);
	trans[9][61]	= settr(719,0,132,106,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][62]	= settr(720,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][63]	= settr(721,0,97,107,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][64]	= settr(722,0,97,1,0,"goto T0_S267", 0, 2, 0);
	trans[9][67]	= settr(725,0,74,1,0,"break", 0, 2, 0);
	trans[9][75]	= settr(733,0,74,1,0,".(goto)", 0, 2, 0);
	T = trans[9][74] = settr(732,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(732,0,68,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(732,0,70,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(732,0,72,0,0,"DO", 0, 2, 0);
	trans[9][68]	= settr(726,0,28,108,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][69]	= settr(727,0,28,1,0,"goto accept_S9", 0, 2, 0);
	trans[9][70]	= settr(728,0,123,109,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][71]	= settr(729,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][72]	= settr(730,0,44,110,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[9][73]	= settr(731,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][76]	= settr(734,0,83,1,0,"break", 0, 2, 0);
	trans[9][84]	= settr(742,0,83,1,0,".(goto)", 0, 2, 0);
	T = trans[9][83] = settr(741,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(741,0,77,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(741,0,79,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(741,0,81,0,0,"DO", 0, 2, 0);
	trans[9][77]	= settr(735,0,37,111,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][78]	= settr(736,0,37,1,0,"goto accept_S140", 0, 2, 0);
	trans[9][79]	= settr(737,0,132,112,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][80]	= settr(738,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][81]	= settr(739,0,51,113,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][82]	= settr(740,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][85]	= settr(743,0,90,1,0,"break", 0, 2, 0);
	trans[9][91]	= settr(749,0,90,1,0,".(goto)", 0, 2, 0);
	T = trans[9][90] = settr(748,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(748,0,86,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(748,0,88,0,0,"DO", 0, 2, 0);
	trans[9][86]	= settr(744,0,123,114,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][87]	= settr(745,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][88]	= settr(746,0,44,115,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[9][89]	= settr(747,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][92]	= settr(750,0,97,1,0,"break", 0, 2, 0);
	trans[9][98]	= settr(756,0,97,1,0,".(goto)", 0, 2, 0);
	T = trans[9][97] = settr(755,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(755,0,93,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(755,0,95,0,0,"DO", 0, 2, 0);
	trans[9][93]	= settr(751,0,132,116,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][94]	= settr(752,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][95]	= settr(753,0,51,117,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[9][96]	= settr(754,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][99]	= settr(757,0,114,1,0,"break", 0, 2, 0);
	trans[9][115]	= settr(773,0,114,1,0,".(goto)", 0, 2, 0);
	T = trans[9][114] = settr(772,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(772,0,100,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(772,0,102,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(772,0,104,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(772,0,106,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(772,0,108,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(772,0,110,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(772,0,112,0,0,"DO", 0, 2, 0);
	trans[9][100]	= settr(758,0,123,118,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[9][101]	= settr(759,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][102]	= settr(760,0,44,119,0,"(((!((pending_exp>0))&&(!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))||(!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&(!((EP==2))&&(EP>=2)))))", 1, 2, 0);
	trans[9][103]	= settr(761,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][104]	= settr(762,0,132,120,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][105]	= settr(763,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][106]	= settr(764,0,51,121,0,"(((!((pending_exp>0))&&(!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))||(!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&(!((EP==(2+1)))&&(EP>=2)))))", 1, 2, 0);
	trans[9][107]	= settr(765,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][108]	= settr(766,0,19,122,0,"((EP>=2))", 1, 2, 0);
	trans[9][109]	= settr(767,0,19,1,0,"goto T0_init", 0, 2, 0);
	trans[9][110]	= settr(768,0,153,1,0,"(1)", 0, 2, 0);
	trans[9][111]	= settr(769,0,153,1,0,"goto T0_S384", 0, 2, 0);
	trans[9][112]	= settr(770,0,114,123,0,"(!((pending_exp>0)))", 1, 2, 0);
	trans[9][113]	= settr(771,0,114,1,0,"goto T0_S317", 0, 2, 0);
	trans[9][116]	= settr(774,0,123,1,0,"break", 0, 2, 0);
	trans[9][124]	= settr(782,0,123,1,0,".(goto)", 0, 2, 0);
	T = trans[9][123] = settr(781,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(781,0,117,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(781,0,119,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(781,0,121,0,0,"DO", 0, 2, 0);
	trans[9][117]	= settr(775,0,123,124,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][118]	= settr(776,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][119]	= settr(777,0,44,125,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][120]	= settr(778,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][121]	= settr(779,0,58,126,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][122]	= settr(780,0,58,1,0,"goto accept_S350", 0, 2, 0);
	trans[9][125]	= settr(783,0,132,1,0,"break", 0, 2, 0);
	trans[9][133]	= settr(791,0,132,1,0,".(goto)", 0, 2, 0);
	T = trans[9][132] = settr(790,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(790,0,126,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(790,0,128,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(790,0,130,0,0,"DO", 0, 2, 0);
	trans[9][126]	= settr(784,0,132,127,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][127]	= settr(785,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][128]	= settr(786,0,51,128,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][129]	= settr(787,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][130]	= settr(788,0,65,129,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][131]	= settr(789,0,65,1,0,"goto accept_S371", 0, 2, 0);
	trans[9][134]	= settr(792,0,153,1,0,"break", 0, 2, 0);
	trans[9][154]	= settr(812,0,153,1,0,".(goto)", 0, 2, 0);
	T = trans[9][153] = settr(811,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,135,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,137,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,139,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,141,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,143,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,145,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,147,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(811,0,149,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(811,0,151,0,0,"DO", 0, 2, 0);
	trans[9][135]	= settr(793,0,123,130,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[9][136]	= settr(794,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][137]	= settr(795,0,132,131,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][138]	= settr(796,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][139]	= settr(797,0,19,132,0,"((EP>=2))", 1, 2, 0);
	trans[9][140]	= settr(798,0,19,1,0,"goto T0_init", 0, 2, 0);
	trans[9][141]	= settr(799,0,153,1,0,"(1)", 0, 2, 0);
	trans[9][142]	= settr(800,0,153,1,0,"goto T0_S384", 0, 2, 0);
	trans[9][143]	= settr(801,0,44,133,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[9][144]	= settr(802,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][145]	= settr(803,0,58,134,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[9][146]	= settr(804,0,58,1,0,"goto accept_S350", 0, 2, 0);
	trans[9][147]	= settr(805,0,51,135,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[9][148]	= settr(806,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][149]	= settr(807,0,65,136,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[9][150]	= settr(808,0,65,1,0,"goto accept_S371", 0, 2, 0);
	trans[9][151]	= settr(809,0,114,137,0,"((!((pending_exp>0))&&(EP>=2)))", 1, 2, 0);
	trans[9][152]	= settr(810,0,114,1,0,"goto T0_S317", 0, 2, 0);
	trans[9][155]	= settr(813,0,156,1,0,"break", 0, 2, 0);
	trans[9][156]	= settr(814,0,0,138,138,"-end-", 0, 3500, 0);

	/* proctype 8: starvation_free_task2 */

	trans[8] = (Trans **) emalloc(76*sizeof(Trans *));

	trans[8][12]	= settr(595,0,11,1,0,".(goto)", 0, 2, 0);
	T = trans[8][11] = settr(594,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(594,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(594,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(594,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(594,0,7,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(594,0,9,0,0,"DO", 0, 2, 0);
	trans[8][1]	= settr(584,0,20,139,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[8][2]	= settr(585,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[8][3]	= settr(586,0,59,140,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][4]	= settr(587,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][5]	= settr(588,0,27,141,0,"(((!((pending_exp>0))&&!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][6]	= settr(589,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][7]	= settr(590,0,11,142,0,"((!((pending_exp>0))||(EP>=2)))", 1, 2, 0);
	trans[8][8]	= settr(591,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[8][9]	= settr(592,0,72,1,0,"(1)", 0, 2, 0);
	trans[8][10]	= settr(593,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[8][13]	= settr(596,0,20,1,0,"break", 0, 2, 0);
	trans[8][21]	= settr(604,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[8][20] = settr(603,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(603,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(603,0,16,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(603,0,18,0,0,"DO", 0, 2, 0);
	trans[8][14]	= settr(597,0,43,143,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][15]	= settr(598,0,43,1,0,"goto T0_S8", 0, 2, 0);
	trans[8][16]	= settr(599,0,59,144,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][17]	= settr(600,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][18]	= settr(601,0,50,145,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][19]	= settr(602,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[8][22]	= settr(605,0,27,1,0,"break", 0, 2, 0);
	trans[8][28]	= settr(611,0,27,1,0,".(goto)", 0, 2, 0);
	T = trans[8][27] = settr(610,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(610,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(610,0,25,0,0,"DO", 0, 2, 0);
	trans[8][23]	= settr(606,0,59,146,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][24]	= settr(607,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][25]	= settr(608,0,50,147,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[8][26]	= settr(609,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[8][29]	= settr(612,0,34,1,0,"break", 0, 2, 0);
	trans[8][35]	= settr(618,0,34,1,0,".(goto)", 0, 2, 0);
	T = trans[8][34] = settr(617,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(617,0,30,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(617,0,32,0,0,"DO", 0, 2, 0);
	trans[8][30]	= settr(613,0,59,148,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][31]	= settr(614,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][32]	= settr(615,0,50,149,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][33]	= settr(616,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[8][36]	= settr(619,0,43,1,0,"break", 0, 2, 0);
	trans[8][44]	= settr(627,0,43,1,0,".(goto)", 0, 2, 0);
	T = trans[8][43] = settr(626,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(626,0,37,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(626,0,39,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(626,0,41,0,0,"DO", 0, 2, 0);
	trans[8][37]	= settr(620,0,20,150,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][38]	= settr(621,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[8][39]	= settr(622,0,59,151,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][40]	= settr(623,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][41]	= settr(624,0,27,152,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][42]	= settr(625,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][45]	= settr(628,0,50,1,0,"break", 0, 2, 0);
	trans[8][51]	= settr(634,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[8][50] = settr(633,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(633,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(633,0,48,0,0,"DO", 0, 2, 0);
	trans[8][46]	= settr(629,0,59,153,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][47]	= settr(630,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][48]	= settr(631,0,27,154,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[8][49]	= settr(632,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][52]	= settr(635,0,59,1,0,"break", 0, 2, 0);
	trans[8][60]	= settr(643,0,59,1,0,".(goto)", 0, 2, 0);
	T = trans[8][59] = settr(642,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(642,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(642,0,55,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(642,0,57,0,0,"DO", 0, 2, 0);
	trans[8][53]	= settr(636,0,59,155,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][54]	= settr(637,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][55]	= settr(638,0,27,156,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][56]	= settr(639,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][57]	= settr(640,0,34,157,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][58]	= settr(641,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[8][61]	= settr(644,0,72,1,0,"break", 0, 2, 0);
	trans[8][73]	= settr(656,0,72,1,0,".(goto)", 0, 2, 0);
	T = trans[8][72] = settr(655,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(655,0,62,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(655,0,64,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(655,0,66,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(655,0,68,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(655,0,70,0,0,"DO", 0, 2, 0);
	trans[8][62]	= settr(645,0,59,158,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][63]	= settr(646,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][64]	= settr(647,0,11,159,0,"((EP>=2))", 1, 2, 0);
	trans[8][65]	= settr(648,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[8][66]	= settr(649,0,72,1,0,"(1)", 0, 2, 0);
	trans[8][67]	= settr(650,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[8][68]	= settr(651,0,27,160,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[8][69]	= settr(652,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][70]	= settr(653,0,34,161,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[8][71]	= settr(654,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[8][74]	= settr(657,0,75,1,0,"break", 0, 2, 0);
	trans[8][75]	= settr(658,0,0,162,162,"-end-", 0, 3500, 0);

	/* proctype 7: starvation_free_task1 */

	trans[7] = (Trans **) emalloc(76*sizeof(Trans *));

	trans[7][12]	= settr(520,0,11,1,0,".(goto)", 0, 2, 0);
	T = trans[7][11] = settr(519,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(519,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(519,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(519,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(519,0,7,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(519,0,9,0,0,"DO", 0, 2, 0);
	trans[7][1]	= settr(509,0,20,163,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[7][2]	= settr(510,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[7][3]	= settr(511,0,59,164,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[7][4]	= settr(512,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][5]	= settr(513,0,27,165,0,"(((!((pending_exp>0))&&!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==2))))", 1, 2, 0);
	trans[7][6]	= settr(514,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][7]	= settr(515,0,11,166,0,"((!((pending_exp>0))||(EP>=2)))", 1, 2, 0);
	trans[7][8]	= settr(516,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[7][9]	= settr(517,0,72,1,0,"(1)", 0, 2, 0);
	trans[7][10]	= settr(518,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[7][13]	= settr(521,0,20,1,0,"break", 0, 2, 0);
	trans[7][21]	= settr(529,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[7][20] = settr(528,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(528,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(528,0,16,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(528,0,18,0,0,"DO", 0, 2, 0);
	trans[7][14]	= settr(522,0,43,167,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][15]	= settr(523,0,43,1,0,"goto T0_S8", 0, 2, 0);
	trans[7][16]	= settr(524,0,59,168,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][17]	= settr(525,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][18]	= settr(526,0,50,169,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[7][19]	= settr(527,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[7][22]	= settr(530,0,27,1,0,"break", 0, 2, 0);
	trans[7][28]	= settr(536,0,27,1,0,".(goto)", 0, 2, 0);
	T = trans[7][27] = settr(535,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(535,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(535,0,25,0,0,"DO", 0, 2, 0);
	trans[7][23]	= settr(531,0,59,170,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][24]	= settr(532,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][25]	= settr(533,0,50,171,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[7][26]	= settr(534,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[7][29]	= settr(537,0,34,1,0,"break", 0, 2, 0);
	trans[7][35]	= settr(543,0,34,1,0,".(goto)", 0, 2, 0);
	T = trans[7][34] = settr(542,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(542,0,30,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(542,0,32,0,0,"DO", 0, 2, 0);
	trans[7][30]	= settr(538,0,59,172,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][31]	= settr(539,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][32]	= settr(540,0,50,173,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][33]	= settr(541,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[7][36]	= settr(544,0,43,1,0,"break", 0, 2, 0);
	trans[7][44]	= settr(552,0,43,1,0,".(goto)", 0, 2, 0);
	T = trans[7][43] = settr(551,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(551,0,37,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(551,0,39,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(551,0,41,0,0,"DO", 0, 2, 0);
	trans[7][37]	= settr(545,0,20,174,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][38]	= settr(546,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[7][39]	= settr(547,0,59,175,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][40]	= settr(548,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][41]	= settr(549,0,27,176,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[7][42]	= settr(550,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][45]	= settr(553,0,50,1,0,"break", 0, 2, 0);
	trans[7][51]	= settr(559,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[7][50] = settr(558,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(558,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(558,0,48,0,0,"DO", 0, 2, 0);
	trans[7][46]	= settr(554,0,59,177,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][47]	= settr(555,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][48]	= settr(556,0,27,178,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[7][49]	= settr(557,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][52]	= settr(560,0,59,1,0,"break", 0, 2, 0);
	trans[7][60]	= settr(568,0,59,1,0,".(goto)", 0, 2, 0);
	T = trans[7][59] = settr(567,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(567,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(567,0,55,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(567,0,57,0,0,"DO", 0, 2, 0);
	trans[7][53]	= settr(561,0,59,179,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][54]	= settr(562,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][55]	= settr(563,0,27,180,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][56]	= settr(564,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][57]	= settr(565,0,34,181,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][58]	= settr(566,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[7][61]	= settr(569,0,72,1,0,"break", 0, 2, 0);
	trans[7][73]	= settr(581,0,72,1,0,".(goto)", 0, 2, 0);
	T = trans[7][72] = settr(580,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(580,0,62,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(580,0,64,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(580,0,66,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(580,0,68,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(580,0,70,0,0,"DO", 0, 2, 0);
	trans[7][62]	= settr(570,0,59,182,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[7][63]	= settr(571,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][64]	= settr(572,0,11,183,0,"((EP>=2))", 1, 2, 0);
	trans[7][65]	= settr(573,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[7][66]	= settr(574,0,72,1,0,"(1)", 0, 2, 0);
	trans[7][67]	= settr(575,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[7][68]	= settr(576,0,27,184,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[7][69]	= settr(577,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][70]	= settr(578,0,34,185,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[7][71]	= settr(579,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[7][74]	= settr(582,0,75,1,0,"break", 0, 2, 0);
	trans[7][75]	= settr(583,0,0,186,186,"-end-", 0, 3500, 0);

	/* proctype 6: exc_leads_to_user */

	trans[6] = (Trans **) emalloc(14*sizeof(Trans *));

	trans[6][6]	= settr(501,0,5,1,0,".(goto)", 0, 2, 0);
	T = trans[6][5] = settr(500,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(500,0,1,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(500,0,3,0,0,"DO", 0, 2, 0);
	trans[6][1]	= settr(496,0,10,187,0,"((!(!((EP<2)))&&!((EP>=2))))", 1, 2, 0);
	trans[6][2]	= settr(497,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[6][3]	= settr(498,0,5,1,0,"(1)", 0, 2, 0);
	trans[6][4]	= settr(499,0,5,1,0,"goto T0_init", 0, 2, 0);
	trans[6][7]	= settr(502,0,10,1,0,"break", 0, 2, 0);
	trans[6][11]	= settr(506,0,10,1,0,".(goto)", 0, 2, 0);
	T = trans[6][10] = settr(505,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(505,0,8,0,0,"DO", 0, 2, 0);
	trans[6][8]	= settr(503,0,10,188,0,"(!((EP>=2)))", 1, 2, 0);
	trans[6][9]	= settr(504,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[6][12]	= settr(507,0,13,1,0,"break", 0, 2, 0);
	trans[6][13]	= settr(508,0,0,189,189,"-end-", 0, 3500, 0);

	/* proctype 5: back_to_user */

	trans[5] = (Trans **) emalloc(14*sizeof(Trans *));

	trans[5][6]	= settr(488,0,5,1,0,".(goto)", 0, 2, 0);
	T = trans[5][5] = settr(487,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(487,0,1,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(487,0,3,0,0,"DO", 0, 2, 0);
	trans[5][1]	= settr(483,0,10,190,0,"(!((EP>=2)))", 1, 2, 0);
	trans[5][2]	= settr(484,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[5][3]	= settr(485,0,5,1,0,"(1)", 0, 2, 0);
	trans[5][4]	= settr(486,0,5,1,0,"goto T0_init", 0, 2, 0);
	trans[5][7]	= settr(489,0,10,1,0,"break", 0, 2, 0);
	trans[5][11]	= settr(493,0,10,1,0,".(goto)", 0, 2, 0);
	T = trans[5][10] = settr(492,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(492,0,8,0,0,"DO", 0, 2, 0);
	trans[5][8]	= settr(490,0,10,191,0,"(!((EP>=2)))", 1, 2, 0);
	trans[5][9]	= settr(491,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[5][12]	= settr(494,0,13,1,0,"break", 0, 2, 0);
	trans[5][13]	= settr(495,0,0,192,192,"-end-", 0, 3500, 0);

	/* proctype 4: :init: */

	trans[4] = (Trans **) emalloc(66*sizeof(Trans *));

	trans[4][1]	= settr(418,0,17,193,193,"i = 0", 0, 2, 0);
	trans[4][18]	= settr(435,0,17,1,0,".(goto)", 0, 2, 0);
	T = trans[4][17] = settr(434,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(434,0,2,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(434,0,15,0,0,"DO", 0, 2, 0);
	trans[4][2]	= settr(419,0,13,194,0,"((i<4))", 0, 2, 0);
	T = trans[ 4][13] = settr(430,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(430,0,3,0,0,"sub-sequence", 0, 2, 0);
	trans[4][3]	= settr(420,0,9,195,195,"idx = 0", 0, 2, 0);
	trans[4][10]	= settr(427,0,9,1,0,".(goto)", 0, 2, 0);
	T = trans[4][9] = settr(426,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(426,0,4,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(426,0,7,0,0,"DO", 0, 2, 0);
	trans[4][4]	= settr(421,0,5,196,0,"((idx<5))", 0, 2, 0);
	trans[4][5]	= settr(422,0,6,197,197,"readyQueue[i].tasks[idx] = 255", 1, 2, 0);
	trans[4][6]	= settr(423,0,9,198,198,"idx = (idx+1)", 0, 2, 0);
	trans[4][7]	= settr(424,0,12,2,0,"else", 0, 2, 0);
	trans[4][8]	= settr(425,0,12,1,0,"goto :b8", 0, 2, 0);
	trans[4][11]	= settr(428,0,12,1,0,"break", 0, 2, 0);
	trans[4][12]	= settr(429,0,14,199,199,"readyQueue[i].tailIndex = 0", 1, 2, 0);
	trans[4][14]	= settr(431,0,17,200,200,"i = (i+1)", 0, 2, 0);
	trans[4][15]	= settr(432,0,20,2,0,"else", 0, 2, 0);
	trans[4][16]	= settr(433,0,20,1,0,"goto :b7", 0, 2, 0);
	trans[4][19]	= settr(436,0,20,1,0,"break", 0, 2, 0);
	trans[4][20]	= settr(437,0,21,201,201,"tcb[2].prio = 2", 1, 2, 0);
	trans[4][21]	= settr(438,0,29,202,202,"tcb[2].state = 1", 1, 2, 0);
	T = trans[ 4][29] = settr(446,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(446,0,27,0,0,"sub-sequence", 0, 2, 0);
	T = trans[4][27] = settr(444,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(444,0,22,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(444,0,25,0,0,"IF", 0, 2, 0);
	trans[4][22]	= settr(439,0,23,203,0,"((readyQueue[2].tailIndex<5))", 1, 2, 0);
	trans[4][23]	= settr(440,0,24,204,204,"readyQueue[2].tasks[readyQueue[2].tailIndex] = 2", 1, 2, 0);
	trans[4][24]	= settr(441,0,30,205,205,"readyQueue[2].tailIndex = (readyQueue[2].tailIndex+1)", 1, 2, 0);
	trans[4][28]	= settr(445,0,30,1,0,".(goto)", 0, 2, 0);
	trans[4][25]	= settr(442,0,26,2,0,"else", 0, 2, 0);
	trans[4][26]	= settr(443,0,30,206,0,"assert(0)", 0, 2, 0);
	trans[4][30]	= settr(447,0,31,207,207,"tcb[(2+1)].prio = 2", 1, 2, 0);
	trans[4][31]	= settr(448,0,39,208,208,"tcb[(2+1)].state = 1", 1, 2, 0);
	T = trans[ 4][39] = settr(456,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(456,0,37,0,0,"sub-sequence", 0, 2, 0);
	T = trans[4][37] = settr(454,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(454,0,32,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(454,0,35,0,0,"IF", 0, 2, 0);
	trans[4][32]	= settr(449,0,33,209,0,"((readyQueue[2].tailIndex<5))", 1, 2, 0);
	trans[4][33]	= settr(450,0,34,210,210,"readyQueue[2].tasks[readyQueue[2].tailIndex] = (2+1)", 1, 2, 0);
	trans[4][34]	= settr(451,0,40,211,211,"readyQueue[2].tailIndex = (readyQueue[2].tailIndex+1)", 1, 2, 0);
	trans[4][38]	= settr(455,0,40,1,0,".(goto)", 0, 2, 0);
	trans[4][35]	= settr(452,0,36,2,0,"else", 0, 2, 0);
	trans[4][36]	= settr(453,0,40,212,0,"assert(0)", 0, 2, 0);
	trans[4][40]	= settr(457,0,41,213,213,"EP = 2", 1, 2, 0);
	trans[4][41]	= settr(458,0,58,214,214,"topPrio = 2", 1, 2, 0);
	T = trans[ 4][58] = settr(475,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(475,0,42,0,0,"sub-sequence", 0, 2, 0);
	trans[4][42]	= settr(459,0,48,215,215,"idx = 0", 0, 2, 0);
	trans[4][49]	= settr(466,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[4][48] = settr(465,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(465,0,43,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(465,0,46,0,0,"DO", 0, 2, 0);
	trans[4][43]	= settr(460,0,44,216,0,"((idx<(readyQueue[topPrio].tailIndex-1)))", 1, 2, 0);
	trans[4][44]	= settr(461,0,45,217,217,"readyQueue[topPrio].tasks[idx] = readyQueue[topPrio].tasks[(idx+1)]", 1, 2, 0);
	trans[4][45]	= settr(462,0,48,218,218,"idx = (idx+1)", 0, 2, 0);
	trans[4][46]	= settr(463,0,56,2,0,"else", 0, 2, 0);
	trans[4][47]	= settr(464,0,56,1,0,"goto :b9", 0, 2, 0);
	trans[4][50]	= settr(467,0,56,1,0,"break", 0, 2, 0);
	T = trans[4][56] = settr(473,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(473,0,51,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(473,0,54,0,0,"IF", 0, 2, 0);
	trans[4][51]	= settr(468,0,52,219,0,"((readyQueue[topPrio].tailIndex>0))", 1, 2, 0);
	trans[4][52]	= settr(469,0,53,220,220,"readyQueue[topPrio].tasks[(readyQueue[topPrio].tailIndex-1)] = 255", 1, 2, 0);
	trans[4][53]	= settr(470,0,59,221,221,"readyQueue[topPrio].tailIndex = (readyQueue[topPrio].tailIndex-1)", 1, 2, 0);
	trans[4][57]	= settr(474,0,59,1,0,".(goto)", 0, 2, 0);
	trans[4][54]	= settr(471,0,55,2,0,"else", 0, 2, 0);
	trans[4][55]	= settr(472,0,59,1,0,"(1)", 0, 2, 0);
	trans[4][59]	= settr(476,0,62,222,222,"tcb[EP].state = 4", 1, 2, 0);
	T = trans[ 4][62] = settr(479,2,0,0,0,"ATOMIC", 0, 2, 0);
	T->nxt	= settr(479,2,60,0,0,"ATOMIC", 0, 2, 0);
	trans[4][60]	= settr(477,2,61,223,223,"(run PendSV_Handler())", 0, 2, 0);
	trans[4][61]	= settr(478,0,63,224,224,"(run SysTick_Handler())", 0, 2, 0);
	trans[4][63]	= settr(480,0,64,225,225,"(run Process2())", 1, 2, 0);
	trans[4][64]	= settr(481,0,65,226,226,"(run Process1())", 0, 2, 0);
	trans[4][65]	= settr(482,0,0,227,227,"-end-", 0, 3500, 0);

	/* proctype 3: Process2 */

	trans[3] = (Trans **) emalloc(176*sizeof(Trans *));

	trans[3][173]	= settr(415,0,172,1,0,".(goto)", 0, 2, 0);
	T = trans[3][172] = settr(414,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(414,0,25,0,0,"DO", 0, 2, 0);
	T = trans[ 3][25] = settr(267,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(267,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[3][1]	= settr(243,2,8,228,228,"(((2+1)==EP))", 1, 2, 0); /* m: 2 -> 8,0 */
	reached3[2] = 1;
	trans[3][2]	= settr(0,0,0,0,0,"printf('P2 running\\n')",0,0,0);
	T = trans[3][8] = settr(250,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(250,2,3,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(250,2,7,0,0,"IF", 1, 2, 0);
	trans[3][3]	= settr(245,2,6,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][6] = settr(248,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(248,0,4,0,0,"sub-sequence", 1, 2, 0);
	trans[3][4]	= settr(246,2,23,229,229,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 5 -> 0,23 */
	reached3[5] = 1;
	trans[3][5]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][9]	= settr(251,2,23,1,0,".(goto)", 1, 2, 0);
	trans[3][7]	= settr(249,2,23,1,0,"(1)", 1, 2, 0);
	T = trans[3][23] = settr(265,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(265,2,10,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(265,2,21,0,0,"IF", 1, 2, 0);
	trans[3][10]	= settr(252,2,15,230,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][15] = settr(257,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(257,2,11,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(257,2,13,0,0,"IF", 1, 2, 0);
	trans[3][11]	= settr(253,2,19,231,231,"((EP>=2))", 1, 2, 0); /* m: 12 -> 19,0 */
	reached3[12] = 1;
	trans[3][12]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][16]	= settr(258,2,19,1,0,".(goto)", 1, 2, 0);
	trans[3][13]	= settr(255,2,14,2,0,"else", 1, 2, 0);
	trans[3][14]	= settr(256,2,19,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][19] = settr(261,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(261,0,17,0,0,"sub-sequence", 1, 2, 0);
	trans[3][17]	= settr(259,4,77,232,232,"assert((EP_Stack==255))", 1, 2, 0); /* m: 18 -> 0,77 */
	reached3[18] = 1;
	trans[3][18]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][20]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][24]	= settr(266,0,77,233,233,".(goto)", 1, 2, 0);
	trans[3][21]	= settr(263,2,22,2,0,"else", 1, 2, 0);
	trans[3][22]	= settr(264,4,77,234,234,"(1)", 1, 2, 0); /* m: 24 -> 77,0 */
	reached3[24] = 1;
	T = trans[ 3][77] = settr(319,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(319,2,26,0,0,"ATOMIC", 1, 2, 0);
	trans[3][26]	= settr(268,2,54,235,0,"(((2+1)==EP))", 1, 2, 0);
	T = trans[ 3][54] = settr(296,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(296,0,27,0,0,"sub-sequence", 1, 2, 0);
	trans[3][27]	= settr(269,2,29,236,236,"intSave = 0", 1, 2, 0);
	T = trans[ 3][29] = settr(271,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(271,0,28,0,0,"sub-sequence", 1, 2, 0);
	trans[3][28]	= settr(270,2,42,237,237,"intSave = 0", 1, 2, 0); /* m: 30 -> 0,42 */
	reached3[30] = 1;
	trans[3][30]	= settr(0,0,0,0,0,"assert((tcb[2].state==1))",0,0,0);
	trans[3][31]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	T = trans[ 3][42] = settr(284,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(284,0,32,0,0,"sub-sequence", 1, 2, 0);
	trans[3][32]	= settr(274,2,41,238,238,"assert((tcb[2].state==1))", 1, 2, 0); /* m: 33 -> 0,41 */
	reached3[33] = 1;
	trans[3][33]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	trans[3][34]	= settr(0,0,0,0,0,"tcb[2].state = 3",0,0,0);
	T = trans[ 3][41] = settr(283,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(283,0,35,0,0,"sub-sequence", 1, 2, 0);
	trans[3][35]	= settr(277,2,52,239,239,"assert((g_taskSortLinkTail<(2+1)))", 1, 2, 0); /* m: 36 -> 0,52 */
	reached3[36] = 1;
	trans[3][36]	= settr(0,0,0,0,0,"assert((g_taskSortLinkTail>=0))",0,0,0);
	trans[3][37]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].taskId = 2",0,0,0);
	trans[3][38]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].responseTime = 255",0,0,0);
	trans[3][39]	= settr(0,0,0,0,0,"tcb[2].pendList = g_taskSortLinkTail",0,0,0);
	trans[3][40]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail+1)",0,0,0);
	T = trans[3][52] = settr(294,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(294,2,43,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(294,2,50,0,0,"IF", 1, 2, 0);
	trans[3][43]	= settr(285,2,45,240,240,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 3][45] = settr(287,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(287,0,44,0,0,"sub-sequence", 1, 2, 0);
	trans[3][44]	= settr(286,2,49,241,241,"intSave = 0", 1, 2, 0);
	T = trans[ 3][49] = settr(291,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(291,0,48,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][48] = settr(290,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(290,0,46,0,0,"sub-sequence", 1, 2, 0);
	trans[3][46]	= settr(288,2,60,242,242,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 47 -> 0,60 */
	reached3[47] = 1;
	trans[3][47]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[3][53]	= settr(295,2,60,1,0,".(goto)", 1, 2, 0);
	trans[3][50]	= settr(292,2,51,2,0,"else", 1, 2, 0);
	trans[3][51]	= settr(293,2,60,1,0,"(1)", 1, 2, 0);
	T = trans[3][60] = settr(302,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(302,2,55,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(302,2,59,0,0,"IF", 1, 2, 0);
	trans[3][55]	= settr(297,2,58,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][58] = settr(300,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(300,0,56,0,0,"sub-sequence", 1, 2, 0);
	trans[3][56]	= settr(298,2,75,243,243,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 57 -> 0,75 */
	reached3[57] = 1;
	trans[3][57]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][61]	= settr(303,2,75,1,0,".(goto)", 1, 2, 0);
	trans[3][59]	= settr(301,2,75,1,0,"(1)", 1, 2, 0);
	T = trans[3][75] = settr(317,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(317,2,62,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(317,2,73,0,0,"IF", 1, 2, 0);
	trans[3][62]	= settr(304,2,67,244,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][67] = settr(309,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(309,2,63,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(309,2,65,0,0,"IF", 1, 2, 0);
	trans[3][63]	= settr(305,2,71,245,245,"((EP>=2))", 1, 2, 0); /* m: 64 -> 71,0 */
	reached3[64] = 1;
	trans[3][64]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][68]	= settr(310,2,71,1,0,".(goto)", 1, 2, 0);
	trans[3][65]	= settr(307,2,66,2,0,"else", 1, 2, 0);
	trans[3][66]	= settr(308,2,71,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][71] = settr(313,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(313,0,69,0,0,"sub-sequence", 1, 2, 0);
	trans[3][69]	= settr(311,4,146,246,246,"assert((EP_Stack==255))", 1, 2, 0); /* m: 70 -> 0,146 */
	reached3[70] = 1;
	trans[3][70]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][72]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][76]	= settr(318,0,146,247,247,".(goto)", 1, 2, 0);
	trans[3][73]	= settr(315,2,74,2,0,"else", 1, 2, 0);
	trans[3][74]	= settr(316,4,146,248,248,"(1)", 1, 2, 0); /* m: 76 -> 146,0 */
	reached3[76] = 1;
	T = trans[ 3][146] = settr(388,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(388,2,78,0,0,"ATOMIC", 1, 2, 0);
	trans[3][78]	= settr(320,2,123,249,0,"(((2+1)==EP))", 1, 2, 0);
	T = trans[ 3][123] = settr(365,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(365,0,79,0,0,"sub-sequence", 1, 2, 0);
	trans[3][79]	= settr(321,2,83,250,250,"intSave = 0", 1, 2, 0); /* m: 80 -> 0,83 */
	reached3[80] = 1;
	trans[3][80]	= settr(0,0,0,0,0,"tempStatus = 0",0,0,0);
	trans[3][81]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	T = trans[ 3][83] = settr(325,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(325,0,82,0,0,"sub-sequence", 1, 2, 0);
	trans[3][82]	= settr(324,2,111,251,251,"intSave = 0", 1, 2, 0); /* m: 84 -> 0,111 */
	reached3[84] = 1;
	trans[3][84]	= settr(0,0,0,0,0,"tempStatus = tcb[2].state",0,0,0);
	trans[3][85]	= settr(0,0,0,0,0,"assert((tempStatus==3))",0,0,0);
	T = trans[ 3][111] = settr(353,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(353,0,86,0,0,"sub-sequence", 1, 2, 0);
	trans[3][86]	= settr(328,2,102,252,252,"assert((tcb[2].state==3))", 1, 2, 0); /* m: 87 -> 0,102 */
	reached3[87] = 1;
	trans[3][87]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	trans[3][88]	= settr(0,0,0,0,0,"tcb[2].state = 1",0,0,0);
	T = trans[ 3][102] = settr(344,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(344,0,89,0,0,"sub-sequence", 1, 2, 0);
	trans[3][89]	= settr(331,2,96,253,253,"idx = tcb[2].pendList", 1, 2, 0);
	trans[3][97]	= settr(339,2,96,1,0,".(goto)", 1, 2, 0);
	T = trans[3][96] = settr(338,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(338,2,90,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(338,2,94,0,0,"DO", 1, 2, 0);
	trans[3][90]	= settr(332,2,96,254,254,"((idx<(g_taskSortLinkTail-1)))", 1, 2, 0); /* m: 91 -> 96,0 */
	reached3[91] = 1;
	trans[3][91]	= settr(0,0,0,0,0,"g_taskSortLink[idx].taskId = g_taskSortLink[(idx+1)].taskId",0,0,0);
	trans[3][92]	= settr(0,0,0,0,0,"g_taskSortLink[idx].responseTime = g_taskSortLink[(idx+1)].responseTime",0,0,0);
	trans[3][93]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[3][94]	= settr(336,2,99,2,0,"else", 1, 2, 0);
	trans[3][95]	= settr(337,2,99,1,0,"goto :b6", 1, 2, 0); /* m: 99 -> 0,110 */
	reached3[99] = 1;
	trans[3][98]	= settr(340,2,99,1,0,"break", 1, 2, 0);
	trans[3][99]	= settr(341,2,110,255,255,"g_taskSortLink[(g_taskSortLinkTail-1)].taskId = 255", 1, 2, 0); /* m: 100 -> 0,110 */
	reached3[100] = 1;
	trans[3][100]	= settr(0,0,0,0,0,"g_taskSortLink[(g_taskSortLinkTail-1)].responseTime = 255",0,0,0);
	trans[3][101]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail-1)",0,0,0);
	T = trans[ 3][110] = settr(352,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(352,0,108,0,0,"sub-sequence", 1, 2, 0);
	T = trans[3][108] = settr(350,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(350,2,103,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(350,2,106,0,0,"IF", 1, 2, 0);
	trans[3][103]	= settr(345,2,121,256,256,"((readyQueue[tcb[2].prio].tailIndex<5))", 1, 2, 0); /* m: 104 -> 121,0 */
	reached3[104] = 1;
	trans[3][104]	= settr(0,0,0,0,0,"readyQueue[tcb[2].prio].tasks[readyQueue[tcb[2].prio].tailIndex] = 2",0,0,0);
	trans[3][105]	= settr(0,0,0,0,0,"readyQueue[tcb[2].prio].tailIndex = (readyQueue[tcb[2].prio].tailIndex+1)",0,0,0);
	trans[3][109]	= settr(351,2,121,1,0,".(goto)", 1, 2, 0);
	trans[3][106]	= settr(348,2,107,2,0,"else", 1, 2, 0);
	trans[3][107]	= settr(349,2,121,257,0,"assert(0)", 1, 2, 0);
	T = trans[3][121] = settr(363,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(363,2,112,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(363,2,119,0,0,"IF", 1, 2, 0);
	trans[3][112]	= settr(354,2,114,258,258,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 3][114] = settr(356,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(356,0,113,0,0,"sub-sequence", 1, 2, 0);
	trans[3][113]	= settr(355,2,118,259,259,"intSave = 0", 1, 2, 0);
	T = trans[ 3][118] = settr(360,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(360,0,117,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][117] = settr(359,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(359,0,115,0,0,"sub-sequence", 1, 2, 0);
	trans[3][115]	= settr(357,2,129,260,260,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 116 -> 0,129 */
	reached3[116] = 1;
	trans[3][116]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[3][122]	= settr(364,2,129,1,0,".(goto)", 1, 2, 0);
	trans[3][119]	= settr(361,2,120,2,0,"else", 1, 2, 0);
	trans[3][120]	= settr(362,2,129,1,0,"(1)", 1, 2, 0);
	T = trans[3][129] = settr(371,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(371,2,124,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(371,2,128,0,0,"IF", 1, 2, 0);
	trans[3][124]	= settr(366,2,127,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][127] = settr(369,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(369,0,125,0,0,"sub-sequence", 1, 2, 0);
	trans[3][125]	= settr(367,2,144,261,261,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 126 -> 0,144 */
	reached3[126] = 1;
	trans[3][126]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][130]	= settr(372,2,144,1,0,".(goto)", 1, 2, 0);
	trans[3][128]	= settr(370,2,144,1,0,"(1)", 1, 2, 0);
	T = trans[3][144] = settr(386,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,131,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(386,2,142,0,0,"IF", 1, 2, 0);
	trans[3][131]	= settr(373,2,136,262,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][136] = settr(378,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(378,2,132,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(378,2,134,0,0,"IF", 1, 2, 0);
	trans[3][132]	= settr(374,2,140,263,263,"((EP>=2))", 1, 2, 0); /* m: 133 -> 140,0 */
	reached3[133] = 1;
	trans[3][133]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][137]	= settr(379,2,140,1,0,".(goto)", 1, 2, 0);
	trans[3][134]	= settr(376,2,135,2,0,"else", 1, 2, 0);
	trans[3][135]	= settr(377,2,140,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][140] = settr(382,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(382,0,138,0,0,"sub-sequence", 1, 2, 0);
	trans[3][138]	= settr(380,4,171,264,264,"assert((EP_Stack==255))", 1, 2, 0); /* m: 139 -> 0,171 */
	reached3[139] = 1;
	trans[3][139]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][141]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][145]	= settr(387,0,171,265,265,".(goto)", 1, 2, 0);
	trans[3][142]	= settr(384,2,143,2,0,"else", 1, 2, 0);
	trans[3][143]	= settr(385,4,171,266,266,"(1)", 1, 2, 0); /* m: 145 -> 171,0 */
	reached3[145] = 1;
	T = trans[ 3][171] = settr(413,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(413,2,147,0,0,"ATOMIC", 1, 2, 0);
	trans[3][147]	= settr(389,2,154,267,267,"(((2+1)==EP))", 1, 2, 0); /* m: 148 -> 154,0 */
	reached3[148] = 1;
	trans[3][148]	= settr(0,0,0,0,0,"assert((EP==(2+1)))",0,0,0);
	T = trans[3][154] = settr(396,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(396,2,149,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(396,2,153,0,0,"IF", 1, 2, 0);
	trans[3][149]	= settr(391,2,152,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][152] = settr(394,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(394,0,150,0,0,"sub-sequence", 1, 2, 0);
	trans[3][150]	= settr(392,2,169,268,268,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 151 -> 0,169 */
	reached3[151] = 1;
	trans[3][151]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][155]	= settr(397,2,169,1,0,".(goto)", 1, 2, 0);
	trans[3][153]	= settr(395,2,169,1,0,"(1)", 1, 2, 0);
	T = trans[3][169] = settr(411,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(411,2,156,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(411,2,167,0,0,"IF", 1, 2, 0);
	trans[3][156]	= settr(398,2,161,269,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][161] = settr(403,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(403,2,157,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(403,2,159,0,0,"IF", 1, 2, 0);
	trans[3][157]	= settr(399,2,165,270,270,"((EP>=2))", 1, 2, 0); /* m: 158 -> 165,0 */
	reached3[158] = 1;
	trans[3][158]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][162]	= settr(404,2,165,1,0,".(goto)", 1, 2, 0);
	trans[3][159]	= settr(401,2,160,2,0,"else", 1, 2, 0);
	trans[3][160]	= settr(402,2,165,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][165] = settr(407,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(407,0,163,0,0,"sub-sequence", 1, 2, 0);
	trans[3][163]	= settr(405,0,172,271,271,"assert((EP_Stack==255))", 1, 2, 0); /* m: 164 -> 0,172 */
	reached3[164] = 1;
	trans[3][164]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][166]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][170]	= settr(412,0,172,272,272,".(goto)", 1, 2, 0);
	trans[3][167]	= settr(409,2,168,2,0,"else", 1, 2, 0);
	trans[3][168]	= settr(410,0,172,273,273,"(1)", 1, 2, 0); /* m: 170 -> 172,0 */
	reached3[170] = 1;
	trans[3][174]	= settr(416,0,175,1,0,"break", 0, 2, 0);
	trans[3][175]	= settr(417,0,0,274,274,"-end-", 0, 3500, 0);

	/* proctype 2: Process1 */

	trans[2] = (Trans **) emalloc(55*sizeof(Trans *));

	trans[2][52]	= settr(240,0,51,1,0,".(goto)", 0, 2, 0);
	T = trans[2][51] = settr(239,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(239,0,25,0,0,"DO", 0, 2, 0);
	T = trans[ 2][25] = settr(213,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(213,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[2][1]	= settr(189,2,8,275,275,"((2==EP))", 1, 2, 0); /* m: 2 -> 8,0 */
	reached2[2] = 1;
	trans[2][2]	= settr(0,0,0,0,0,"printf('Process1 running\\\\n')",0,0,0);
	T = trans[2][8] = settr(196,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(196,2,3,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(196,2,7,0,0,"IF", 1, 2, 0);
	trans[2][3]	= settr(191,2,6,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][6] = settr(194,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(194,0,4,0,0,"sub-sequence", 1, 2, 0);
	trans[2][4]	= settr(192,2,23,276,276,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 5 -> 0,23 */
	reached2[5] = 1;
	trans[2][5]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[2][9]	= settr(197,2,23,1,0,".(goto)", 1, 2, 0);
	trans[2][7]	= settr(195,2,23,1,0,"(1)", 1, 2, 0);
	T = trans[2][23] = settr(211,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(211,2,10,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(211,2,21,0,0,"IF", 1, 2, 0);
	trans[2][10]	= settr(198,2,15,277,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[2][15] = settr(203,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(203,2,11,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(203,2,13,0,0,"IF", 1, 2, 0);
	trans[2][11]	= settr(199,2,19,278,278,"((EP>=2))", 1, 2, 0); /* m: 12 -> 19,0 */
	reached2[12] = 1;
	trans[2][12]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[2][16]	= settr(204,2,19,1,0,".(goto)", 1, 2, 0);
	trans[2][13]	= settr(201,2,14,2,0,"else", 1, 2, 0);
	trans[2][14]	= settr(202,2,19,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][19] = settr(207,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(207,0,17,0,0,"sub-sequence", 1, 2, 0);
	trans[2][17]	= settr(205,4,50,279,279,"assert((EP_Stack==255))", 1, 2, 0); /* m: 18 -> 0,50 */
	reached2[18] = 1;
	trans[2][18]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[2][20]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[2][24]	= settr(212,0,50,280,280,".(goto)", 1, 2, 0);
	trans[2][21]	= settr(209,2,22,2,0,"else", 1, 2, 0);
	trans[2][22]	= settr(210,4,50,281,281,"(1)", 1, 2, 0); /* m: 24 -> 50,0 */
	reached2[24] = 1;
	T = trans[ 2][50] = settr(238,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(238,2,26,0,0,"ATOMIC", 1, 2, 0);
	trans[2][26]	= settr(214,2,33,282,282,"((2==EP))", 1, 2, 0); /* m: 27 -> 33,0 */
	reached2[27] = 1;
	trans[2][27]	= settr(0,0,0,0,0,"assert((EP==2))",0,0,0);
	T = trans[2][33] = settr(221,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(221,2,28,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(221,2,32,0,0,"IF", 1, 2, 0);
	trans[2][28]	= settr(216,2,31,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][31] = settr(219,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(219,0,29,0,0,"sub-sequence", 1, 2, 0);
	trans[2][29]	= settr(217,2,48,283,283,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 30 -> 0,48 */
	reached2[30] = 1;
	trans[2][30]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[2][34]	= settr(222,2,48,1,0,".(goto)", 1, 2, 0);
	trans[2][32]	= settr(220,2,48,1,0,"(1)", 1, 2, 0);
	T = trans[2][48] = settr(236,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(236,2,35,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(236,2,46,0,0,"IF", 1, 2, 0);
	trans[2][35]	= settr(223,2,40,284,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[2][40] = settr(228,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(228,2,36,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(228,2,38,0,0,"IF", 1, 2, 0);
	trans[2][36]	= settr(224,2,44,285,285,"((EP>=2))", 1, 2, 0); /* m: 37 -> 44,0 */
	reached2[37] = 1;
	trans[2][37]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[2][41]	= settr(229,2,44,1,0,".(goto)", 1, 2, 0);
	trans[2][38]	= settr(226,2,39,2,0,"else", 1, 2, 0);
	trans[2][39]	= settr(227,2,44,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][44] = settr(232,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(232,0,42,0,0,"sub-sequence", 1, 2, 0);
	trans[2][42]	= settr(230,0,51,286,286,"assert((EP_Stack==255))", 1, 2, 0); /* m: 43 -> 0,51 */
	reached2[43] = 1;
	trans[2][43]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[2][45]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[2][49]	= settr(237,0,51,287,287,".(goto)", 1, 2, 0);
	trans[2][46]	= settr(234,2,47,2,0,"else", 1, 2, 0);
	trans[2][47]	= settr(235,0,51,288,288,"(1)", 1, 2, 0); /* m: 49 -> 51,0 */
	reached2[49] = 1;
	trans[2][53]	= settr(241,0,54,1,0,"break", 0, 2, 0);
	trans[2][54]	= settr(242,0,0,289,289,"-end-", 0, 3500, 0);

	/* proctype 1: SysTick_Handler */

	trans[1] = (Trans **) emalloc(50*sizeof(Trans *));

	trans[1][47]	= settr(186,0,46,1,0,".(goto)", 0, 2, 0);
	T = trans[1][46] = settr(185,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(185,0,1,0,0,"DO", 0, 2, 0);
	trans[1][1]	= settr(140,0,7,290,0,"((EP==1))", 1, 2, 0);
	T = trans[ 1][7] = settr(146,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(146,0,6,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6] = settr(145,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(145,2,2,0,0,"ATOMIC", 1, 2, 0);
	trans[1][2]	= settr(141,2,5,291,0,"((EP==1))", 1, 2, 0);
	T = trans[ 1][5] = settr(144,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(144,0,3,0,0,"sub-sequence", 1, 2, 0);
	trans[1][3]	= settr(142,4,20,292,292,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 4 -> 0,20 */
	reached1[4] = 1;
	trans[1][4]	= settr(0,0,0,0,0,"pending_exp = (pending_exp&~((1<<1)))",0,0,0);
	T = trans[ 1][20] = settr(159,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(159,2,8,0,0,"ATOMIC", 1, 2, 0);
	trans[1][8]	= settr(147,2,11,293,0,"((1==EP))", 1, 2, 0);
	T = trans[ 1][11] = settr(150,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(150,0,9,0,0,"sub-sequence", 1, 2, 0);
	trans[1][9]	= settr(148,2,18,294,294,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 10 -> 0,18 */
	reached1[10] = 1;
	trans[1][10]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	T = trans[1][18] = settr(157,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(157,2,12,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(157,2,17,0,0,"IF", 1, 2, 0);
	trans[1][12]	= settr(151,2,15,295,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 1][15] = settr(154,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(154,0,13,0,0,"sub-sequence", 1, 2, 0);
	trans[1][13]	= settr(152,4,45,296,296,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 14 -> 0,45 */
	reached1[14] = 1;
	trans[1][14]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[1][16]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[1][19]	= settr(158,0,45,297,297,".(goto)", 1, 2, 0);
	trans[1][17]	= settr(156,4,45,298,298,"(1)", 1, 2, 0); /* m: 19 -> 45,0 */
	reached1[19] = 1;
	T = trans[ 1][45] = settr(184,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(184,2,21,0,0,"ATOMIC", 1, 2, 0);
	trans[1][21]	= settr(160,2,36,299,0,"((1==EP))", 1, 2, 0);
	T = trans[ 1][36] = settr(175,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(175,0,34,0,0,"sub-sequence", 1, 2, 0);
	T = trans[1][34] = settr(173,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(173,2,22,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(173,2,29,0,0,"IF", 1, 2, 0);
	trans[1][22]	= settr(161,2,28,300,0,"((pending_exp>0))", 1, 2, 0);
	T = trans[ 1][28] = settr(167,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(167,0,24,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 1][24] = settr(163,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(163,0,23,0,0,"sub-sequence", 1, 2, 0);
	trans[1][23]	= settr(162,2,43,301,301,"tmp = ( (((pending_exp>>0)&1)) -> (0) : (1) )", 1, 2, 0); /* m: 25 -> 0,43 */
	reached1[25] = 1;
	trans[1][25]	= settr(0,0,0,0,0,"assert((((BASEPRI==0)||(15<BASEPRI))&&(EP_Stack>=2)))",0,0,0);
	trans[1][26]	= settr(0,0,0,0,0,"EP = tmp",0,0,0);
	trans[1][27]	= settr(0,0,0,0,0,"tmp = 255",0,0,0);
	trans[1][35]	= settr(174,2,43,1,0,".(goto)", 1, 2, 0);
	trans[1][29]	= settr(168,2,33,2,0,"else", 1, 2, 0);
	T = trans[ 1][33] = settr(172,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(172,0,30,0,0,"sub-sequence", 1, 2, 0);
	trans[1][30]	= settr(169,2,43,302,302,"assert((EP_Stack!=255))", 1, 2, 0); /* m: 31 -> 0,43 */
	reached1[31] = 1;
	trans[1][31]	= settr(0,0,0,0,0,"EP = EP_Stack",0,0,0);
	trans[1][32]	= settr(0,0,0,0,0,"EP_Stack = 255",0,0,0);
	T = trans[1][43] = settr(182,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(182,2,37,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(182,2,42,0,0,"IF", 1, 2, 0);
	trans[1][37]	= settr(176,2,40,303,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 1][40] = settr(179,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(179,0,38,0,0,"sub-sequence", 1, 2, 0);
	trans[1][38]	= settr(177,0,46,304,304,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 39 -> 0,46 */
	reached1[39] = 1;
	trans[1][39]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[1][41]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[1][44]	= settr(183,0,46,305,305,".(goto)", 1, 2, 0);
	trans[1][42]	= settr(181,0,46,306,306,"(1)", 1, 2, 0); /* m: 44 -> 46,0 */
	reached1[44] = 1;
	trans[1][48]	= settr(187,0,49,1,0,"break", 0, 2, 0);
	trans[1][49]	= settr(188,0,0,307,307,"-end-", 0, 3500, 0);

	/* proctype 0: PendSV_Handler */

	trans[0] = (Trans **) emalloc(141*sizeof(Trans *));

	trans[0][138]	= settr(137,0,137,1,0,".(goto)", 0, 2, 0);
	T = trans[0][137] = settr(136,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(136,0,1,0,0,"DO", 0, 2, 0);
	trans[0][1]	= settr(0,0,7,308,0,"((EP==0))", 1, 2, 0);
	T = trans[ 0][7] = settr(6,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6,0,6,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][6] = settr(5,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5,2,2,0,0,"ATOMIC", 1, 2, 0);
	trans[0][2]	= settr(1,2,5,309,0,"((EP==0))", 1, 2, 0);
	T = trans[ 0][5] = settr(4,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(4,0,3,0,0,"sub-sequence", 1, 2, 0);
	trans[0][3]	= settr(2,4,31,310,310,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 4 -> 0,31 */
	reached0[4] = 1;
	trans[0][4]	= settr(0,0,0,0,0,"pending_exp = (pending_exp&~((1<<0)))",0,0,0);
	T = trans[ 0][31] = settr(30,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(30,2,8,0,0,"ATOMIC", 1, 2, 0);
	trans[0][8]	= settr(7,2,21,311,0,"((0==EP))", 1, 2, 0);
	T = trans[0][21] = settr(20,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(20,2,9,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(20,2,19,0,0,"IF", 1, 2, 0);
	trans[0][9]	= settr(8,2,18,312,312,"((tcb[EP_Stack].state==4))", 1, 2, 0); /* m: 10 -> 18,0 */
	reached0[10] = 1;
	trans[0][10]	= settr(0,0,0,0,0,"tcb[EP_Stack].state = 1",0,0,0);
	T = trans[ 0][18] = settr(17,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(17,0,16,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][16] = settr(15,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15,2,11,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15,2,14,0,0,"IF", 1, 2, 0);
	trans[0][11]	= settr(10,2,29,313,313,"((readyQueue[tcb[EP_Stack].prio].tailIndex<5))", 1, 2, 0); /* m: 12 -> 29,0 */
	reached0[12] = 1;
	trans[0][12]	= settr(0,0,0,0,0,"readyQueue[tcb[EP_Stack].prio].tasks[readyQueue[tcb[EP_Stack].prio].tailIndex] = EP_Stack",0,0,0);
	trans[0][13]	= settr(0,0,0,0,0,"readyQueue[tcb[EP_Stack].prio].tailIndex = (readyQueue[tcb[EP_Stack].prio].tailIndex+1)",0,0,0);
	trans[0][17]	= settr(16,2,29,1,0,".(goto)", 1, 2, 0);
	trans[0][14]	= settr(13,2,15,2,0,"else", 1, 2, 0);
	trans[0][15]	= settr(14,2,29,314,0,"assert(0)", 1, 2, 0);
	trans[0][22]	= settr(21,2,29,1,0,".(goto)", 1, 2, 0);
	trans[0][19]	= settr(18,2,20,2,0,"else", 1, 2, 0);
	trans[0][20]	= settr(19,2,29,1,0,"(1)", 1, 2, 0);
	T = trans[0][29] = settr(28,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(28,2,23,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(28,2,28,0,0,"IF", 1, 2, 0);
	trans[0][23]	= settr(22,2,26,315,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][26] = settr(25,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(25,0,24,0,0,"sub-sequence", 1, 2, 0);
	trans[0][24]	= settr(23,4,60,316,316,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 25 -> 0,60 */
	reached0[25] = 1;
	trans[0][25]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][27]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][30]	= settr(29,0,60,317,317,".(goto)", 1, 2, 0);
	trans[0][28]	= settr(27,4,60,318,318,"(1)", 1, 2, 0); /* m: 30 -> 60,0 */
	reached0[30] = 1;
	T = trans[ 0][60] = settr(59,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(59,2,32,0,0,"ATOMIC", 1, 2, 0);
	trans[0][32]	= settr(31,2,51,319,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][51] = settr(50,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(50,0,33,0,0,"sub-sequence", 1, 2, 0);
	trans[0][33]	= settr(32,2,46,320,320,"prio = 0", 1, 2, 0); /* m: 34 -> 0,46 */
	reached0[34] = 1;
	trans[0][34]	= settr(0,0,0,0,0,"top_task = 0",0,0,0);
	trans[0][35]	= settr(0,0,0,0,0,"found = 0",0,0,0);
	trans[0][47]	= settr(46,2,46,1,0,".(goto)", 1, 2, 0);
	T = trans[0][46] = settr(45,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(45,2,36,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(45,2,44,0,0,"DO", 1, 2, 0);
	trans[0][36]	= settr(35,2,42,321,0,"(((prio<4)&&!(found)))", 1, 2, 0);
	T = trans[0][42] = settr(41,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(41,2,37,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(41,2,40,0,0,"IF", 1, 2, 0);
	trans[0][37]	= settr(36,2,46,322,322,"((readyQueue[prio].tailIndex>0))", 1, 2, 0); /* m: 38 -> 46,0 */
	reached0[38] = 1;
	trans[0][38]	= settr(0,0,0,0,0,"top_task = readyQueue[prio].tasks[0]",0,0,0);
	trans[0][39]	= settr(0,0,0,0,0,"found = 1",0,0,0);
	trans[0][43]	= settr(42,2,46,1,0,".(goto)", 1, 2, 0);
	trans[0][40]	= settr(39,2,41,2,0,"else", 1, 2, 0);
	trans[0][41]	= settr(40,2,46,323,323,"prio = (prio+1)", 1, 2, 0);
	trans[0][44]	= settr(43,2,49,2,0,"else", 1, 2, 0);
	trans[0][45]	= settr(44,2,49,1,0,"goto :b1", 1, 2, 0); /* m: 49 -> 0,58 */
	reached0[49] = 1;
	trans[0][48]	= settr(47,2,49,1,0,"break", 1, 2, 0);
	trans[0][49]	= settr(48,2,58,324,324,"tmp = top_task", 1, 2, 0); /* m: 50 -> 0,58 */
	reached0[50] = 1;
	trans[0][50]	= settr(0,0,0,0,0,"topPrio = prio",0,0,0);
	T = trans[0][58] = settr(57,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(57,2,52,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(57,2,57,0,0,"IF", 1, 2, 0);
	trans[0][52]	= settr(51,2,55,325,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][55] = settr(54,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(54,0,53,0,0,"sub-sequence", 1, 2, 0);
	trans[0][53]	= settr(52,4,87,326,326,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 54 -> 0,87 */
	reached0[54] = 1;
	trans[0][54]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][56]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][59]	= settr(58,0,87,327,327,".(goto)", 1, 2, 0);
	trans[0][57]	= settr(56,4,87,328,328,"(1)", 1, 2, 0); /* m: 59 -> 87,0 */
	reached0[59] = 1;
	T = trans[ 0][87] = settr(86,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(86,2,61,0,0,"ATOMIC", 1, 2, 0);
	trans[0][61]	= settr(60,2,78,329,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][78] = settr(77,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(77,0,62,0,0,"sub-sequence", 1, 2, 0);
	trans[0][62]	= settr(61,2,68,330,330,"idx = 0", 1, 2, 0);
	trans[0][69]	= settr(68,2,68,1,0,".(goto)", 1, 2, 0);
	T = trans[0][68] = settr(67,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(67,2,63,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(67,2,66,0,0,"DO", 1, 2, 0);
	trans[0][63]	= settr(62,2,68,331,331,"((idx<(readyQueue[topPrio].tailIndex-1)))", 1, 2, 0); /* m: 64 -> 68,0 */
	reached0[64] = 1;
	trans[0][64]	= settr(0,0,0,0,0,"readyQueue[topPrio].tasks[idx] = readyQueue[topPrio].tasks[(idx+1)]",0,0,0);
	trans[0][65]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[0][66]	= settr(65,2,76,2,0,"else", 1, 2, 0);
	trans[0][67]	= settr(66,2,76,1,0,"goto :b2", 1, 2, 0);
	trans[0][70]	= settr(69,2,76,1,0,"break", 1, 2, 0);
	T = trans[0][76] = settr(75,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(75,2,71,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(75,2,74,0,0,"IF", 1, 2, 0);
	trans[0][71]	= settr(70,2,85,332,332,"((readyQueue[topPrio].tailIndex>0))", 1, 2, 0); /* m: 72 -> 85,0 */
	reached0[72] = 1;
	trans[0][72]	= settr(0,0,0,0,0,"readyQueue[topPrio].tasks[(readyQueue[topPrio].tailIndex-1)] = 255",0,0,0);
	trans[0][73]	= settr(0,0,0,0,0,"readyQueue[topPrio].tailIndex = (readyQueue[topPrio].tailIndex-1)",0,0,0);
	trans[0][77]	= settr(76,2,85,1,0,".(goto)", 1, 2, 0);
	trans[0][74]	= settr(73,2,75,2,0,"else", 1, 2, 0);
	trans[0][75]	= settr(74,2,85,1,0,"(1)", 1, 2, 0);
	T = trans[0][85] = settr(84,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(84,2,79,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(84,2,84,0,0,"IF", 1, 2, 0);
	trans[0][79]	= settr(78,2,82,333,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][82] = settr(81,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(81,0,80,0,0,"sub-sequence", 1, 2, 0);
	trans[0][80]	= settr(79,4,98,334,334,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 81 -> 0,98 */
	reached0[81] = 1;
	trans[0][81]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][83]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][86]	= settr(85,0,98,335,335,".(goto)", 1, 2, 0);
	trans[0][84]	= settr(83,4,98,336,336,"(1)", 1, 2, 0); /* m: 86 -> 98,0 */
	reached0[86] = 1;
	T = trans[ 0][98] = settr(97,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(97,2,88,0,0,"ATOMIC", 1, 2, 0);
	trans[0][88]	= settr(87,2,96,337,337,"((0==EP))", 1, 2, 0); /* m: 89 -> 96,0 */
	reached0[89] = 1;
	trans[0][89]	= settr(0,0,0,0,0,"tcb[tmp].state = 4",0,0,0);
	T = trans[0][96] = settr(95,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(95,2,90,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(95,2,95,0,0,"IF", 1, 2, 0);
	trans[0][90]	= settr(89,2,93,338,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][93] = settr(92,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(92,0,91,0,0,"sub-sequence", 1, 2, 0);
	trans[0][91]	= settr(90,4,111,339,339,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 92 -> 0,111 */
	reached0[92] = 1;
	trans[0][92]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][94]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][97]	= settr(96,0,111,340,340,".(goto)", 1, 2, 0);
	trans[0][95]	= settr(94,4,111,341,341,"(1)", 1, 2, 0); /* m: 97 -> 111,0 */
	reached0[97] = 1;
	T = trans[ 0][111] = settr(110,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(110,2,99,0,0,"ATOMIC", 1, 2, 0);
	trans[0][99]	= settr(98,2,102,342,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][102] = settr(101,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(101,0,100,0,0,"sub-sequence", 1, 2, 0);
	trans[0][100]	= settr(99,2,109,343,343,"assert((((EP_Stack!=255)&&(EP_Stack>=2))&&(tmp>=2)))", 1, 2, 0); /* m: 101 -> 0,109 */
	reached0[101] = 1;
	trans[0][101]	= settr(0,0,0,0,0,"EP_Stack = tmp",0,0,0);
	T = trans[0][109] = settr(108,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(108,2,103,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(108,2,108,0,0,"IF", 1, 2, 0);
	trans[0][103]	= settr(102,2,106,344,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][106] = settr(105,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(105,0,104,0,0,"sub-sequence", 1, 2, 0);
	trans[0][104]	= settr(103,4,136,345,345,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 105 -> 0,136 */
	reached0[105] = 1;
	trans[0][105]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][107]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][110]	= settr(109,0,136,346,346,".(goto)", 1, 2, 0);
	trans[0][108]	= settr(107,4,136,347,347,"(1)", 1, 2, 0); /* m: 110 -> 136,0 */
	reached0[110] = 1;
	T = trans[ 0][136] = settr(135,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(135,2,112,0,0,"ATOMIC", 1, 2, 0);
	trans[0][112]	= settr(111,2,127,348,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][127] = settr(126,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(126,0,125,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][125] = settr(124,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(124,2,113,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(124,2,120,0,0,"IF", 1, 2, 0);
	trans[0][113]	= settr(112,2,119,349,0,"((pending_exp>0))", 1, 2, 0);
	T = trans[ 0][119] = settr(118,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(118,0,115,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 0][115] = settr(114,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(114,0,114,0,0,"sub-sequence", 1, 2, 0);
	trans[0][114]	= settr(113,2,134,350,350,"tmp = ( (((pending_exp>>0)&1)) -> (0) : (1) )", 1, 2, 0); /* m: 116 -> 0,134 */
	reached0[116] = 1;
	trans[0][116]	= settr(0,0,0,0,0,"assert((((BASEPRI==0)||(15<BASEPRI))&&(EP_Stack>=2)))",0,0,0);
	trans[0][117]	= settr(0,0,0,0,0,"EP = tmp",0,0,0);
	trans[0][118]	= settr(0,0,0,0,0,"tmp = 255",0,0,0);
	trans[0][126]	= settr(125,2,134,1,0,".(goto)", 1, 2, 0);
	trans[0][120]	= settr(119,2,124,2,0,"else", 1, 2, 0);
	T = trans[ 0][124] = settr(123,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(123,0,121,0,0,"sub-sequence", 1, 2, 0);
	trans[0][121]	= settr(120,2,134,351,351,"assert((EP_Stack!=255))", 1, 2, 0); /* m: 122 -> 0,134 */
	reached0[122] = 1;
	trans[0][122]	= settr(0,0,0,0,0,"EP = EP_Stack",0,0,0);
	trans[0][123]	= settr(0,0,0,0,0,"EP_Stack = 255",0,0,0);
	T = trans[0][134] = settr(133,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(133,2,128,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(133,2,133,0,0,"IF", 1, 2, 0);
	trans[0][128]	= settr(127,2,131,352,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][131] = settr(130,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(130,0,129,0,0,"sub-sequence", 1, 2, 0);
	trans[0][129]	= settr(128,0,137,353,353,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 130 -> 0,137 */
	reached0[130] = 1;
	trans[0][130]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][132]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][135]	= settr(134,0,137,354,354,".(goto)", 1, 2, 0);
	trans[0][133]	= settr(132,0,137,355,355,"(1)", 1, 2, 0); /* m: 135 -> 137,0 */
	reached0[135] = 1;
	trans[0][139]	= settr(138,0,140,1,0,"break", 0, 2, 0);
	trans[0][140]	= settr(139,0,0,356,356,"-end-", 0, 3500, 0);
	/* np_ demon: */
	trans[_NP_] = (Trans **) emalloc(3*sizeof(Trans *));
	T = trans[_NP_][0] = settr(9997,0,1,_T5,0,"(np_)", 1,2,0);
	    T->nxt	  = settr(9998,0,0,_T2,0,"(1)",   0,2,0);
	T = trans[_NP_][1] = settr(9999,0,1,_T5,0,"(np_)", 1,2,0);
}

Trans *
settr(	int t_id, int a, int b, int c, int d,
	char *t, int g, int tpe0, int tpe1)
{	Trans *tmp = (Trans *) emalloc(sizeof(Trans));

	tmp->atom  = a&(6|32);	/* only (2|8|32) have meaning */
	if (!g) tmp->atom |= 8;	/* no global references */
	tmp->st    = b;
	tmp->tpe[0] = tpe0;
	tmp->tpe[1] = tpe1;
	tmp->tp    = t;
	tmp->t_id  = t_id;
	tmp->forw  = c;
	tmp->back  = d;
	return tmp;
}

Trans *
cpytr(Trans *a)
{	Trans *tmp = (Trans *) emalloc(sizeof(Trans));

	int i;
	tmp->atom  = a->atom;
	tmp->st    = a->st;
#ifdef HAS_UNLESS
	tmp->e_trans = a->e_trans;
	for (i = 0; i < HAS_UNLESS; i++)
		tmp->escp[i] = a->escp[i];
#endif
	tmp->tpe[0] = a->tpe[0];
	tmp->tpe[1] = a->tpe[1];
	for (i = 0; i < 6; i++)
	{	tmp->qu[i] = a->qu[i];
		tmp->ty[i] = a->ty[i];
	}
	tmp->tp    = (char *) emalloc(strlen(a->tp)+1);
	strcpy(tmp->tp, a->tp);
	tmp->t_id  = a->t_id;
	tmp->forw  = a->forw;
	tmp->back  = a->back;
	return tmp;
}

#ifndef NOREDUCE
int
srinc_set(int n)
{	if (n <= 2) return LOCAL;
	if (n <= 2+  DELTA) return Q_FULL_F; /* 's' or nfull  */
	if (n <= 2+2*DELTA) return Q_EMPT_F; /* 'r' or nempty */
	if (n <= 2+3*DELTA) return Q_EMPT_T; /* empty */
	if (n <= 2+4*DELTA) return Q_FULL_T; /* full  */
	if (n ==   5*DELTA) return GLOBAL;
	if (n ==   6*DELTA) return TIMEOUT_F;
	if (n ==   7*DELTA) return ALPHA_F;
	Uerror("cannot happen srinc_class");
	return BAD;
}
int
srunc(int n, int m)
{	switch(m) {
	case Q_FULL_F: return n-2;
	case Q_EMPT_F: return n-2-DELTA;
	case Q_EMPT_T: return n-2-2*DELTA;
	case Q_FULL_T: return n-2-3*DELTA;
	case ALPHA_F:
	case TIMEOUT_F: return 257; /* non-zero, and > MAXQ */
	}
	Uerror("cannot happen srunc");
	return 0;
}
#endif
int cnt;
#ifdef HAS_UNLESS
int
isthere(Trans *a, int b)
{	Trans *t;
	for (t = a; t; t = t->nxt)
		if (t->t_id == b)
			return 1;
	return 0;
}
#endif
#ifndef NOREDUCE
int
mark_safety(Trans *t) /* for conditional safety */
{	int g = 0, i, j, k;

	if (!t) return 0;
	if (t->qu[0])
		return (t->qu[1])?2:1;	/* marked */

	for (i = 0; i < 2; i++)
	{	j = srinc_set(t->tpe[i]);
		if (j >= GLOBAL && j != ALPHA_F)
			return -1;
		if (j != LOCAL)
		{	k = srunc(t->tpe[i], j);
			if (g == 0
			||  t->qu[0] != k
			||  t->ty[0] != j)
			{	t->qu[g] = k;
				t->ty[g] = j;
				g++;
	}	}	}
	return g;
}
#endif
void
retrans(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
	/* process n, with m states, is=initial state */
{	Trans *T0, *T1, *T2, *T3;
	Trans *T4, *T5; /* t_reverse or has_unless */
	int i;
#if defined(HAS_UNLESS) || !defined(NOREDUCE)
	int k;
#endif
#ifndef NOREDUCE
	int g, h, j, aa;
#endif
#ifdef HAS_UNLESS
	int p;
#endif
	if (state_tables >= 4)
	{	printf("STEP 1 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
	do {
		for (i = 1, cnt = 0; i < m; i++)
		{	T2 = trans[n][i];
			T1 = T2?T2->nxt:(Trans *)0;
/* prescan: */		for (T0 = T1; T0; T0 = T0->nxt)
/* choice in choice */	{	if (T0->st && trans[n][T0->st]
				&&  trans[n][T0->st]->nxt)
					break;
			}
#if 0
		if (T0)
		printf("\tstate %d / %d: choice in choice\n",
		i, T0->st);
#endif
			if (T0)
			for (T0 = T1; T0; T0 = T0->nxt)
			{	T3 = trans[n][T0->st];
				if (!T3->nxt)
				{	T2->nxt = cpytr(T0);
					T2 = T2->nxt;
					imed(T2, T0->st, n, i);
					continue;
				}
				do {	T3 = T3->nxt;
					T2->nxt = cpytr(T3);
					T2 = T2->nxt;
					imed(T2, T0->st, n, i);
				} while (T3->nxt);
				cnt++;
			}
		}
	} while (cnt);
	if (state_tables >= 3)
	{	printf("STEP 2 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
	for (i = 1; i < m; i++)
	{	if (trans[n][i] && trans[n][i]->nxt) /* optimize */
		{	T1 = trans[n][i]->nxt;
#if 0
			printf("\t\tpull %d (%d) to %d\n",
			T1->st, T1->forw, i);
#endif
			srcln[i] = srcln[T1->st];	/* Oyvind Teig, 5.2.0 */

			if (!trans[n][T1->st]) continue;
			T0 = cpytr(trans[n][T1->st]);
			trans[n][i] = T0;
			reach[T1->st] = 1;
			imed(T0, T1->st, n, i);
			for (T1 = T1->nxt; T1; T1 = T1->nxt)
			{
#if 0
			printf("\t\tpull %d (%d) to %d\n",
				T1->st, T1->forw, i);
#endif
		/*		srcln[i] = srcln[T1->st];  gh: not useful */
				if (!trans[n][T1->st]) continue;
				T0->nxt = cpytr(trans[n][T1->st]);
				T0 = T0->nxt;
				reach[T1->st] = 1;
				imed(T0, T1->st, n, i);
	}	}	}
	if (state_tables >= 2)
	{	printf("STEP 3 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
#ifdef HAS_UNLESS
	for (i = 1; i < m; i++)
	{	if (!trans[n][i]) continue;
		/* check for each state i if an
		 * escape to some state p is defined
		 * if so, copy and mark p's transitions
		 * and prepend them to the transition-
		 * list of state i
		 */
	 if (!like_java) /* the default */
	 {	for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		for (k = HAS_UNLESS-1; k >= 0; k--)
		{	if (p = T0->escp[k])
			for (T1 = trans[n][p]; T1; T1 = T1->nxt)
			{	if (isthere(trans[n][i], T1->t_id))
					continue;
				T2 = cpytr(T1);
				T2->e_trans = p;
				T2->nxt = trans[n][i];
				trans[n][i] = T2;
		}	}
	 } else /* outermost unless checked first */
	 {	T4 = T3 = (Trans *) 0;
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		for (k = HAS_UNLESS-1; k >= 0; k--)
		{	if (p = T0->escp[k])
			for (T1 = trans[n][p]; T1; T1 = T1->nxt)
			{	if (isthere(trans[n][i], T1->t_id))
					continue;
				T2 = cpytr(T1);
				T2->nxt = (Trans *) 0;
				T2->e_trans = p;
				if (T3)	T3->nxt = T2;
				else	T4 = T2;
				T3 = T2;
		}	}
		if (T4)
		{	T3->nxt = trans[n][i];
			trans[n][i] = T4;
		}
	 }
	}
#endif
#ifndef NOREDUCE
	for (i = 1; i < m; i++)
	{	if (a_cycles)
		{ /* moves through these states are visible */
	#if PROG_LAB>0 && defined(HAS_NP)
			if (progstate[n][i])
				goto degrade;
			for (T1 = trans[n][i]; T1; T1 = T1->nxt)
				if (progstate[n][T1->st])
					goto degrade;
	#endif
			if (accpstate[n][i] || visstate[n][i])
				goto degrade;
			for (T1 = trans[n][i]; T1; T1 = T1->nxt)
				if (accpstate[n][T1->st])
					goto degrade;
		}
		T1 = trans[n][i];
		if (!T1) continue;
		g = mark_safety(T1);	/* V3.3.1 */
		if (g < 0) goto degrade; /* global */
		/* check if mixing of guards preserves reduction */
		if (T1->nxt)
		{	k = 0;
			for (T0 = T1; T0; T0 = T0->nxt)
			{	if (!(T0->atom&8))
					goto degrade;
				for (aa = 0; aa < 2; aa++)
				{	j = srinc_set(T0->tpe[aa]);
					if (j >= GLOBAL && j != ALPHA_F)
						goto degrade;
					if (T0->tpe[aa]
					&&  T0->tpe[aa]
					!=  T1->tpe[0])
						k = 1;
			}	}
			/* g = 0;	V3.3.1 */
			if (k)	/* non-uniform selection */
			for (T0 = T1; T0; T0 = T0->nxt)
			for (aa = 0; aa < 2; aa++)
			{	j = srinc_set(T0->tpe[aa]);
				if (j != LOCAL)
				{	k = srunc(T0->tpe[aa], j);
					for (h = 0; h < 6; h++)
						if (T1->qu[h] == k
						&&  T1->ty[h] == j)
							break;
					if (h >= 6)
					{	T1->qu[g%6] = k;
						T1->ty[g%6] = j;
						g++;
			}	}	}
			if (g > 6)
			{	T1->qu[0] = 0;	/* turn it off */
				printf("pan: warning, line %d, ",
					srcln[i]);
			 	printf("too many stmnt types (%d)",
					g);
			  	printf(" in selection\n");
			  goto degrade;
			}
		}
		/* mark all options global if >=1 is global */
		for (T1 = trans[n][i]; T1; T1 = T1->nxt)
			if (!(T1->atom&8)) break;
		if (T1)
degrade:	for (T1 = trans[n][i]; T1; T1 = T1->nxt)
			T1->atom &= ~8;	/* mark as unsafe */
		/* can only mix 'r's or 's's if on same chan */
		/* and not mixed with other local operations */
		T1 = trans[n][i];
		if (!T1 || T1->qu[0]) continue;
		j = T1->tpe[0];
		if (T1->nxt && T1->atom&8)
		{ if (j == 5*DELTA)
		  {	printf("warning: line %d ", srcln[i]);
			printf("mixed condition ");
			printf("(defeats reduction)\n");
			goto degrade;
		  }
		  for (T0 = T1; T0; T0 = T0->nxt)
		  for (aa = 0; aa < 2; aa++)
		  if  (T0->tpe[aa] && T0->tpe[aa] != j)
		  {	printf("warning: line %d ", srcln[i]);
			printf("[%d-%d] mixed %stion ",
				T0->tpe[aa], j, 
				(j==5*DELTA)?"condi":"selec");
			printf("(defeats reduction)\n");
			printf("	'%s' <-> '%s'\n",
				T1->tp, T0->tp);
			goto degrade;
		} }
	}
#endif
	for (i = 1; i < m; i++)
	{	T2 = trans[n][i];
		if (!T2
		||  T2->nxt
		||  strncmp(T2->tp, ".(goto)", 7)
		||  !stopstate[n][i])
			continue;
		stopstate[n][T2->st] = 1;
	}
	if (state_tables && !verbose)
	{	if (dodot)
		{	char buf[256], *q = buf, *p = procname[n];
			while (*p != '\0')
			{	if (*p != ':')
				{	*q++ = *p;
				}
				p++;
			}
			*q = '\0';
			printf("digraph ");
			switch (Btypes[n]) {
			case I_PROC:  printf("init {\n"); break;
			case N_CLAIM: printf("claim_%s {\n", buf); break;
			case E_TRACE: printf("notrace {\n"); break;
			case N_TRACE: printf("trace {\n"); break;
			default:      printf("p_%s {\n", buf); break;
			}
			printf("size=\"8,10\";\n");
			printf("  GT [shape=box,style=dotted,label=\"%s\"];\n", buf);
			printf("  GT -> S%d;\n", is);
		} else
		{	switch (Btypes[n]) {
			case I_PROC:  printf("init\n"); break;
			case N_CLAIM: printf("claim %s\n", procname[n]); break;
			case E_TRACE: printf("notrace assertion\n"); break;
			case N_TRACE: printf("trace assertion\n"); break;
			default:      printf("proctype %s\n", procname[n]); break;
		}	}
		for (i = 1; i < m; i++)
		{	reach[i] = 1;
		}
		tagtable(n, m, is, srcln, reach);
		if (dodot) printf("}\n");
	} else
	for (i = 1; i < m; i++)
	{	int nrelse;
		if (Btypes[n] != N_CLAIM)
		{	for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			{	if (T0->st == i
				&& strcmp(T0->tp, "(1)") == 0)
				{	printf("error: proctype '%s' ",
						procname[n]);
		  			printf("line %d, state %d: has un",
						srcln[i], i);
					printf("conditional self-loop\n");
					pan_exit(1);
		}	}	}
		nrelse = 0;
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		{	if (strcmp(T0->tp, "else") == 0)
				nrelse++;
		}
		if (nrelse > 1)
		{	printf("error: proctype '%s' state",
				procname[n]);
		  	printf(" %d, inherits %d", i, nrelse);
		  	printf(" 'else' stmnts\n");
			pan_exit(1);
	}	}
#if !defined(LOOPSTATE) && !defined(BFS_PAR)
	if (state_tables)
#endif
	do_dfs(n, m, is, srcln, reach, lpstate);

	if (!t_reverse)
	{	return;
	}
	/* process n, with m states, is=initial state -- reverse list */
	if (!state_tables && Btypes[n] != N_CLAIM)
	{	for (i = 1; i < m; i++)
		{	Trans *Tx = (Trans *) 0; /* list of escapes */
			Trans *Ty = (Trans *) 0; /* its tail element */
			T1 = (Trans *) 0; /* reversed list */
			T2 = (Trans *) 0; /* its tail */
			T3 = (Trans *) 0; /* remembers possible 'else' */

			/* find unless-escapes, they should go first */
			T4 = T5 = T0 = trans[n][i];
	#ifdef HAS_UNLESS
			while (T4 && T4->e_trans) /* escapes are first in orig list */
			{	T5 = T4;	  /* remember predecessor */
				T4 = T4->nxt;
			}
	#endif
			/* T4 points to first non-escape, T5 to its parent, T0 to original list */
			if (T4 != T0)		 /* there was at least one escape */
			{	T3 = T5->nxt;		 /* start of non-escapes */
				T5->nxt = (Trans *) 0;	 /* separate */
				Tx = T0;		 /* start of the escapes */
				Ty = T5;		 /* its tail */
				T0 = T3;		 /* the rest, to be reversed */
			}
			/* T0 points to first non-escape, Tx to the list of escapes, Ty to its tail */

			/* first tail-add non-escape transitions, reversed */
			T3 = (Trans *) 0;
			for (T5 = T0; T5; T5 = T4)
			{	T4 = T5->nxt;
	#ifdef HAS_UNLESS
				if (T5->e_trans)
				{	printf("error: cannot happen!\n");
					continue;
				}
	#endif
				if (strcmp(T5->tp, "else") == 0)
				{	T3 = T5;
					T5->nxt = (Trans *) 0;
				} else
				{	T5->nxt = T1;
					if (!T1) { T2 = T5; }
					T1 = T5;
			}	}
			/* T3 points to a possible else, which is removed from the list */
			/* T1 points to the reversed list so far (without escapes) */
			/* T2 points to the tail element -- where the else should go */
			if (T2 && T3)
			{	T2->nxt = T3;	/* add else */
			} else
			{	if (T3) /* there was an else, but there's no tail */
				{	if (!T1)	/* and no reversed list */
					{	T1 = T3; /* odd, but possible */
					} else		/* even stranger */
					{	T1->nxt = T3;
			}	}	}

			/* add in the escapes, to that they appear at the front */
			if (Tx && Ty) { Ty->nxt = T1; T1 = Tx; }

			trans[n][i] = T1;
			/* reversed, with escapes first and else last */
	}	}
	if (state_tables && verbose)
	{	printf("FINAL proctype %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
	}
}
void
imed(Trans *T, int v, int n, int j)	/* set intermediate state */
{	progstate[n][T->st] |= progstate[n][v];
	accpstate[n][T->st] |= accpstate[n][v];
	stopstate[n][T->st] |= stopstate[n][v];
	mapstate[n][j] = T->st;
}
void
tagtable(int n, int m, int is, short srcln[], uchar reach[])
{	Trans *z;

	if (is >= m || !trans[n][is]
	||  is <= 0 || reach[is] == 0)
		return;
	reach[is] = 0;
	if (state_tables)
	for (z = trans[n][is]; z; z = z->nxt)
	{	if (dodot)
			dot_crack(n, is, z);
		else
			crack(n, is, z, srcln);
	}

	for (z = trans[n][is]; z; z = z->nxt)
	{
#ifdef HAS_UNLESS
		int i, j;
#endif
		tagtable(n, m, z->st, srcln, reach);
#ifdef HAS_UNLESS
		for (i = 0; i < HAS_UNLESS; i++)
		{	j = trans[n][is]->escp[i];
			if (!j) break;
			tagtable(n, m, j, srcln, reach);
		}
#endif
	}
}

extern Trans *t_id_lkup[];

void
dfs_table(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
{	Trans *z;

	if (is >= m || is <= 0 || !trans[n][is])
		return;
	if ((reach[is] & (4|8|16)) != 0)
	{	if ((reach[is] & (8|16)) == 16)	/* on stack, not yet recorded */
		{	lpstate[is] = 1;
			reach[is] |= 8; /* recorded */
			if (state_tables && verbose)
			{	printf("state %d line %d is a loopstate\n", is, srcln[is]);
		}	}
		return;
	}
	reach[is] |= (4|16);	/* visited | onstack */
	for (z = trans[n][is]; z; z = z->nxt)
	{	t_id_lkup[z->t_id] = z;
#ifdef HAS_UNLESS
		int i, j;
#endif
		dfs_table(n, m, z->st, srcln, reach, lpstate);
#ifdef HAS_UNLESS
		for (i = 0; i < HAS_UNLESS; i++)
		{	j = trans[n][is]->escp[i];
			if (!j) break;
			dfs_table(n, m, j, srcln, reach, lpstate);
		}
#endif
	}
	reach[is] &= ~16; /* no longer on stack */
}
void
do_dfs(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
{	int i;
	dfs_table(n, m, is, srcln, reach, lpstate);
	for (i = 0; i < m; i++)
		reach[i] &= ~(4|8|16);
}
void
crack(int n, int j, Trans *z, short srcln[])
{	int i;

	if (!z) return;
	printf("	state %3d -(tr %3d)-> state %3d  ",
		j, z->forw, z->st);
	printf("[id %3d tp %3d", z->t_id, z->tpe[0]);
	if (z->tpe[1]) printf(",%d", z->tpe[1]);
#ifdef HAS_UNLESS
	if (z->e_trans)
		printf(" org %3d", z->e_trans);
	else if (state_tables >= 2)
	for (i = 0; i < HAS_UNLESS; i++)
	{	if (!z->escp[i]) break;
		printf(" esc %d", z->escp[i]);
	}
#endif
	printf("]");
	printf(" [%s%s%s%s%s] %s:%d => ",
		z->atom&6?"A":z->atom&32?"D":"-",
		accpstate[n][j]?"a" :"-",
		stopstate[n][j]?"e" : "-",
		progstate[n][j]?"p" : "-",
		z->atom & 8 ?"L":"G",
		PanSource, srcln[j]);
	for (i = 0; z->tp[i]; i++)
		if (z->tp[i] == '\n')
			printf("\\n");
		else
			putchar(z->tp[i]);
	if (verbose && z->qu[0])
	{	printf("\t[");
		for (i = 0; i < 6; i++)
			if (z->qu[i])
				printf("(%d,%d)",
				z->qu[i], z->ty[i]);
		printf("]");
	}
	printf("\n");
	fflush(stdout);
}
/* spin -a m.pml; cc -o pan pan.c; ./pan -D | dot -Tps > foo.ps; ps2pdf foo.ps */
void
dot_crack(int n, int j, Trans *z)
{	int i;

	if (!z) return;
	printf("	S%d -> S%d  [color=black", j, z->st);

	if (z->atom&6) printf(",style=dashed");
	else if (z->atom&32) printf(",style=dotted");
	else if (z->atom&8) printf(",style=solid");
	else printf(",style=bold");

	printf(",label=\"");
	for (i = 0; z->tp[i]; i++)
	{	if (z->tp[i] == '\\'
		&&  z->tp[i+1] == 'n')
		{	i++; printf(" ");
		} else
		{	putchar(z->tp[i]);
	}	}
	printf("\"];\n");
	if (accpstate[n][j]) printf("  S%d [color=red,style=bold];\n", j);
	else if (progstate[n][j]) printf("  S%d [color=green,style=bold];\n", j);
	if (stopstate[n][j]) printf("  S%d [color=blue,style=bold,shape=box];\n", j);
}

#ifdef VAR_RANGES
#define BYTESIZE	32	/* 2^8 : 2^3 = 256:8 = 32 */

typedef struct Vr_Ptr {
	char	*nm;
	uchar	vals[BYTESIZE];
	struct Vr_Ptr *nxt;
} Vr_Ptr;
Vr_Ptr *ranges = (Vr_Ptr *) 0;

void
logval(char *s, int v)
{	Vr_Ptr *tmp;

	if (v<0 || v > 255) return;
	for (tmp = ranges; tmp; tmp = tmp->nxt)
		if (!strcmp(tmp->nm, s))
			goto found;
	tmp = (Vr_Ptr *) emalloc(sizeof(Vr_Ptr));
	tmp->nxt = ranges;
	ranges = tmp;
	tmp->nm = s;
found:
	tmp->vals[(v)/8] |= 1<<((v)%8);
}

void
dumpval(uchar X[], int range)
{	int w, x, i, j = -1;

	for (w = i = 0; w < range; w++)
	for (x = 0; x < 8; x++, i++)
	{
from:		if ((X[w] & (1<<x)))
		{	printf("%d", i);
			j = i;
			goto upto;
	}	}
	return;
	for (w = 0; w < range; w++)
	for (x = 0; x < 8; x++, i++)
	{
upto:		if (!(X[w] & (1<<x)))
		{	if (i-1 == j)
				printf(", ");
			else
				printf("-%d, ", i-1);
			goto from;
	}	}
	if (j >= 0 && j != 255)
		printf("-255");
}

void
dumpranges(void)
{	Vr_Ptr *tmp;
	printf("\nValues assigned within ");
	printf("interval [0..255]:\n");
	for (tmp = ranges; tmp; tmp = tmp->nxt)
	{	printf("\t%s\t: ", tmp->nm);
		dumpval(tmp->vals, BYTESIZE);
		printf("\n");
	}
}
#endif
