#ifdef PEG
struct T_SRC {
	char *fl; int ln;
} T_SRC[NTRANS];

void
tr_2_src(int m, char *file, int ln)
{	T_SRC[m].fl = file;
	T_SRC[m].ln = ln;
}

void
putpeg(int n, int m)
{	printf("%5d	trans %4d ", m, n);
	printf("%s:%d\n",
		T_SRC[n].fl, T_SRC[n].ln);
}
#endif

void
settable(void)
{	Trans *T;
	Trans *settr(int, int, int, int, int, char *, int, int, int);

	trans = (Trans ***) emalloc(18*sizeof(Trans **));

	/* proctype 16: delayed_not_in_ready_queue */

	trans[16] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[16][7]	= settr(1399,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[16][6] = settr(1398,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1398,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1398,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 16][3] = settr(1395,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1395,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[16][1]	= settr(1393,0,6,3,3,"(!((!((tcb[2].state==2))||(readyQueue[tcb[2].prio].tasks[0]!=2))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached16[2] = 1;
	trans[16][2]	= settr(0,0,0,0,0,"assert(!(!((!((tcb[2].state==2))||(readyQueue[tcb[2].prio].tasks[0]!=2)))))",0,0,0);
	trans[16][4]	= settr(1396,0,6,1,0,"(1)", 0, 2, 0);
	trans[16][5]	= settr(1397,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[16][8]	= settr(1400,0,9,1,0,"break", 0, 2, 0);
	trans[16][9]	= settr(1401,0,10,1,0,"(1)", 0, 2, 0);
	trans[16][10]	= settr(1402,0,0,4,4,"-end-", 0, 3500, 0);

	/* proctype 15: tick_monotonic */

	trans[15] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[15][7]	= settr(1389,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[15][6] = settr(1388,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1388,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1388,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 15][3] = settr(1385,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1385,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[15][1]	= settr(1383,0,6,5,5,"(!((g_tickCount<255)))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached15[2] = 1;
	trans[15][2]	= settr(0,0,0,0,0,"assert(!(!((g_tickCount<255))))",0,0,0);
	trans[15][4]	= settr(1386,0,6,1,0,"(1)", 0, 2, 0);
	trans[15][5]	= settr(1387,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[15][8]	= settr(1390,0,9,1,0,"break", 0, 2, 0);
	trans[15][9]	= settr(1391,0,10,1,0,"(1)", 0, 2, 0);
	trans[15][10]	= settr(1392,0,0,6,6,"-end-", 0, 3500, 0);

	/* proctype 14: delayed_become_ready */

	trans[14] = (Trans **) emalloc(14*sizeof(Trans *));

	trans[14][6]	= settr(1375,0,5,1,0,".(goto)", 0, 2, 0);
	T = trans[14][5] = settr(1374,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1374,0,1,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1374,0,3,0,0,"DO", 0, 2, 0);
	trans[14][1]	= settr(1370,0,10,7,0,"((!(!((tcb[2].state==2)))&&!((tcb[2].state==1))))", 1, 2, 0);
	trans[14][2]	= settr(1371,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[14][3]	= settr(1372,0,5,1,0,"(1)", 0, 2, 0);
	trans[14][4]	= settr(1373,0,5,1,0,"goto T0_init", 0, 2, 0);
	trans[14][7]	= settr(1376,0,10,1,0,"break", 0, 2, 0);
	trans[14][11]	= settr(1380,0,10,1,0,".(goto)", 0, 2, 0);
	T = trans[14][10] = settr(1379,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1379,0,8,0,0,"DO", 0, 2, 0);
	trans[14][8]	= settr(1377,0,10,8,0,"(!((tcb[2].state==1)))", 1, 2, 0);
	trans[14][9]	= settr(1378,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[14][12]	= settr(1381,0,13,1,0,"break", 0, 2, 0);
	trans[14][13]	= settr(1382,0,0,9,9,"-end-", 0, 3500, 0);

	/* proctype 13: smoke_P1_user_no_pending */

	trans[13] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[13][7]	= settr(1366,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[13][6] = settr(1365,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1365,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1365,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 13][3] = settr(1362,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1362,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[13][1]	= settr(1360,0,6,10,10,"(!(!((((EP==2)&&(pending_exp==0))&&(chain_tick_used==1)))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached13[2] = 1;
	trans[13][2]	= settr(0,0,0,0,0,"assert(!(!(!((((EP==2)&&(pending_exp==0))&&(chain_tick_used==1))))))",0,0,0);
	trans[13][4]	= settr(1363,0,6,1,0,"(1)", 0, 2, 0);
	trans[13][5]	= settr(1364,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[13][8]	= settr(1367,0,9,1,0,"break", 0, 2, 0);
	trans[13][9]	= settr(1368,0,10,1,0,"(1)", 0, 2, 0);
	trans[13][10]	= settr(1369,0,0,11,11,"-end-", 0, 3500, 0);

	/* proctype 12: smoke_P2_user_no_pending */

	trans[12] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[12][7]	= settr(1356,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[12][6] = settr(1355,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1355,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1355,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 12][3] = settr(1352,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1352,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[12][1]	= settr(1350,0,6,12,12,"(!(!((((EP==(2+1))&&(pending_exp==0))&&(chain_tick_used==1)))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached12[2] = 1;
	trans[12][2]	= settr(0,0,0,0,0,"assert(!(!(!((((EP==(2+1))&&(pending_exp==0))&&(chain_tick_used==1))))))",0,0,0);
	trans[12][4]	= settr(1353,0,6,1,0,"(1)", 0, 2, 0);
	trans[12][5]	= settr(1354,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[12][8]	= settr(1357,0,9,1,0,"break", 0, 2, 0);
	trans[12][9]	= settr(1358,0,10,1,0,"(1)", 0, 2, 0);
	trans[12][10]	= settr(1359,0,0,13,13,"-end-", 0, 3500, 0);

	/* proctype 11: p2_double_context_switch */

	trans[11] = (Trans **) emalloc(123*sizeof(Trans *));

	trans[11][21]	= settr(1248,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[11][20] = settr(1247,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,4,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1247,0,16,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1247,0,18,0,0,"DO", 0, 2, 0);
	T = trans[ 11][3] = settr(1230,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1230,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[11][1]	= settr(1228,0,20,14,14,"((((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1)))&&(EP==3)))", 1, 2, 0); /* m: 2 -> 20,0 */
	reached11[2] = 1;
	trans[11][2]	= settr(0,0,0,0,0,"assert(!((((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1)))&&(EP==3))))",0,0,0);
	trans[11][4]	= settr(1231,0,28,15,0,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][5]	= settr(1232,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][6]	= settr(1233,0,38,16,0,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][7]	= settr(1234,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][8]	= settr(1235,0,50,17,0,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][9]	= settr(1236,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][10]	= settr(1237,0,64,18,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][11]	= settr(1238,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][12]	= settr(1239,0,80,19,0,"(((((EP==0)&&(EP_Stack==3))&&((EP==1)&&(EP_Stack==3)))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][13]	= settr(1240,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][14]	= settr(1241,0,98,20,0,"((((EP==1)&&(EP_Stack==3))&&((EP==3)&&(((pending_exp>>1)&1)==1))))", 1, 2, 0);
	trans[11][15]	= settr(1242,0,98,1,0,"goto T0_S115", 0, 2, 0);
	trans[11][16]	= settr(1243,0,118,21,0,"(((EP==3)&&(((pending_exp>>1)&1)==1)))", 1, 2, 0);
	trans[11][17]	= settr(1244,0,118,1,0,"goto T0_S114", 0, 2, 0);
	trans[11][18]	= settr(1245,0,20,1,0,"(1)", 0, 2, 0);
	trans[11][19]	= settr(1246,0,20,1,0,"goto T0_init", 0, 2, 0);
	trans[11][22]	= settr(1249,0,28,1,0,"break", 0, 2, 0);
	trans[11][29]	= settr(1256,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[11][28] = settr(1255,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1255,0,25,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1255,0,26,0,0,"DO", 0, 2, 0);
	T = trans[ 11][25] = settr(1252,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1252,2,23,0,0,"ATOMIC", 1, 2, 0);
	trans[11][23]	= settr(1250,0,28,22,22,"((EP==3))", 1, 2, 0); /* m: 24 -> 28,0 */
	reached11[24] = 1;
	trans[11][24]	= settr(0,0,0,0,0,"assert(!((EP==3)))",0,0,0);
	trans[11][26]	= settr(1253,0,28,23,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][27]	= settr(1254,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][30]	= settr(1257,0,38,1,0,"break", 0, 2, 0);
	trans[11][39]	= settr(1266,0,38,1,0,".(goto)", 0, 2, 0);
	T = trans[11][38] = settr(1265,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1265,0,33,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1265,0,34,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1265,0,36,0,0,"DO", 0, 2, 0);
	T = trans[ 11][33] = settr(1260,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1260,2,31,0,0,"ATOMIC", 1, 2, 0);
	trans[11][31]	= settr(1258,0,38,24,24,"((((EP==0)&&(EP_Stack==3))&&(EP==3)))", 1, 2, 0); /* m: 32 -> 38,0 */
	reached11[32] = 1;
	trans[11][32]	= settr(0,0,0,0,0,"assert(!((((EP==0)&&(EP_Stack==3))&&(EP==3))))",0,0,0);
	trans[11][34]	= settr(1261,0,28,25,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][35]	= settr(1262,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][36]	= settr(1263,0,38,26,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][37]	= settr(1264,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][40]	= settr(1267,0,50,1,0,"break", 0, 2, 0);
	trans[11][51]	= settr(1278,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[11][50] = settr(1277,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1277,0,43,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1277,0,44,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1277,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1277,0,48,0,0,"DO", 0, 2, 0);
	T = trans[ 11][43] = settr(1270,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1270,2,41,0,0,"ATOMIC", 1, 2, 0);
	trans[11][41]	= settr(1268,0,50,27,27,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&(EP==3)))", 1, 2, 0); /* m: 42 -> 50,0 */
	reached11[42] = 1;
	trans[11][42]	= settr(0,0,0,0,0,"assert(!(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&(EP==3))))",0,0,0);
	trans[11][44]	= settr(1271,0,28,28,0,"((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][45]	= settr(1272,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][46]	= settr(1273,0,38,29,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][47]	= settr(1274,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][48]	= settr(1275,0,50,30,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][49]	= settr(1276,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][52]	= settr(1279,0,64,1,0,"break", 0, 2, 0);
	trans[11][65]	= settr(1292,0,64,1,0,".(goto)", 0, 2, 0);
	T = trans[11][64] = settr(1291,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1291,0,55,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1291,0,56,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1291,0,58,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1291,0,60,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1291,0,62,0,0,"DO", 0, 2, 0);
	T = trans[ 11][55] = settr(1282,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1282,2,53,0,0,"ATOMIC", 1, 2, 0);
	trans[11][53]	= settr(1280,0,64,31,31,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3)))", 1, 2, 0); /* m: 54 -> 64,0 */
	reached11[54] = 1;
	trans[11][54]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3))))",0,0,0);
	trans[11][56]	= settr(1283,0,28,32,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][57]	= settr(1284,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][58]	= settr(1285,0,38,33,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][59]	= settr(1286,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][60]	= settr(1287,0,50,34,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][61]	= settr(1288,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][62]	= settr(1289,0,64,35,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][63]	= settr(1290,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][66]	= settr(1293,0,80,1,0,"break", 0, 2, 0);
	trans[11][81]	= settr(1308,0,80,1,0,".(goto)", 0, 2, 0);
	T = trans[11][80] = settr(1307,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1307,0,69,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1307,0,70,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1307,0,72,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1307,0,74,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1307,0,76,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1307,0,78,0,0,"DO", 0, 2, 0);
	T = trans[ 11][69] = settr(1296,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1296,2,67,0,0,"ATOMIC", 1, 2, 0);
	trans[11][67]	= settr(1294,0,80,36,36,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3)))", 1, 2, 0); /* m: 68 -> 80,0 */
	reached11[68] = 1;
	trans[11][68]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3))))",0,0,0);
	trans[11][70]	= settr(1297,0,28,37,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][71]	= settr(1298,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][72]	= settr(1299,0,38,38,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][73]	= settr(1300,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][74]	= settr(1301,0,50,39,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][75]	= settr(1302,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][76]	= settr(1303,0,64,40,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[11][77]	= settr(1304,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][78]	= settr(1305,0,80,41,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][79]	= settr(1306,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][82]	= settr(1309,0,98,1,0,"break", 0, 2, 0);
	trans[11][99]	= settr(1326,0,98,1,0,".(goto)", 0, 2, 0);
	T = trans[11][98] = settr(1325,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1325,0,85,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1325,0,86,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1325,0,88,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1325,0,90,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1325,0,92,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1325,0,94,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1325,0,96,0,0,"DO", 0, 2, 0);
	T = trans[ 11][85] = settr(1312,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1312,2,83,0,0,"ATOMIC", 1, 2, 0);
	trans[11][83]	= settr(1310,0,98,42,42,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3)))", 1, 2, 0); /* m: 84 -> 98,0 */
	reached11[84] = 1;
	trans[11][84]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&(EP==3))))",0,0,0);
	trans[11][86]	= settr(1313,0,28,43,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][87]	= settr(1314,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][88]	= settr(1315,0,38,44,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][89]	= settr(1316,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][90]	= settr(1317,0,50,45,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[11][91]	= settr(1318,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][92]	= settr(1319,0,64,46,0,"((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][93]	= settr(1320,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][94]	= settr(1321,0,80,47,0,"(((EP==0)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][95]	= settr(1322,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][96]	= settr(1323,0,98,48,0,"(((EP==1)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][97]	= settr(1324,0,98,1,0,"goto T0_S115", 0, 2, 0);
	trans[11][100]	= settr(1327,0,118,1,0,"break", 0, 2, 0);
	trans[11][119]	= settr(1346,0,118,1,0,".(goto)", 0, 2, 0);
	T = trans[11][118] = settr(1345,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,103,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,104,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,106,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,108,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,110,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,112,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1345,0,114,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1345,0,116,0,0,"DO", 0, 2, 0);
	T = trans[ 11][103] = settr(1330,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1330,2,101,0,0,"ATOMIC", 1, 2, 0);
	trans[11][101]	= settr(1328,0,118,49,49,"(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&(EP==3)))", 1, 2, 0); /* m: 102 -> 118,0 */
	reached11[102] = 1;
	trans[11][102]	= settr(0,0,0,0,0,"assert(!(((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3)))&&(EP==3))))",0,0,0);
	trans[11][104]	= settr(1331,0,28,50,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][105]	= settr(1332,0,28,1,0,"goto T0_S120", 0, 2, 0);
	trans[11][106]	= settr(1333,0,38,51,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][107]	= settr(1334,0,38,1,0,"goto T0_S119", 0, 2, 0);
	trans[11][108]	= settr(1335,0,50,52,0,"((((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][109]	= settr(1336,0,50,1,0,"goto T0_S118", 0, 2, 0);
	trans[11][110]	= settr(1337,0,64,53,0,"(((((EP==0)&&(EP_Stack==2))&&((EP==0)&&(EP_Stack==3)))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][111]	= settr(1338,0,64,1,0,"goto T0_S117", 0, 2, 0);
	trans[11][112]	= settr(1339,0,80,54,0,"((((EP==0)&&(EP_Stack==3))&&((EP==1)&&(EP_Stack==3))))", 1, 2, 0);
	trans[11][113]	= settr(1340,0,80,1,0,"goto T0_S116", 0, 2, 0);
	trans[11][114]	= settr(1341,0,98,55,0,"(((EP==1)&&(EP_Stack==3)))", 1, 2, 0);
	trans[11][115]	= settr(1342,0,98,1,0,"goto T0_S115", 0, 2, 0);
	trans[11][116]	= settr(1343,0,118,56,0,"(((EP==3)&&(((pending_exp>>1)&1)==1)))", 1, 2, 0);
	trans[11][117]	= settr(1344,0,118,1,0,"goto T0_S114", 0, 2, 0);
	trans[11][120]	= settr(1347,0,121,1,0,"break", 0, 2, 0);
	trans[11][121]	= settr(1348,0,122,1,0,"(1)", 0, 2, 0);
	trans[11][122]	= settr(1349,0,0,57,57,"-end-", 0, 3500, 0);

	/* proctype 10: P2_switching_not_P1_witness_unfolded */

	trans[10] = (Trans **) emalloc(101*sizeof(Trans *));

	trans[10][19]	= settr(1146,0,18,1,0,".(goto)", 0, 2, 0);
	T = trans[10][18] = settr(1145,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,4,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1145,0,14,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1145,0,16,0,0,"DO", 0, 2, 0);
	T = trans[ 10][3] = settr(1130,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1130,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[10][1]	= settr(1128,0,18,58,58,"(((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 2 -> 18,0 */
	reached10[2] = 1;
	trans[10][2]	= settr(0,0,0,0,0,"assert(!(((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][4]	= settr(1131,0,26,59,0,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][5]	= settr(1132,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][6]	= settr(1133,0,36,60,0,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][7]	= settr(1134,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][8]	= settr(1135,0,48,61,0,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1))))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][9]	= settr(1136,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][10]	= settr(1137,0,62,62,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==(2+1)))))", 1, 2, 0);
	trans[10][11]	= settr(1138,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][12]	= settr(1139,0,78,63,0,"((((EP==0)&&(EP_Stack==(2+1)))&&((EP==1)&&(EP_Stack==(2+1)))))", 1, 2, 0);
	trans[10][13]	= settr(1140,0,78,1,0,"goto T0_S80", 0, 2, 0);
	trans[10][14]	= settr(1141,0,96,64,0,"(((EP==1)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][15]	= settr(1142,0,96,1,0,"goto T0_S79", 0, 2, 0);
	trans[10][16]	= settr(1143,0,18,1,0,"(1)", 0, 2, 0);
	trans[10][17]	= settr(1144,0,18,1,0,"goto T0_init", 0, 2, 0);
	trans[10][20]	= settr(1147,0,26,1,0,"break", 0, 2, 0);
	trans[10][27]	= settr(1154,0,26,1,0,".(goto)", 0, 2, 0);
	T = trans[10][26] = settr(1153,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1153,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1153,0,24,0,0,"DO", 0, 2, 0);
	T = trans[ 10][23] = settr(1150,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1150,2,21,0,0,"ATOMIC", 1, 2, 0);
	trans[10][21]	= settr(1148,0,26,65,65,"((EP==(2+1)))", 1, 2, 0); /* m: 22 -> 26,0 */
	reached10[22] = 1;
	trans[10][22]	= settr(0,0,0,0,0,"assert(!((EP==(2+1))))",0,0,0);
	trans[10][24]	= settr(1151,0,26,66,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][25]	= settr(1152,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][28]	= settr(1155,0,36,1,0,"break", 0, 2, 0);
	trans[10][37]	= settr(1164,0,36,1,0,".(goto)", 0, 2, 0);
	T = trans[10][36] = settr(1163,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1163,0,31,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1163,0,32,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1163,0,34,0,0,"DO", 0, 2, 0);
	T = trans[ 10][31] = settr(1158,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1158,2,29,0,0,"ATOMIC", 1, 2, 0);
	trans[10][29]	= settr(1156,0,36,67,67,"((((EP==0)&&(EP_Stack==(2+1)))&&(EP==(2+1))))", 1, 2, 0); /* m: 30 -> 36,0 */
	reached10[30] = 1;
	trans[10][30]	= settr(0,0,0,0,0,"assert(!((((EP==0)&&(EP_Stack==(2+1)))&&(EP==(2+1)))))",0,0,0);
	trans[10][32]	= settr(1159,0,26,68,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][33]	= settr(1160,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][34]	= settr(1161,0,36,69,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][35]	= settr(1162,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][38]	= settr(1165,0,48,1,0,"break", 0, 2, 0);
	trans[10][49]	= settr(1176,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[10][48] = settr(1175,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1175,0,41,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1175,0,42,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1175,0,44,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1175,0,46,0,0,"DO", 0, 2, 0);
	T = trans[ 10][41] = settr(1168,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1168,2,39,0,0,"ATOMIC", 1, 2, 0);
	trans[10][39]	= settr(1166,0,48,70,70,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 40 -> 48,0 */
	reached10[40] = 1;
	trans[10][40]	= settr(0,0,0,0,0,"assert(!(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][42]	= settr(1169,0,26,71,0,"((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][43]	= settr(1170,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][44]	= settr(1171,0,36,72,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][45]	= settr(1172,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][46]	= settr(1173,0,48,73,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][47]	= settr(1174,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][50]	= settr(1177,0,62,1,0,"break", 0, 2, 0);
	trans[10][63]	= settr(1190,0,62,1,0,".(goto)", 0, 2, 0);
	T = trans[10][62] = settr(1189,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1189,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1189,0,54,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1189,0,56,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1189,0,58,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1189,0,60,0,0,"DO", 0, 2, 0);
	T = trans[ 10][53] = settr(1180,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1180,2,51,0,0,"ATOMIC", 1, 2, 0);
	trans[10][51]	= settr(1178,0,62,74,74,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 52 -> 62,0 */
	reached10[52] = 1;
	trans[10][52]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][54]	= settr(1181,0,26,75,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][55]	= settr(1182,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][56]	= settr(1183,0,36,76,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][57]	= settr(1184,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][58]	= settr(1185,0,48,77,0,"(((EP==1)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][59]	= settr(1186,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][60]	= settr(1187,0,62,78,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][61]	= settr(1188,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][64]	= settr(1191,0,78,1,0,"break", 0, 2, 0);
	trans[10][79]	= settr(1206,0,78,1,0,".(goto)", 0, 2, 0);
	T = trans[10][78] = settr(1205,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1205,0,67,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1205,0,68,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1205,0,70,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1205,0,72,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1205,0,74,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1205,0,76,0,0,"DO", 0, 2, 0);
	T = trans[ 10][67] = settr(1194,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1194,2,65,0,0,"ATOMIC", 1, 2, 0);
	trans[10][65]	= settr(1192,0,78,79,79,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 66 -> 78,0 */
	reached10[66] = 1;
	trans[10][66]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][68]	= settr(1195,0,26,80,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][69]	= settr(1196,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][70]	= settr(1197,0,36,81,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][71]	= settr(1198,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][72]	= settr(1199,0,48,82,0,"((((EP==0)&&(EP_Stack==2))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][73]	= settr(1200,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][74]	= settr(1201,0,62,83,0,"(((EP==0)&&(EP_Stack==2)))", 1, 2, 0);
	trans[10][75]	= settr(1202,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][76]	= settr(1203,0,78,84,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][77]	= settr(1204,0,78,1,0,"goto T0_S80", 0, 2, 0);
	trans[10][80]	= settr(1207,0,96,1,0,"break", 0, 2, 0);
	trans[10][97]	= settr(1224,0,96,1,0,".(goto)", 0, 2, 0);
	T = trans[10][96] = settr(1223,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1223,0,83,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1223,0,84,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1223,0,86,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1223,0,88,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1223,0,90,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1223,0,92,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1223,0,94,0,0,"DO", 0, 2, 0);
	T = trans[ 10][83] = settr(1210,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1210,2,81,0,0,"ATOMIC", 1, 2, 0);
	trans[10][81]	= settr(1208,0,96,85,85,"((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1))))", 1, 2, 0); /* m: 82 -> 96,0 */
	reached10[82] = 1;
	trans[10][82]	= settr(0,0,0,0,0,"assert(!((((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2)))&&(EP==(2+1)))))",0,0,0);
	trans[10][84]	= settr(1211,0,26,86,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][85]	= settr(1212,0,26,1,0,"goto T0_S84", 0, 2, 0);
	trans[10][86]	= settr(1213,0,36,87,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][87]	= settr(1214,0,36,1,0,"goto T0_S83", 0, 2, 0);
	trans[10][88]	= settr(1215,0,48,88,0,"(((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2)))&&((EP==1)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][89]	= settr(1216,0,48,1,0,"goto T0_S82", 0, 2, 0);
	trans[10][90]	= settr(1217,0,62,89,0,"((((EP==0)&&(EP_Stack==(2+1)))&&((EP==0)&&(EP_Stack==2))))", 1, 2, 0);
	trans[10][91]	= settr(1218,0,62,1,0,"goto T0_S81", 0, 2, 0);
	trans[10][92]	= settr(1219,0,78,90,0,"(((EP==0)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][93]	= settr(1220,0,78,1,0,"goto T0_S80", 0, 2, 0);
	trans[10][94]	= settr(1221,0,96,91,0,"(((EP==1)&&(EP_Stack==(2+1))))", 1, 2, 0);
	trans[10][95]	= settr(1222,0,96,1,0,"goto T0_S79", 0, 2, 0);
	trans[10][98]	= settr(1225,0,99,1,0,"break", 0, 2, 0);
	trans[10][99]	= settr(1226,0,100,1,0,"(1)", 0, 2, 0);
	trans[10][100]	= settr(1227,0,0,92,92,"-end-", 0, 3500, 0);

	/* proctype 9: all_starvation_free */

	trans[9] = (Trans **) emalloc(157*sizeof(Trans *));

	trans[9][20]	= settr(991,0,19,1,0,".(goto)", 0, 2, 0);
	T = trans[9][19] = settr(990,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,9,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,11,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,13,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(990,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(990,0,17,0,0,"DO", 0, 2, 0);
	trans[9][1]	= settr(972,0,28,93,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[9][2]	= settr(973,0,28,1,0,"goto accept_S9", 0, 2, 0);
	trans[9][3]	= settr(974,0,123,94,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[9][4]	= settr(975,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][5]	= settr(976,0,44,95,0,"(((!((pending_exp>0))&&!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==2))))", 1, 2, 0);
	trans[9][6]	= settr(977,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][7]	= settr(978,0,37,96,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[9][8]	= settr(979,0,37,1,0,"goto accept_S140", 0, 2, 0);
	trans[9][9]	= settr(980,0,132,97,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][10]	= settr(981,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][11]	= settr(982,0,51,98,0,"(((!((pending_exp>0))&&!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][12]	= settr(983,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][13]	= settr(984,0,19,99,0,"((EP>=2))", 1, 2, 0);
	trans[9][14]	= settr(985,0,19,1,0,"goto T0_init", 0, 2, 0);
	trans[9][15]	= settr(986,0,153,1,0,"(1)", 0, 2, 0);
	trans[9][16]	= settr(987,0,153,1,0,"goto T0_S384", 0, 2, 0);
	trans[9][17]	= settr(988,0,114,100,0,"(!((pending_exp>0)))", 1, 2, 0);
	trans[9][18]	= settr(989,0,114,1,0,"goto T0_S317", 0, 2, 0);
	trans[9][21]	= settr(992,0,28,1,0,"break", 0, 2, 0);
	trans[9][29]	= settr(1000,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[9][28] = settr(999,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(999,0,22,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(999,0,24,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(999,0,26,0,0,"DO", 0, 2, 0);
	trans[9][22]	= settr(993,0,74,101,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][23]	= settr(994,0,74,1,0,"goto T0_S9", 0, 2, 0);
	trans[9][24]	= settr(995,0,123,102,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][25]	= settr(996,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][26]	= settr(997,0,90,103,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[9][27]	= settr(998,0,90,1,0,"goto T0_S244", 0, 2, 0);
	trans[9][30]	= settr(1001,0,37,1,0,"break", 0, 2, 0);
	trans[9][38]	= settr(1009,0,37,1,0,".(goto)", 0, 2, 0);
	T = trans[9][37] = settr(1008,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1008,0,31,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1008,0,33,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1008,0,35,0,0,"DO", 0, 2, 0);
	trans[9][31]	= settr(1002,0,83,104,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][32]	= settr(1003,0,83,1,0,"goto T0_S140", 0, 2, 0);
	trans[9][33]	= settr(1004,0,132,105,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][34]	= settr(1005,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][35]	= settr(1006,0,97,106,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][36]	= settr(1007,0,97,1,0,"goto T0_S267", 0, 2, 0);
	trans[9][39]	= settr(1010,0,44,1,0,"break", 0, 2, 0);
	trans[9][45]	= settr(1016,0,44,1,0,".(goto)", 0, 2, 0);
	T = trans[9][44] = settr(1015,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1015,0,40,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1015,0,42,0,0,"DO", 0, 2, 0);
	trans[9][40]	= settr(1011,0,123,107,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][41]	= settr(1012,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][42]	= settr(1013,0,90,108,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[9][43]	= settr(1014,0,90,1,0,"goto T0_S244", 0, 2, 0);
	trans[9][46]	= settr(1017,0,51,1,0,"break", 0, 2, 0);
	trans[9][52]	= settr(1023,0,51,1,0,".(goto)", 0, 2, 0);
	T = trans[9][51] = settr(1022,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1022,0,47,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1022,0,49,0,0,"DO", 0, 2, 0);
	trans[9][47]	= settr(1018,0,132,109,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][48]	= settr(1019,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][49]	= settr(1020,0,97,110,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[9][50]	= settr(1021,0,97,1,0,"goto T0_S267", 0, 2, 0);
	trans[9][53]	= settr(1024,0,58,1,0,"break", 0, 2, 0);
	trans[9][59]	= settr(1030,0,58,1,0,".(goto)", 0, 2, 0);
	T = trans[9][58] = settr(1029,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1029,0,54,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1029,0,56,0,0,"DO", 0, 2, 0);
	trans[9][54]	= settr(1025,0,123,111,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][55]	= settr(1026,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][56]	= settr(1027,0,90,112,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][57]	= settr(1028,0,90,1,0,"goto T0_S244", 0, 2, 0);
	trans[9][60]	= settr(1031,0,65,1,0,"break", 0, 2, 0);
	trans[9][66]	= settr(1037,0,65,1,0,".(goto)", 0, 2, 0);
	T = trans[9][65] = settr(1036,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1036,0,61,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1036,0,63,0,0,"DO", 0, 2, 0);
	trans[9][61]	= settr(1032,0,132,113,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][62]	= settr(1033,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][63]	= settr(1034,0,97,114,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][64]	= settr(1035,0,97,1,0,"goto T0_S267", 0, 2, 0);
	trans[9][67]	= settr(1038,0,74,1,0,"break", 0, 2, 0);
	trans[9][75]	= settr(1046,0,74,1,0,".(goto)", 0, 2, 0);
	T = trans[9][74] = settr(1045,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1045,0,68,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1045,0,70,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1045,0,72,0,0,"DO", 0, 2, 0);
	trans[9][68]	= settr(1039,0,28,115,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][69]	= settr(1040,0,28,1,0,"goto accept_S9", 0, 2, 0);
	trans[9][70]	= settr(1041,0,123,116,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][71]	= settr(1042,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][72]	= settr(1043,0,44,117,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[9][73]	= settr(1044,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][76]	= settr(1047,0,83,1,0,"break", 0, 2, 0);
	trans[9][84]	= settr(1055,0,83,1,0,".(goto)", 0, 2, 0);
	T = trans[9][83] = settr(1054,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1054,0,77,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1054,0,79,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1054,0,81,0,0,"DO", 0, 2, 0);
	trans[9][77]	= settr(1048,0,37,118,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][78]	= settr(1049,0,37,1,0,"goto accept_S140", 0, 2, 0);
	trans[9][79]	= settr(1050,0,132,119,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][80]	= settr(1051,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][81]	= settr(1052,0,51,120,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][82]	= settr(1053,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][85]	= settr(1056,0,90,1,0,"break", 0, 2, 0);
	trans[9][91]	= settr(1062,0,90,1,0,".(goto)", 0, 2, 0);
	T = trans[9][90] = settr(1061,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1061,0,86,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1061,0,88,0,0,"DO", 0, 2, 0);
	trans[9][86]	= settr(1057,0,123,121,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][87]	= settr(1058,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][88]	= settr(1059,0,44,122,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[9][89]	= settr(1060,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][92]	= settr(1063,0,97,1,0,"break", 0, 2, 0);
	trans[9][98]	= settr(1069,0,97,1,0,".(goto)", 0, 2, 0);
	T = trans[9][97] = settr(1068,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1068,0,93,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1068,0,95,0,0,"DO", 0, 2, 0);
	trans[9][93]	= settr(1064,0,132,123,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][94]	= settr(1065,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][95]	= settr(1066,0,51,124,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[9][96]	= settr(1067,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][99]	= settr(1070,0,114,1,0,"break", 0, 2, 0);
	trans[9][115]	= settr(1086,0,114,1,0,".(goto)", 0, 2, 0);
	T = trans[9][114] = settr(1085,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1085,0,100,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1085,0,102,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1085,0,104,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1085,0,106,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1085,0,108,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1085,0,110,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1085,0,112,0,0,"DO", 0, 2, 0);
	trans[9][100]	= settr(1071,0,123,125,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[9][101]	= settr(1072,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][102]	= settr(1073,0,44,126,0,"(((!((pending_exp>0))&&(!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))||(!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&(!((EP==2))&&(EP>=2)))))", 1, 2, 0);
	trans[9][103]	= settr(1074,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][104]	= settr(1075,0,132,127,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][105]	= settr(1076,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][106]	= settr(1077,0,51,128,0,"(((!((pending_exp>0))&&(!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))||(!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&(!((EP==(2+1)))&&(EP>=2)))))", 1, 2, 0);
	trans[9][107]	= settr(1078,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][108]	= settr(1079,0,19,129,0,"((EP>=2))", 1, 2, 0);
	trans[9][109]	= settr(1080,0,19,1,0,"goto T0_init", 0, 2, 0);
	trans[9][110]	= settr(1081,0,153,1,0,"(1)", 0, 2, 0);
	trans[9][111]	= settr(1082,0,153,1,0,"goto T0_S384", 0, 2, 0);
	trans[9][112]	= settr(1083,0,114,130,0,"(!((pending_exp>0)))", 1, 2, 0);
	trans[9][113]	= settr(1084,0,114,1,0,"goto T0_S317", 0, 2, 0);
	trans[9][116]	= settr(1087,0,123,1,0,"break", 0, 2, 0);
	trans[9][124]	= settr(1095,0,123,1,0,".(goto)", 0, 2, 0);
	T = trans[9][123] = settr(1094,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1094,0,117,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1094,0,119,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1094,0,121,0,0,"DO", 0, 2, 0);
	trans[9][117]	= settr(1088,0,123,131,0,"(!((EP==2)))", 1, 2, 0);
	trans[9][118]	= settr(1089,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][119]	= settr(1090,0,44,132,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][120]	= settr(1091,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][121]	= settr(1092,0,58,133,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[9][122]	= settr(1093,0,58,1,0,"goto accept_S350", 0, 2, 0);
	trans[9][125]	= settr(1096,0,132,1,0,"break", 0, 2, 0);
	trans[9][133]	= settr(1104,0,132,1,0,".(goto)", 0, 2, 0);
	T = trans[9][132] = settr(1103,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1103,0,126,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1103,0,128,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1103,0,130,0,0,"DO", 0, 2, 0);
	trans[9][126]	= settr(1097,0,132,134,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[9][127]	= settr(1098,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][128]	= settr(1099,0,51,135,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][129]	= settr(1100,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][130]	= settr(1101,0,65,136,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[9][131]	= settr(1102,0,65,1,0,"goto accept_S371", 0, 2, 0);
	trans[9][134]	= settr(1105,0,153,1,0,"break", 0, 2, 0);
	trans[9][154]	= settr(1125,0,153,1,0,".(goto)", 0, 2, 0);
	T = trans[9][153] = settr(1124,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,135,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,137,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,139,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,141,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,143,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,145,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,147,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1124,0,149,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1124,0,151,0,0,"DO", 0, 2, 0);
	trans[9][135]	= settr(1106,0,123,137,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[9][136]	= settr(1107,0,123,1,0,"goto T0_S350", 0, 2, 0);
	trans[9][137]	= settr(1108,0,132,138,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[9][138]	= settr(1109,0,132,1,0,"goto T0_S371", 0, 2, 0);
	trans[9][139]	= settr(1110,0,19,139,0,"((EP>=2))", 1, 2, 0);
	trans[9][140]	= settr(1111,0,19,1,0,"goto T0_init", 0, 2, 0);
	trans[9][141]	= settr(1112,0,153,1,0,"(1)", 0, 2, 0);
	trans[9][142]	= settr(1113,0,153,1,0,"goto T0_S384", 0, 2, 0);
	trans[9][143]	= settr(1114,0,44,140,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[9][144]	= settr(1115,0,44,1,0,"goto accept_S244", 0, 2, 0);
	trans[9][145]	= settr(1116,0,58,141,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[9][146]	= settr(1117,0,58,1,0,"goto accept_S350", 0, 2, 0);
	trans[9][147]	= settr(1118,0,51,142,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[9][148]	= settr(1119,0,51,1,0,"goto accept_S267", 0, 2, 0);
	trans[9][149]	= settr(1120,0,65,143,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[9][150]	= settr(1121,0,65,1,0,"goto accept_S371", 0, 2, 0);
	trans[9][151]	= settr(1122,0,114,144,0,"((!((pending_exp>0))&&(EP>=2)))", 1, 2, 0);
	trans[9][152]	= settr(1123,0,114,1,0,"goto T0_S317", 0, 2, 0);
	trans[9][155]	= settr(1126,0,156,1,0,"break", 0, 2, 0);
	trans[9][156]	= settr(1127,0,0,145,145,"-end-", 0, 3500, 0);

	/* proctype 8: starvation_free_task2 */

	trans[8] = (Trans **) emalloc(76*sizeof(Trans *));

	trans[8][12]	= settr(908,0,11,1,0,".(goto)", 0, 2, 0);
	T = trans[8][11] = settr(907,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(907,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(907,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(907,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(907,0,7,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(907,0,9,0,0,"DO", 0, 2, 0);
	trans[8][1]	= settr(897,0,20,146,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[8][2]	= settr(898,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[8][3]	= settr(899,0,59,147,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][4]	= settr(900,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][5]	= settr(901,0,27,148,0,"(((!((pending_exp>0))&&!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][6]	= settr(902,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][7]	= settr(903,0,11,149,0,"((!((pending_exp>0))||(EP>=2)))", 1, 2, 0);
	trans[8][8]	= settr(904,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[8][9]	= settr(905,0,72,1,0,"(1)", 0, 2, 0);
	trans[8][10]	= settr(906,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[8][13]	= settr(909,0,20,1,0,"break", 0, 2, 0);
	trans[8][21]	= settr(917,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[8][20] = settr(916,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(916,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(916,0,16,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(916,0,18,0,0,"DO", 0, 2, 0);
	trans[8][14]	= settr(910,0,43,150,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][15]	= settr(911,0,43,1,0,"goto T0_S8", 0, 2, 0);
	trans[8][16]	= settr(912,0,59,151,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][17]	= settr(913,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][18]	= settr(914,0,50,152,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][19]	= settr(915,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[8][22]	= settr(918,0,27,1,0,"break", 0, 2, 0);
	trans[8][28]	= settr(924,0,27,1,0,".(goto)", 0, 2, 0);
	T = trans[8][27] = settr(923,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(923,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(923,0,25,0,0,"DO", 0, 2, 0);
	trans[8][23]	= settr(919,0,59,153,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][24]	= settr(920,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][25]	= settr(921,0,50,154,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[8][26]	= settr(922,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[8][29]	= settr(925,0,34,1,0,"break", 0, 2, 0);
	trans[8][35]	= settr(931,0,34,1,0,".(goto)", 0, 2, 0);
	T = trans[8][34] = settr(930,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(930,0,30,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(930,0,32,0,0,"DO", 0, 2, 0);
	trans[8][30]	= settr(926,0,59,155,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][31]	= settr(927,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][32]	= settr(928,0,50,156,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][33]	= settr(929,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[8][36]	= settr(932,0,43,1,0,"break", 0, 2, 0);
	trans[8][44]	= settr(940,0,43,1,0,".(goto)", 0, 2, 0);
	T = trans[8][43] = settr(939,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(939,0,37,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(939,0,39,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(939,0,41,0,0,"DO", 0, 2, 0);
	trans[8][37]	= settr(933,0,20,157,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][38]	= settr(934,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[8][39]	= settr(935,0,59,158,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][40]	= settr(936,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][41]	= settr(937,0,27,159,0,"((!((pending_exp>0))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][42]	= settr(938,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][45]	= settr(941,0,50,1,0,"break", 0, 2, 0);
	trans[8][51]	= settr(947,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[8][50] = settr(946,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(946,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(946,0,48,0,0,"DO", 0, 2, 0);
	trans[8][46]	= settr(942,0,59,160,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][47]	= settr(943,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][48]	= settr(944,0,27,161,0,"(((!((pending_exp>0))&&!((EP==(2+1))))||(!((EP==(2+1)))&&(EP>=2))))", 1, 2, 0);
	trans[8][49]	= settr(945,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][52]	= settr(948,0,59,1,0,"break", 0, 2, 0);
	trans[8][60]	= settr(956,0,59,1,0,".(goto)", 0, 2, 0);
	T = trans[8][59] = settr(955,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(955,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(955,0,55,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(955,0,57,0,0,"DO", 0, 2, 0);
	trans[8][53]	= settr(949,0,59,162,0,"(!((EP==(2+1))))", 1, 2, 0);
	trans[8][54]	= settr(950,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][55]	= settr(951,0,27,163,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][56]	= settr(952,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][57]	= settr(953,0,34,164,0,"((!((EP==(2+1)))&&(EP>=2)))", 1, 2, 0);
	trans[8][58]	= settr(954,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[8][61]	= settr(957,0,72,1,0,"break", 0, 2, 0);
	trans[8][73]	= settr(969,0,72,1,0,".(goto)", 0, 2, 0);
	T = trans[8][72] = settr(968,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(968,0,62,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(968,0,64,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(968,0,66,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(968,0,68,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(968,0,70,0,0,"DO", 0, 2, 0);
	trans[8][62]	= settr(958,0,59,165,0,"((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1)))))", 1, 2, 0);
	trans[8][63]	= settr(959,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[8][64]	= settr(960,0,11,166,0,"((EP>=2))", 1, 2, 0);
	trans[8][65]	= settr(961,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[8][66]	= settr(962,0,72,1,0,"(1)", 0, 2, 0);
	trans[8][67]	= settr(963,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[8][68]	= settr(964,0,27,167,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[8][69]	= settr(965,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[8][70]	= settr(966,0,34,168,0,"(((!(!(((tcb[(2+1)].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==(2+1))))&&(EP>=2)))", 1, 2, 0);
	trans[8][71]	= settr(967,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[8][74]	= settr(970,0,75,1,0,"break", 0, 2, 0);
	trans[8][75]	= settr(971,0,0,169,169,"-end-", 0, 3500, 0);

	/* proctype 7: starvation_free_task1 */

	trans[7] = (Trans **) emalloc(76*sizeof(Trans *));

	trans[7][12]	= settr(833,0,11,1,0,".(goto)", 0, 2, 0);
	T = trans[7][11] = settr(832,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(832,0,7,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(832,0,9,0,0,"DO", 0, 2, 0);
	trans[7][1]	= settr(822,0,20,170,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[7][2]	= settr(823,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[7][3]	= settr(824,0,59,171,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[7][4]	= settr(825,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][5]	= settr(826,0,27,172,0,"(((!((pending_exp>0))&&!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1)))))&&!((EP==2))))", 1, 2, 0);
	trans[7][6]	= settr(827,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][7]	= settr(828,0,11,173,0,"((!((pending_exp>0))||(EP>=2)))", 1, 2, 0);
	trans[7][8]	= settr(829,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[7][9]	= settr(830,0,72,1,0,"(1)", 0, 2, 0);
	trans[7][10]	= settr(831,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[7][13]	= settr(834,0,20,1,0,"break", 0, 2, 0);
	trans[7][21]	= settr(842,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[7][20] = settr(841,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(841,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(841,0,16,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(841,0,18,0,0,"DO", 0, 2, 0);
	trans[7][14]	= settr(835,0,43,174,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][15]	= settr(836,0,43,1,0,"goto T0_S8", 0, 2, 0);
	trans[7][16]	= settr(837,0,59,175,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][17]	= settr(838,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][18]	= settr(839,0,50,176,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[7][19]	= settr(840,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[7][22]	= settr(843,0,27,1,0,"break", 0, 2, 0);
	trans[7][28]	= settr(849,0,27,1,0,".(goto)", 0, 2, 0);
	T = trans[7][27] = settr(848,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(848,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(848,0,25,0,0,"DO", 0, 2, 0);
	trans[7][23]	= settr(844,0,59,177,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][24]	= settr(845,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][25]	= settr(846,0,50,178,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[7][26]	= settr(847,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[7][29]	= settr(850,0,34,1,0,"break", 0, 2, 0);
	trans[7][35]	= settr(856,0,34,1,0,".(goto)", 0, 2, 0);
	T = trans[7][34] = settr(855,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(855,0,30,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(855,0,32,0,0,"DO", 0, 2, 0);
	trans[7][30]	= settr(851,0,59,179,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][31]	= settr(852,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][32]	= settr(853,0,50,180,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][33]	= settr(854,0,50,1,0,"goto T0_S111", 0, 2, 0);
	trans[7][36]	= settr(857,0,43,1,0,"break", 0, 2, 0);
	trans[7][44]	= settr(865,0,43,1,0,".(goto)", 0, 2, 0);
	T = trans[7][43] = settr(864,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(864,0,37,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(864,0,39,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(864,0,41,0,0,"DO", 0, 2, 0);
	trans[7][37]	= settr(858,0,20,181,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][38]	= settr(859,0,20,1,0,"goto accept_S8", 0, 2, 0);
	trans[7][39]	= settr(860,0,59,182,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][40]	= settr(861,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][41]	= settr(862,0,27,183,0,"((!((pending_exp>0))&&!((EP==2))))", 1, 2, 0);
	trans[7][42]	= settr(863,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][45]	= settr(866,0,50,1,0,"break", 0, 2, 0);
	trans[7][51]	= settr(872,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[7][50] = settr(871,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(871,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(871,0,48,0,0,"DO", 0, 2, 0);
	trans[7][46]	= settr(867,0,59,184,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][47]	= settr(868,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][48]	= settr(869,0,27,185,0,"(((!((pending_exp>0))&&!((EP==2)))||(!((EP==2))&&(EP>=2))))", 1, 2, 0);
	trans[7][49]	= settr(870,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][52]	= settr(873,0,59,1,0,"break", 0, 2, 0);
	trans[7][60]	= settr(881,0,59,1,0,".(goto)", 0, 2, 0);
	T = trans[7][59] = settr(880,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(880,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(880,0,55,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(880,0,57,0,0,"DO", 0, 2, 0);
	trans[7][53]	= settr(874,0,59,186,0,"(!((EP==2)))", 1, 2, 0);
	trans[7][54]	= settr(875,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][55]	= settr(876,0,27,187,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][56]	= settr(877,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][57]	= settr(878,0,34,188,0,"((!((EP==2))&&(EP>=2)))", 1, 2, 0);
	trans[7][58]	= settr(879,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[7][61]	= settr(882,0,72,1,0,"break", 0, 2, 0);
	trans[7][73]	= settr(894,0,72,1,0,".(goto)", 0, 2, 0);
	T = trans[7][72] = settr(893,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(893,0,62,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(893,0,64,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(893,0,66,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(893,0,68,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(893,0,70,0,0,"DO", 0, 2, 0);
	trans[7][62]	= settr(883,0,59,189,0,"((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2))))", 1, 2, 0);
	trans[7][63]	= settr(884,0,59,1,0,"goto T0_S134", 0, 2, 0);
	trans[7][64]	= settr(885,0,11,190,0,"((EP>=2))", 1, 2, 0);
	trans[7][65]	= settr(886,0,11,1,0,"goto T0_init", 0, 2, 0);
	trans[7][66]	= settr(887,0,72,1,0,"(1)", 0, 2, 0);
	trans[7][67]	= settr(888,0,72,1,0,"goto T0_S201", 0, 2, 0);
	trans[7][68]	= settr(889,0,27,191,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[7][69]	= settr(890,0,27,1,0,"goto accept_S111", 0, 2, 0);
	trans[7][70]	= settr(891,0,34,192,0,"(((!(!(((tcb[2].state==1)&&(((pending_exp>>1)&1)==1))))&&!((EP==2)))&&(EP>=2)))", 1, 2, 0);
	trans[7][71]	= settr(892,0,34,1,0,"goto accept_S134", 0, 2, 0);
	trans[7][74]	= settr(895,0,75,1,0,"break", 0, 2, 0);
	trans[7][75]	= settr(896,0,0,193,193,"-end-", 0, 3500, 0);

	/* proctype 6: exc_leads_to_user */

	trans[6] = (Trans **) emalloc(14*sizeof(Trans *));

	trans[6][6]	= settr(814,0,5,1,0,".(goto)", 0, 2, 0);
	T = trans[6][5] = settr(813,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(813,0,1,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(813,0,3,0,0,"DO", 0, 2, 0);
	trans[6][1]	= settr(809,0,10,194,0,"((!(!((EP<2)))&&!((EP>=2))))", 1, 2, 0);
	trans[6][2]	= settr(810,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[6][3]	= settr(811,0,5,1,0,"(1)", 0, 2, 0);
	trans[6][4]	= settr(812,0,5,1,0,"goto T0_init", 0, 2, 0);
	trans[6][7]	= settr(815,0,10,1,0,"break", 0, 2, 0);
	trans[6][11]	= settr(819,0,10,1,0,".(goto)", 0, 2, 0);
	T = trans[6][10] = settr(818,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(818,0,8,0,0,"DO", 0, 2, 0);
	trans[6][8]	= settr(816,0,10,195,0,"(!((EP>=2)))", 1, 2, 0);
	trans[6][9]	= settr(817,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[6][12]	= settr(820,0,13,1,0,"break", 0, 2, 0);
	trans[6][13]	= settr(821,0,0,196,196,"-end-", 0, 3500, 0);

	/* proctype 5: back_to_user */

	trans[5] = (Trans **) emalloc(14*sizeof(Trans *));

	trans[5][6]	= settr(801,0,5,1,0,".(goto)", 0, 2, 0);
	T = trans[5][5] = settr(800,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(800,0,1,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(800,0,3,0,0,"DO", 0, 2, 0);
	trans[5][1]	= settr(796,0,10,197,0,"(!((EP>=2)))", 1, 2, 0);
	trans[5][2]	= settr(797,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[5][3]	= settr(798,0,5,1,0,"(1)", 0, 2, 0);
	trans[5][4]	= settr(799,0,5,1,0,"goto T0_init", 0, 2, 0);
	trans[5][7]	= settr(802,0,10,1,0,"break", 0, 2, 0);
	trans[5][11]	= settr(806,0,10,1,0,".(goto)", 0, 2, 0);
	T = trans[5][10] = settr(805,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(805,0,8,0,0,"DO", 0, 2, 0);
	trans[5][8]	= settr(803,0,10,198,0,"(!((EP>=2)))", 1, 2, 0);
	trans[5][9]	= settr(804,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[5][12]	= settr(807,0,13,1,0,"break", 0, 2, 0);
	trans[5][13]	= settr(808,0,0,199,199,"-end-", 0, 3500, 0);

	/* proctype 4: :init: */

	trans[4] = (Trans **) emalloc(66*sizeof(Trans *));

	trans[4][1]	= settr(731,0,17,200,200,"i = 0", 0, 2, 0);
	trans[4][18]	= settr(748,0,17,1,0,".(goto)", 0, 2, 0);
	T = trans[4][17] = settr(747,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(747,0,2,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(747,0,15,0,0,"DO", 0, 2, 0);
	trans[4][2]	= settr(732,0,13,201,0,"((i<4))", 0, 2, 0);
	T = trans[ 4][13] = settr(743,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(743,0,3,0,0,"sub-sequence", 0, 2, 0);
	trans[4][3]	= settr(733,0,9,202,202,"idx = 0", 0, 2, 0);
	trans[4][10]	= settr(740,0,9,1,0,".(goto)", 0, 2, 0);
	T = trans[4][9] = settr(739,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(739,0,4,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(739,0,7,0,0,"DO", 0, 2, 0);
	trans[4][4]	= settr(734,0,5,203,0,"((idx<5))", 0, 2, 0);
	trans[4][5]	= settr(735,0,6,204,204,"readyQueue[i].tasks[idx] = 255", 1, 2, 0);
	trans[4][6]	= settr(736,0,9,205,205,"idx = (idx+1)", 0, 2, 0);
	trans[4][7]	= settr(737,0,12,2,0,"else", 0, 2, 0);
	trans[4][8]	= settr(738,0,12,1,0,"goto :b16", 0, 2, 0);
	trans[4][11]	= settr(741,0,12,1,0,"break", 0, 2, 0);
	trans[4][12]	= settr(742,0,14,206,206,"readyQueue[i].tailIndex = 0", 1, 2, 0);
	trans[4][14]	= settr(744,0,17,207,207,"i = (i+1)", 0, 2, 0);
	trans[4][15]	= settr(745,0,20,2,0,"else", 0, 2, 0);
	trans[4][16]	= settr(746,0,20,1,0,"goto :b15", 0, 2, 0);
	trans[4][19]	= settr(749,0,20,1,0,"break", 0, 2, 0);
	trans[4][20]	= settr(750,0,21,208,208,"tcb[2].prio = 2", 1, 2, 0);
	trans[4][21]	= settr(751,0,29,209,209,"tcb[2].state = 1", 1, 2, 0);
	T = trans[ 4][29] = settr(759,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(759,0,27,0,0,"sub-sequence", 0, 2, 0);
	T = trans[4][27] = settr(757,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(757,0,22,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(757,0,25,0,0,"IF", 0, 2, 0);
	trans[4][22]	= settr(752,0,23,210,0,"((readyQueue[2].tailIndex<5))", 1, 2, 0);
	trans[4][23]	= settr(753,0,24,211,211,"readyQueue[2].tasks[readyQueue[2].tailIndex] = 2", 1, 2, 0);
	trans[4][24]	= settr(754,0,30,212,212,"readyQueue[2].tailIndex = (readyQueue[2].tailIndex+1)", 1, 2, 0);
	trans[4][28]	= settr(758,0,30,1,0,".(goto)", 0, 2, 0);
	trans[4][25]	= settr(755,0,26,2,0,"else", 0, 2, 0);
	trans[4][26]	= settr(756,0,30,213,0,"assert(0)", 0, 2, 0);
	trans[4][30]	= settr(760,0,31,214,214,"tcb[(2+1)].prio = 2", 1, 2, 0);
	trans[4][31]	= settr(761,0,39,215,215,"tcb[(2+1)].state = 1", 1, 2, 0);
	T = trans[ 4][39] = settr(769,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(769,0,37,0,0,"sub-sequence", 0, 2, 0);
	T = trans[4][37] = settr(767,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(767,0,32,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(767,0,35,0,0,"IF", 0, 2, 0);
	trans[4][32]	= settr(762,0,33,216,0,"((readyQueue[2].tailIndex<5))", 1, 2, 0);
	trans[4][33]	= settr(763,0,34,217,217,"readyQueue[2].tasks[readyQueue[2].tailIndex] = (2+1)", 1, 2, 0);
	trans[4][34]	= settr(764,0,40,218,218,"readyQueue[2].tailIndex = (readyQueue[2].tailIndex+1)", 1, 2, 0);
	trans[4][38]	= settr(768,0,40,1,0,".(goto)", 0, 2, 0);
	trans[4][35]	= settr(765,0,36,2,0,"else", 0, 2, 0);
	trans[4][36]	= settr(766,0,40,219,0,"assert(0)", 0, 2, 0);
	trans[4][40]	= settr(770,0,41,220,220,"EP = 2", 1, 2, 0);
	trans[4][41]	= settr(771,0,58,221,221,"topPrio = 2", 1, 2, 0);
	T = trans[ 4][58] = settr(788,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(788,0,42,0,0,"sub-sequence", 0, 2, 0);
	trans[4][42]	= settr(772,0,48,222,222,"idx = 0", 0, 2, 0);
	trans[4][49]	= settr(779,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[4][48] = settr(778,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(778,0,43,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(778,0,46,0,0,"DO", 0, 2, 0);
	trans[4][43]	= settr(773,0,44,223,0,"((idx<(readyQueue[topPrio].tailIndex-1)))", 1, 2, 0);
	trans[4][44]	= settr(774,0,45,224,224,"readyQueue[topPrio].tasks[idx] = readyQueue[topPrio].tasks[(idx+1)]", 1, 2, 0);
	trans[4][45]	= settr(775,0,48,225,225,"idx = (idx+1)", 0, 2, 0);
	trans[4][46]	= settr(776,0,56,2,0,"else", 0, 2, 0);
	trans[4][47]	= settr(777,0,56,1,0,"goto :b17", 0, 2, 0);
	trans[4][50]	= settr(780,0,56,1,0,"break", 0, 2, 0);
	T = trans[4][56] = settr(786,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(786,0,51,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(786,0,54,0,0,"IF", 0, 2, 0);
	trans[4][51]	= settr(781,0,52,226,0,"((readyQueue[topPrio].tailIndex>0))", 1, 2, 0);
	trans[4][52]	= settr(782,0,53,227,227,"readyQueue[topPrio].tasks[(readyQueue[topPrio].tailIndex-1)] = 255", 1, 2, 0);
	trans[4][53]	= settr(783,0,59,228,228,"readyQueue[topPrio].tailIndex = (readyQueue[topPrio].tailIndex-1)", 1, 2, 0);
	trans[4][57]	= settr(787,0,59,1,0,".(goto)", 0, 2, 0);
	trans[4][54]	= settr(784,0,55,2,0,"else", 0, 2, 0);
	trans[4][55]	= settr(785,0,59,1,0,"(1)", 0, 2, 0);
	trans[4][59]	= settr(789,0,62,229,229,"tcb[EP].state = 4", 1, 2, 0);
	T = trans[ 4][62] = settr(792,2,0,0,0,"ATOMIC", 0, 2, 0);
	T->nxt	= settr(792,2,60,0,0,"ATOMIC", 0, 2, 0);
	trans[4][60]	= settr(790,2,61,230,230,"(run PendSV_Handler())", 0, 2, 0);
	trans[4][61]	= settr(791,0,63,231,231,"(run SysTick_Handler())", 0, 2, 0);
	trans[4][63]	= settr(793,0,64,232,232,"(run Process2())", 1, 2, 0);
	trans[4][64]	= settr(794,0,65,233,233,"(run Process1())", 1, 2, 0);
	trans[4][65]	= settr(795,0,0,234,234,"-end-", 0, 3500, 0);

	/* proctype 3: Process2 */

	trans[3] = (Trans **) emalloc(312*sizeof(Trans *));

	trans[3][309]	= settr(728,0,308,1,0,".(goto)", 0, 2, 0);
	T = trans[3][308] = settr(727,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(727,0,25,0,0,"DO", 0, 2, 0);
	T = trans[ 3][25] = settr(444,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(444,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[3][1]	= settr(420,2,8,235,235,"(((2+1)==EP))", 1, 2, 0); /* m: 2 -> 8,0 */
	reached3[2] = 1;
	trans[3][2]	= settr(0,0,0,0,0,"printf('P2 running\\n')",0,0,0);
	T = trans[3][8] = settr(427,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(427,2,3,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(427,2,7,0,0,"IF", 1, 2, 0);
	trans[3][3]	= settr(422,2,6,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][6] = settr(425,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(425,0,4,0,0,"sub-sequence", 1, 2, 0);
	trans[3][4]	= settr(423,2,23,236,236,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 5 -> 0,23 */
	reached3[5] = 1;
	trans[3][5]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][9]	= settr(428,2,23,1,0,".(goto)", 1, 2, 0);
	trans[3][7]	= settr(426,2,23,1,0,"(1)", 1, 2, 0);
	T = trans[3][23] = settr(442,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(442,2,10,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(442,2,21,0,0,"IF", 1, 2, 0);
	trans[3][10]	= settr(429,2,15,237,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][15] = settr(434,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(434,2,11,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(434,2,13,0,0,"IF", 1, 2, 0);
	trans[3][11]	= settr(430,2,19,238,238,"((EP>=2))", 1, 2, 0); /* m: 12 -> 19,0 */
	reached3[12] = 1;
	trans[3][12]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][16]	= settr(435,2,19,1,0,".(goto)", 1, 2, 0);
	trans[3][13]	= settr(432,2,14,2,0,"else", 1, 2, 0);
	trans[3][14]	= settr(433,2,19,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][19] = settr(438,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(438,0,17,0,0,"sub-sequence", 1, 2, 0);
	trans[3][17]	= settr(436,4,115,239,239,"assert((EP_Stack==255))", 1, 2, 0); /* m: 18 -> 0,115 */
	reached3[18] = 1;
	trans[3][18]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][20]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][24]	= settr(443,0,115,240,240,".(goto)", 1, 2, 0);
	trans[3][21]	= settr(440,2,22,2,0,"else", 1, 2, 0);
	trans[3][22]	= settr(441,4,115,241,241,"(1)", 1, 2, 0); /* m: 24 -> 115,0 */
	reached3[24] = 1;
	T = trans[ 3][115] = settr(534,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(534,2,26,0,0,"ATOMIC", 1, 2, 0);
	trans[3][26]	= settr(445,2,92,242,0,"(((2+1)==EP))", 1, 2, 0);
	T = trans[ 3][92] = settr(511,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(511,0,27,0,0,"sub-sequence", 1, 2, 0);
	trans[3][27]	= settr(446,2,29,243,243,"intSave = 0", 1, 2, 0);
	T = trans[ 3][29] = settr(448,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(448,0,28,0,0,"sub-sequence", 1, 2, 0);
	trans[3][28]	= settr(447,2,79,244,244,"intSave = 0", 1, 2, 0); /* m: 30 -> 0,79 */
	reached3[30] = 1;
	trans[3][30]	= settr(0,0,0,0,0,"assert(((tcb[2].state==1)||(tcb[2].state==2)))",0,0,0);
	trans[3][31]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	T = trans[3][79] = settr(498,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(498,2,32,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(498,2,76,0,0,"IF", 1, 2, 0);
	trans[3][32]	= settr(451,2,75,245,0,"((tcb[2].state==1))", 1, 2, 0);
	T = trans[ 3][75] = settr(494,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(494,0,33,0,0,"sub-sequence", 1, 2, 0);
	trans[3][33]	= settr(452,2,66,246,246,"assert((tcb[2].state==1))", 1, 2, 0); /* m: 34 -> 0,66 */
	reached3[34] = 1;
	trans[3][34]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	T = trans[ 3][66] = settr(485,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(485,0,35,0,0,"sub-sequence", 1, 2, 0);
	trans[3][35]	= settr(454,2,47,247,247,"idx = 0", 1, 2, 0); /* m: 36 -> 0,47 */
	reached3[36] = 1;
	trans[3][36]	= settr(0,0,0,0,0,"found = 0",0,0,0);
	trans[3][37]	= settr(0,0,0,0,0,"prioLevel = tcb[2].prio",0,0,0);
	trans[3][48]	= settr(467,2,47,1,0,".(goto)", 1, 2, 0);
	T = trans[3][47] = settr(466,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(466,2,38,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(466,2,45,0,0,"DO", 1, 2, 0);
	trans[3][38]	= settr(457,2,43,248,0,"(((idx<readyQueue[prioLevel].tailIndex)&&!(found)))", 1, 2, 0);
	T = trans[3][43] = settr(462,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(462,2,39,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(462,2,41,0,0,"IF", 1, 2, 0);
	trans[3][39]	= settr(458,2,47,249,249,"((readyQueue[prioLevel].tasks[idx]==2))", 1, 2, 0); /* m: 40 -> 47,0 */
	reached3[40] = 1;
	trans[3][40]	= settr(0,0,0,0,0,"found = 1",0,0,0);
	trans[3][44]	= settr(463,2,47,1,0,".(goto)", 1, 2, 0);
	trans[3][41]	= settr(460,2,42,2,0,"else", 1, 2, 0);
	trans[3][42]	= settr(461,2,47,250,250,"idx = (idx+1)", 1, 2, 0);
	trans[3][45]	= settr(464,2,50,2,0,"else", 1, 2, 0);
	trans[3][46]	= settr(465,2,50,1,0,"goto :b10", 1, 2, 0); /* m: 50 -> 0,56 */
	reached3[50] = 1;
	trans[3][49]	= settr(468,2,50,1,0,"break", 1, 2, 0);
	trans[3][50]	= settr(469,2,56,251,251,"assert((found==1))", 1, 2, 0);
	trans[3][57]	= settr(476,2,56,1,0,".(goto)", 1, 2, 0);
	T = trans[3][56] = settr(475,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(475,2,51,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(475,2,54,0,0,"DO", 1, 2, 0);
	trans[3][51]	= settr(470,2,56,252,252,"((idx<(readyQueue[prioLevel].tailIndex-1)))", 1, 2, 0); /* m: 52 -> 56,0 */
	reached3[52] = 1;
	trans[3][52]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tasks[idx] = readyQueue[prioLevel].tasks[(idx+1)]",0,0,0);
	trans[3][53]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[3][54]	= settr(473,2,64,2,0,"else", 1, 2, 0);
	trans[3][55]	= settr(474,2,64,1,0,"goto :b11", 1, 2, 0);
	trans[3][58]	= settr(477,2,64,1,0,"break", 1, 2, 0);
	T = trans[3][64] = settr(483,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(483,2,59,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(483,2,62,0,0,"IF", 1, 2, 0);
	trans[3][59]	= settr(478,2,74,253,253,"((readyQueue[prioLevel].tailIndex>0))", 1, 2, 0); /* m: 60 -> 74,0 */
	reached3[60] = 1;
	trans[3][60]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tasks[(readyQueue[prioLevel].tailIndex-1)] = 255",0,0,0);
	trans[3][61]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tailIndex = (readyQueue[prioLevel].tailIndex-1)",0,0,0);
	trans[3][65]	= settr(484,2,67,1,0,".(goto)", 1, 2, 0); /* m: 67 -> 0,74 */
	reached3[67] = 1;
	trans[3][62]	= settr(481,2,63,2,0,"else", 1, 2, 0);
	trans[3][63]	= settr(482,2,74,254,254,"(1)", 1, 2, 0); /* m: 67 -> 74,0 */
	reached3[67] = 1;
	trans[3][67]	= settr(486,2,74,255,255,"tcb[2].state = 3", 1, 2, 0);
	T = trans[ 3][74] = settr(493,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(493,0,68,0,0,"sub-sequence", 1, 2, 0);
	trans[3][68]	= settr(487,2,90,256,256,"assert((g_taskSortLinkTail<(2+1)))", 1, 2, 0); /* m: 69 -> 0,90 */
	reached3[69] = 1;
	trans[3][69]	= settr(0,0,0,0,0,"assert((g_taskSortLinkTail>=0))",0,0,0);
	trans[3][70]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].taskId = 2",0,0,0);
	trans[3][71]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].responseTime = 255",0,0,0);
	trans[3][72]	= settr(0,0,0,0,0,"tcb[2].pendList = g_taskSortLinkTail",0,0,0);
	trans[3][73]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail+1)",0,0,0);
	trans[3][80]	= settr(499,2,90,1,0,".(goto)", 1, 2, 0);
	trans[3][76]	= settr(495,2,90,257,257,"((tcb[2].state==2))", 1, 2, 0); /* m: 77 -> 90,0 */
	reached3[77] = 1;
	trans[3][77]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	trans[3][78]	= settr(0,0,0,0,0,"tcb[2].state = 3",0,0,0);
	T = trans[3][90] = settr(509,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(509,2,81,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(509,2,88,0,0,"IF", 1, 2, 0);
	trans[3][81]	= settr(500,2,83,258,258,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 3][83] = settr(502,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(502,0,82,0,0,"sub-sequence", 1, 2, 0);
	trans[3][82]	= settr(501,2,87,259,259,"intSave = 0", 1, 2, 0);
	T = trans[ 3][87] = settr(506,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(506,0,86,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][86] = settr(505,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(505,0,84,0,0,"sub-sequence", 1, 2, 0);
	trans[3][84]	= settr(503,2,98,260,260,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 85 -> 0,98 */
	reached3[85] = 1;
	trans[3][85]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[3][91]	= settr(510,2,98,1,0,".(goto)", 1, 2, 0);
	trans[3][88]	= settr(507,2,89,2,0,"else", 1, 2, 0);
	trans[3][89]	= settr(508,2,98,1,0,"(1)", 1, 2, 0);
	T = trans[3][98] = settr(517,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(517,2,93,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(517,2,97,0,0,"IF", 1, 2, 0);
	trans[3][93]	= settr(512,2,96,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][96] = settr(515,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(515,0,94,0,0,"sub-sequence", 1, 2, 0);
	trans[3][94]	= settr(513,2,113,261,261,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 95 -> 0,113 */
	reached3[95] = 1;
	trans[3][95]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][99]	= settr(518,2,113,1,0,".(goto)", 1, 2, 0);
	trans[3][97]	= settr(516,2,113,1,0,"(1)", 1, 2, 0);
	T = trans[3][113] = settr(532,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(532,2,100,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(532,2,111,0,0,"IF", 1, 2, 0);
	trans[3][100]	= settr(519,2,105,262,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][105] = settr(524,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(524,2,101,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(524,2,103,0,0,"IF", 1, 2, 0);
	trans[3][101]	= settr(520,2,109,263,263,"((EP>=2))", 1, 2, 0); /* m: 102 -> 109,0 */
	reached3[102] = 1;
	trans[3][102]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][106]	= settr(525,2,109,1,0,".(goto)", 1, 2, 0);
	trans[3][103]	= settr(522,2,104,2,0,"else", 1, 2, 0);
	trans[3][104]	= settr(523,2,109,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][109] = settr(528,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(528,0,107,0,0,"sub-sequence", 1, 2, 0);
	trans[3][107]	= settr(526,4,184,264,264,"assert((EP_Stack==255))", 1, 2, 0); /* m: 108 -> 0,184 */
	reached3[108] = 1;
	trans[3][108]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][110]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][114]	= settr(533,0,184,265,265,".(goto)", 1, 2, 0);
	trans[3][111]	= settr(530,2,112,2,0,"else", 1, 2, 0);
	trans[3][112]	= settr(531,4,184,266,266,"(1)", 1, 2, 0); /* m: 114 -> 184,0 */
	reached3[114] = 1;
	T = trans[ 3][184] = settr(603,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(603,2,116,0,0,"ATOMIC", 1, 2, 0);
	trans[3][116]	= settr(535,2,161,267,0,"(((2+1)==EP))", 1, 2, 0);
	T = trans[ 3][161] = settr(580,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(580,0,117,0,0,"sub-sequence", 1, 2, 0);
	trans[3][117]	= settr(536,2,121,268,268,"intSave = 0", 1, 2, 0); /* m: 118 -> 0,121 */
	reached3[118] = 1;
	trans[3][118]	= settr(0,0,0,0,0,"tempStatus = 0",0,0,0);
	trans[3][119]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	T = trans[ 3][121] = settr(540,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(540,0,120,0,0,"sub-sequence", 1, 2, 0);
	trans[3][120]	= settr(539,2,149,269,269,"intSave = 0", 1, 2, 0); /* m: 122 -> 0,149 */
	reached3[122] = 1;
	trans[3][122]	= settr(0,0,0,0,0,"tempStatus = tcb[2].state",0,0,0);
	trans[3][123]	= settr(0,0,0,0,0,"assert((tempStatus==3))",0,0,0);
	T = trans[ 3][149] = settr(568,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(568,0,124,0,0,"sub-sequence", 1, 2, 0);
	trans[3][124]	= settr(543,2,140,270,270,"assert((tcb[2].state==3))", 1, 2, 0); /* m: 125 -> 0,140 */
	reached3[125] = 1;
	trans[3][125]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	trans[3][126]	= settr(0,0,0,0,0,"tcb[2].state = 1",0,0,0);
	T = trans[ 3][140] = settr(559,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(559,0,127,0,0,"sub-sequence", 1, 2, 0);
	trans[3][127]	= settr(546,2,134,271,271,"idx = tcb[2].pendList", 1, 2, 0);
	trans[3][135]	= settr(554,2,134,1,0,".(goto)", 1, 2, 0);
	T = trans[3][134] = settr(553,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(553,2,128,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(553,2,132,0,0,"DO", 1, 2, 0);
	trans[3][128]	= settr(547,2,134,272,272,"((idx<(g_taskSortLinkTail-1)))", 1, 2, 0); /* m: 129 -> 134,0 */
	reached3[129] = 1;
	trans[3][129]	= settr(0,0,0,0,0,"g_taskSortLink[idx].taskId = g_taskSortLink[(idx+1)].taskId",0,0,0);
	trans[3][130]	= settr(0,0,0,0,0,"g_taskSortLink[idx].responseTime = g_taskSortLink[(idx+1)].responseTime",0,0,0);
	trans[3][131]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[3][132]	= settr(551,2,137,2,0,"else", 1, 2, 0);
	trans[3][133]	= settr(552,2,137,1,0,"goto :b12", 1, 2, 0); /* m: 137 -> 0,148 */
	reached3[137] = 1;
	trans[3][136]	= settr(555,2,137,1,0,"break", 1, 2, 0);
	trans[3][137]	= settr(556,2,148,273,273,"g_taskSortLink[(g_taskSortLinkTail-1)].taskId = 255", 1, 2, 0); /* m: 138 -> 0,148 */
	reached3[138] = 1;
	trans[3][138]	= settr(0,0,0,0,0,"g_taskSortLink[(g_taskSortLinkTail-1)].responseTime = 255",0,0,0);
	trans[3][139]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail-1)",0,0,0);
	T = trans[ 3][148] = settr(567,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(567,0,146,0,0,"sub-sequence", 1, 2, 0);
	T = trans[3][146] = settr(565,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(565,2,141,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(565,2,144,0,0,"IF", 1, 2, 0);
	trans[3][141]	= settr(560,2,159,274,274,"((readyQueue[tcb[2].prio].tailIndex<5))", 1, 2, 0); /* m: 142 -> 159,0 */
	reached3[142] = 1;
	trans[3][142]	= settr(0,0,0,0,0,"readyQueue[tcb[2].prio].tasks[readyQueue[tcb[2].prio].tailIndex] = 2",0,0,0);
	trans[3][143]	= settr(0,0,0,0,0,"readyQueue[tcb[2].prio].tailIndex = (readyQueue[tcb[2].prio].tailIndex+1)",0,0,0);
	trans[3][147]	= settr(566,2,159,1,0,".(goto)", 1, 2, 0);
	trans[3][144]	= settr(563,2,145,2,0,"else", 1, 2, 0);
	trans[3][145]	= settr(564,2,159,275,0,"assert(0)", 1, 2, 0);
	T = trans[3][159] = settr(578,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(578,2,150,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(578,2,157,0,0,"IF", 1, 2, 0);
	trans[3][150]	= settr(569,2,152,276,276,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 3][152] = settr(571,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(571,0,151,0,0,"sub-sequence", 1, 2, 0);
	trans[3][151]	= settr(570,2,156,277,277,"intSave = 0", 1, 2, 0);
	T = trans[ 3][156] = settr(575,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(575,0,155,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][155] = settr(574,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(574,0,153,0,0,"sub-sequence", 1, 2, 0);
	trans[3][153]	= settr(572,2,167,278,278,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 154 -> 0,167 */
	reached3[154] = 1;
	trans[3][154]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[3][160]	= settr(579,2,167,1,0,".(goto)", 1, 2, 0);
	trans[3][157]	= settr(576,2,158,2,0,"else", 1, 2, 0);
	trans[3][158]	= settr(577,2,167,1,0,"(1)", 1, 2, 0);
	T = trans[3][167] = settr(586,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(586,2,162,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(586,2,166,0,0,"IF", 1, 2, 0);
	trans[3][162]	= settr(581,2,165,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][165] = settr(584,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(584,0,163,0,0,"sub-sequence", 1, 2, 0);
	trans[3][163]	= settr(582,2,182,279,279,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 164 -> 0,182 */
	reached3[164] = 1;
	trans[3][164]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][168]	= settr(587,2,182,1,0,".(goto)", 1, 2, 0);
	trans[3][166]	= settr(585,2,182,1,0,"(1)", 1, 2, 0);
	T = trans[3][182] = settr(601,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(601,2,169,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(601,2,180,0,0,"IF", 1, 2, 0);
	trans[3][169]	= settr(588,2,174,280,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][174] = settr(593,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(593,2,170,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(593,2,172,0,0,"IF", 1, 2, 0);
	trans[3][170]	= settr(589,2,178,281,281,"((EP>=2))", 1, 2, 0); /* m: 171 -> 178,0 */
	reached3[171] = 1;
	trans[3][171]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][175]	= settr(594,2,178,1,0,".(goto)", 1, 2, 0);
	trans[3][172]	= settr(591,2,173,2,0,"else", 1, 2, 0);
	trans[3][173]	= settr(592,2,178,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][178] = settr(597,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(597,0,176,0,0,"sub-sequence", 1, 2, 0);
	trans[3][176]	= settr(595,4,209,282,282,"assert((EP_Stack==255))", 1, 2, 0); /* m: 177 -> 0,209 */
	reached3[177] = 1;
	trans[3][177]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][179]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][183]	= settr(602,0,209,283,283,".(goto)", 1, 2, 0);
	trans[3][180]	= settr(599,2,181,2,0,"else", 1, 2, 0);
	trans[3][181]	= settr(600,4,209,284,284,"(1)", 1, 2, 0); /* m: 183 -> 209,0 */
	reached3[183] = 1;
	T = trans[ 3][209] = settr(628,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(628,2,185,0,0,"ATOMIC", 1, 2, 0);
	trans[3][185]	= settr(604,2,192,285,285,"(((2+1)==EP))", 1, 2, 0); /* m: 186 -> 192,0 */
	reached3[186] = 1;
	trans[3][186]	= settr(0,0,0,0,0,"assert((EP==(2+1)))",0,0,0);
	T = trans[3][192] = settr(611,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(611,2,187,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(611,2,191,0,0,"IF", 1, 2, 0);
	trans[3][187]	= settr(606,2,190,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][190] = settr(609,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(609,0,188,0,0,"sub-sequence", 1, 2, 0);
	trans[3][188]	= settr(607,2,207,286,286,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 189 -> 0,207 */
	reached3[189] = 1;
	trans[3][189]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][193]	= settr(612,2,207,1,0,".(goto)", 1, 2, 0);
	trans[3][191]	= settr(610,2,207,1,0,"(1)", 1, 2, 0);
	T = trans[3][207] = settr(626,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(626,2,194,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(626,2,205,0,0,"IF", 1, 2, 0);
	trans[3][194]	= settr(613,2,199,287,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][199] = settr(618,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(618,2,195,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(618,2,197,0,0,"IF", 1, 2, 0);
	trans[3][195]	= settr(614,2,203,288,288,"((EP>=2))", 1, 2, 0); /* m: 196 -> 203,0 */
	reached3[196] = 1;
	trans[3][196]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][200]	= settr(619,2,203,1,0,".(goto)", 1, 2, 0);
	trans[3][197]	= settr(616,2,198,2,0,"else", 1, 2, 0);
	trans[3][198]	= settr(617,2,203,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][203] = settr(622,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(622,0,201,0,0,"sub-sequence", 1, 2, 0);
	trans[3][201]	= settr(620,4,307,289,289,"assert((EP_Stack==255))", 1, 2, 0); /* m: 202 -> 0,307 */
	reached3[202] = 1;
	trans[3][202]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][204]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][208]	= settr(627,0,307,290,290,".(goto)", 1, 2, 0);
	trans[3][205]	= settr(624,2,206,2,0,"else", 1, 2, 0);
	trans[3][206]	= settr(625,4,307,291,291,"(1)", 1, 2, 0); /* m: 208 -> 307,0 */
	reached3[208] = 1;
	T = trans[ 3][307] = settr(726,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(726,2,210,0,0,"ATOMIC", 1, 2, 0);
	trans[3][210]	= settr(629,2,284,292,0,"(((2+1)==EP))", 1, 2, 0);
	T = trans[ 3][284] = settr(703,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(703,0,211,0,0,"sub-sequence", 1, 2, 0);
	trans[3][211]	= settr(630,2,215,293,293,"intSave = 0", 1, 2, 0); /* m: 212 -> 0,215 */
	reached3[212] = 1;
	trans[3][212]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	trans[3][213]	= settr(0,0,0,0,0,"currentTask = EP",0,0,0);
	T = trans[ 3][215] = settr(634,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(634,0,214,0,0,"sub-sequence", 1, 2, 0);
	trans[3][214]	= settr(633,2,282,294,294,"intSave = 0", 1, 2, 0);
	T = trans[3][282] = settr(701,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(701,2,216,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(701,2,222,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(701,2,280,0,0,"IF", 1, 2, 0);
	trans[3][216]	= settr(635,2,221,295,0,"((0==0))", 1, 2, 0);
	T = trans[ 3][221] = settr(640,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(640,0,220,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][220] = settr(639,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(639,0,219,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][219] = settr(638,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(638,0,217,0,0,"sub-sequence", 1, 2, 0);
	trans[3][217]	= settr(636,2,290,296,296,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 218 -> 0,290 */
	reached3[218] = 1;
	trans[3][218]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[3][283]	= settr(702,2,290,1,0,".(goto)", 1, 2, 0);
	trans[3][222]	= settr(641,2,268,297,0,"((0>0))", 1, 2, 0);
	T = trans[ 3][268] = settr(687,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(687,0,223,0,0,"sub-sequence", 1, 2, 0);
	trans[3][223]	= settr(642,2,260,298,298,"assert(((tcb[currentTask].state==1)||(tcb[currentTask].state==4)))", 1, 2, 0); /* m: 224 -> 0,260 */
	reached3[224] = 1;
	trans[3][224]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	T = trans[3][260] = settr(679,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(679,2,225,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(679,2,258,0,0,"IF", 1, 2, 0);
	trans[3][225]	= settr(644,2,257,299,0,"((tcb[currentTask].state==1))", 1, 2, 0);
	T = trans[ 3][257] = settr(676,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(676,0,226,0,0,"sub-sequence", 1, 2, 0);
	trans[3][226]	= settr(645,2,238,300,300,"idx = 0", 1, 2, 0); /* m: 227 -> 0,238 */
	reached3[227] = 1;
	trans[3][227]	= settr(0,0,0,0,0,"found = 0",0,0,0);
	trans[3][228]	= settr(0,0,0,0,0,"prioLevel = tcb[currentTask].prio",0,0,0);
	trans[3][239]	= settr(658,2,238,1,0,".(goto)", 1, 2, 0);
	T = trans[3][238] = settr(657,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(657,2,229,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(657,2,236,0,0,"DO", 1, 2, 0);
	trans[3][229]	= settr(648,2,234,301,0,"(((idx<readyQueue[prioLevel].tailIndex)&&!(found)))", 1, 2, 0);
	T = trans[3][234] = settr(653,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(653,2,230,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(653,2,232,0,0,"IF", 1, 2, 0);
	trans[3][230]	= settr(649,2,238,302,302,"((readyQueue[prioLevel].tasks[idx]==currentTask))", 1, 2, 0); /* m: 231 -> 238,0 */
	reached3[231] = 1;
	trans[3][231]	= settr(0,0,0,0,0,"found = 1",0,0,0);
	trans[3][235]	= settr(654,2,238,1,0,".(goto)", 1, 2, 0);
	trans[3][232]	= settr(651,2,233,2,0,"else", 1, 2, 0);
	trans[3][233]	= settr(652,2,238,303,303,"idx = (idx+1)", 1, 2, 0);
	trans[3][236]	= settr(655,2,241,2,0,"else", 1, 2, 0);
	trans[3][237]	= settr(656,2,241,1,0,"goto :b13", 1, 2, 0); /* m: 241 -> 0,247 */
	reached3[241] = 1;
	trans[3][240]	= settr(659,2,241,1,0,"break", 1, 2, 0);
	trans[3][241]	= settr(660,2,247,304,304,"assert((found==1))", 1, 2, 0);
	trans[3][248]	= settr(667,2,247,1,0,".(goto)", 1, 2, 0);
	T = trans[3][247] = settr(666,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(666,2,242,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(666,2,245,0,0,"DO", 1, 2, 0);
	trans[3][242]	= settr(661,2,247,305,305,"((idx<(readyQueue[prioLevel].tailIndex-1)))", 1, 2, 0); /* m: 243 -> 247,0 */
	reached3[243] = 1;
	trans[3][243]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tasks[idx] = readyQueue[prioLevel].tasks[(idx+1)]",0,0,0);
	trans[3][244]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[3][245]	= settr(664,2,255,2,0,"else", 1, 2, 0);
	trans[3][246]	= settr(665,2,255,1,0,"goto :b14", 1, 2, 0);
	trans[3][249]	= settr(668,2,255,1,0,"break", 1, 2, 0);
	T = trans[3][255] = settr(674,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(674,2,250,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(674,2,253,0,0,"IF", 1, 2, 0);
	trans[3][250]	= settr(669,2,278,306,306,"((readyQueue[prioLevel].tailIndex>0))", 1, 2, 0); /* m: 251 -> 278,0 */
	reached3[251] = 1;
	trans[3][251]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tasks[(readyQueue[prioLevel].tailIndex-1)] = 255",0,0,0);
	trans[3][252]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tailIndex = (readyQueue[prioLevel].tailIndex-1)",0,0,0);
	trans[3][256]	= settr(675,2,262,1,0,".(goto)", 1, 2, 0); /* m: 262 -> 0,278 */
	reached3[262] = 1;
	trans[3][253]	= settr(672,2,254,2,0,"else", 1, 2, 0);
	trans[3][254]	= settr(673,2,278,307,307,"(1)", 1, 2, 0); /* m: 262 -> 278,0 */
	reached3[262] = 1;
	trans[3][261]	= settr(680,2,262,1,0,".(goto)", 1, 2, 0); /* m: 262 -> 0,278 */
	reached3[262] = 1;
	trans[3][258]	= settr(677,2,259,2,0,"else", 1, 2, 0);
	trans[3][259]	= settr(678,2,278,308,308,"(1)", 1, 2, 0); /* m: 262 -> 278,0 */
	reached3[262] = 1;
	trans[3][262]	= settr(681,2,278,309,309,"tcb[currentTask].state = 2", 1, 2, 0); /* m: 263 -> 0,278 */
	reached3[263] = 1;
	trans[3][263]	= settr(0,0,0,0,0,"assert((g_taskSortLinkTail<(2+1)))",0,0,0);
	trans[3][264]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].taskId = currentTask",0,0,0);
	trans[3][265]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].responseTime = 0",0,0,0);
	trans[3][266]	= settr(0,0,0,0,0,"tcb[currentTask].pendList = g_taskSortLinkTail",0,0,0);
	trans[3][267]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail+1)",0,0,0);
	T = trans[3][278] = settr(697,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(697,2,269,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(697,2,276,0,0,"IF", 1, 2, 0);
	trans[3][269]	= settr(688,2,271,310,310,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 3][271] = settr(690,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(690,0,270,0,0,"sub-sequence", 1, 2, 0);
	trans[3][270]	= settr(689,2,275,311,311,"intSave = 0", 1, 2, 0);
	T = trans[ 3][275] = settr(694,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(694,0,274,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 3][274] = settr(693,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(693,0,272,0,0,"sub-sequence", 1, 2, 0);
	trans[3][272]	= settr(691,2,290,312,312,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 273 -> 0,290 */
	reached3[273] = 1;
	trans[3][273]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[3][279]	= settr(698,2,290,1,0,".(goto)", 1, 2, 0);
	trans[3][276]	= settr(695,2,277,2,0,"else", 1, 2, 0);
	trans[3][277]	= settr(696,2,290,1,0,"(1)", 1, 2, 0);
	trans[3][280]	= settr(699,2,281,2,0,"else", 1, 2, 0);
	trans[3][281]	= settr(700,2,290,1,0,"(1)", 1, 2, 0);
	T = trans[3][290] = settr(709,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(709,2,285,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(709,2,289,0,0,"IF", 1, 2, 0);
	trans[3][285]	= settr(704,2,288,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][288] = settr(707,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(707,0,286,0,0,"sub-sequence", 1, 2, 0);
	trans[3][286]	= settr(705,2,305,313,313,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 287 -> 0,305 */
	reached3[287] = 1;
	trans[3][287]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[3][291]	= settr(710,2,305,1,0,".(goto)", 1, 2, 0);
	trans[3][289]	= settr(708,2,305,1,0,"(1)", 1, 2, 0);
	T = trans[3][305] = settr(724,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(724,2,292,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(724,2,303,0,0,"IF", 1, 2, 0);
	trans[3][292]	= settr(711,2,297,314,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[3][297] = settr(716,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(716,2,293,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(716,2,295,0,0,"IF", 1, 2, 0);
	trans[3][293]	= settr(712,2,301,315,315,"((EP>=2))", 1, 2, 0); /* m: 294 -> 301,0 */
	reached3[294] = 1;
	trans[3][294]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[3][298]	= settr(717,2,301,1,0,".(goto)", 1, 2, 0);
	trans[3][295]	= settr(714,2,296,2,0,"else", 1, 2, 0);
	trans[3][296]	= settr(715,2,301,1,0,"(1)", 1, 2, 0);
	T = trans[ 3][301] = settr(720,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(720,0,299,0,0,"sub-sequence", 1, 2, 0);
	trans[3][299]	= settr(718,0,308,316,316,"assert((EP_Stack==255))", 1, 2, 0); /* m: 300 -> 0,308 */
	reached3[300] = 1;
	trans[3][300]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[3][302]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[3][306]	= settr(725,0,308,317,317,".(goto)", 1, 2, 0);
	trans[3][303]	= settr(722,2,304,2,0,"else", 1, 2, 0);
	trans[3][304]	= settr(723,0,308,318,318,"(1)", 1, 2, 0); /* m: 306 -> 308,0 */
	reached3[306] = 1;
	trans[3][310]	= settr(729,0,311,1,0,"break", 0, 2, 0);
	trans[3][311]	= settr(730,0,0,319,319,"-end-", 0, 3500, 0);

	/* proctype 2: Process1 */

	trans[2] = (Trans **) emalloc(153*sizeof(Trans *));

	trans[2][150]	= settr(417,0,149,1,0,".(goto)", 0, 2, 0);
	T = trans[2][149] = settr(416,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(416,0,25,0,0,"DO", 0, 2, 0);
	T = trans[ 2][25] = settr(292,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(292,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[2][1]	= settr(268,2,8,320,320,"((2==EP))", 1, 2, 0); /* m: 2 -> 8,0 */
	reached2[2] = 1;
	trans[2][2]	= settr(0,0,0,0,0,"printf('Process1 running\\\\n')",0,0,0);
	T = trans[2][8] = settr(275,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(275,2,3,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(275,2,7,0,0,"IF", 1, 2, 0);
	trans[2][3]	= settr(270,2,6,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][6] = settr(273,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(273,0,4,0,0,"sub-sequence", 1, 2, 0);
	trans[2][4]	= settr(271,2,23,321,321,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 5 -> 0,23 */
	reached2[5] = 1;
	trans[2][5]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[2][9]	= settr(276,2,23,1,0,".(goto)", 1, 2, 0);
	trans[2][7]	= settr(274,2,23,1,0,"(1)", 1, 2, 0);
	T = trans[2][23] = settr(290,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(290,2,10,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(290,2,21,0,0,"IF", 1, 2, 0);
	trans[2][10]	= settr(277,2,15,322,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[2][15] = settr(282,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(282,2,11,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(282,2,13,0,0,"IF", 1, 2, 0);
	trans[2][11]	= settr(278,2,19,323,323,"((EP>=2))", 1, 2, 0); /* m: 12 -> 19,0 */
	reached2[12] = 1;
	trans[2][12]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[2][16]	= settr(283,2,19,1,0,".(goto)", 1, 2, 0);
	trans[2][13]	= settr(280,2,14,2,0,"else", 1, 2, 0);
	trans[2][14]	= settr(281,2,19,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][19] = settr(286,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(286,0,17,0,0,"sub-sequence", 1, 2, 0);
	trans[2][17]	= settr(284,4,50,324,324,"assert((EP_Stack==255))", 1, 2, 0); /* m: 18 -> 0,50 */
	reached2[18] = 1;
	trans[2][18]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[2][20]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[2][24]	= settr(291,0,50,325,325,".(goto)", 1, 2, 0);
	trans[2][21]	= settr(288,2,22,2,0,"else", 1, 2, 0);
	trans[2][22]	= settr(289,4,50,326,326,"(1)", 1, 2, 0); /* m: 24 -> 50,0 */
	reached2[24] = 1;
	T = trans[ 2][50] = settr(317,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(317,2,26,0,0,"ATOMIC", 1, 2, 0);
	trans[2][26]	= settr(293,2,33,327,327,"((2==EP))", 1, 2, 0); /* m: 27 -> 33,0 */
	reached2[27] = 1;
	trans[2][27]	= settr(0,0,0,0,0,"assert((EP==2))",0,0,0);
	T = trans[2][33] = settr(300,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(300,2,28,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(300,2,32,0,0,"IF", 1, 2, 0);
	trans[2][28]	= settr(295,2,31,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][31] = settr(298,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(298,0,29,0,0,"sub-sequence", 1, 2, 0);
	trans[2][29]	= settr(296,2,48,328,328,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 30 -> 0,48 */
	reached2[30] = 1;
	trans[2][30]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[2][34]	= settr(301,2,48,1,0,".(goto)", 1, 2, 0);
	trans[2][32]	= settr(299,2,48,1,0,"(1)", 1, 2, 0);
	T = trans[2][48] = settr(315,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(315,2,35,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(315,2,46,0,0,"IF", 1, 2, 0);
	trans[2][35]	= settr(302,2,40,329,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[2][40] = settr(307,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(307,2,36,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(307,2,38,0,0,"IF", 1, 2, 0);
	trans[2][36]	= settr(303,2,44,330,330,"((EP>=2))", 1, 2, 0); /* m: 37 -> 44,0 */
	reached2[37] = 1;
	trans[2][37]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[2][41]	= settr(308,2,44,1,0,".(goto)", 1, 2, 0);
	trans[2][38]	= settr(305,2,39,2,0,"else", 1, 2, 0);
	trans[2][39]	= settr(306,2,44,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][44] = settr(311,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(311,0,42,0,0,"sub-sequence", 1, 2, 0);
	trans[2][42]	= settr(309,4,148,331,331,"assert((EP_Stack==255))", 1, 2, 0); /* m: 43 -> 0,148 */
	reached2[43] = 1;
	trans[2][43]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[2][45]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[2][49]	= settr(316,0,148,332,332,".(goto)", 1, 2, 0);
	trans[2][46]	= settr(313,2,47,2,0,"else", 1, 2, 0);
	trans[2][47]	= settr(314,4,148,333,333,"(1)", 1, 2, 0); /* m: 49 -> 148,0 */
	reached2[49] = 1;
	T = trans[ 2][148] = settr(415,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(415,2,51,0,0,"ATOMIC", 1, 2, 0);
	trans[2][51]	= settr(318,2,125,334,0,"((2==EP))", 1, 2, 0);
	T = trans[ 2][125] = settr(392,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(392,0,52,0,0,"sub-sequence", 1, 2, 0);
	trans[2][52]	= settr(319,2,56,335,335,"intSave = 0", 1, 2, 0); /* m: 53 -> 0,56 */
	reached2[53] = 1;
	trans[2][53]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	trans[2][54]	= settr(0,0,0,0,0,"currentTask = EP",0,0,0);
	T = trans[ 2][56] = settr(323,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(323,0,55,0,0,"sub-sequence", 1, 2, 0);
	trans[2][55]	= settr(322,2,123,336,336,"intSave = 0", 1, 2, 0);
	T = trans[2][123] = settr(390,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(390,2,57,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(390,2,63,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(390,2,121,0,0,"IF", 1, 2, 0);
	trans[2][57]	= settr(324,2,62,337,0,"((5==0))", 1, 2, 0);
	T = trans[ 2][62] = settr(329,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(329,0,61,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 2][61] = settr(328,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(328,0,60,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 2][60] = settr(327,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(327,0,58,0,0,"sub-sequence", 1, 2, 0);
	trans[2][58]	= settr(325,2,131,338,338,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 59 -> 0,131 */
	reached2[59] = 1;
	trans[2][59]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[2][124]	= settr(391,2,131,1,0,".(goto)", 1, 2, 0);
	trans[2][63]	= settr(330,2,109,339,0,"((5>0))", 1, 2, 0);
	T = trans[ 2][109] = settr(376,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(376,0,64,0,0,"sub-sequence", 1, 2, 0);
	trans[2][64]	= settr(331,2,101,340,340,"assert(((tcb[currentTask].state==1)||(tcb[currentTask].state==4)))", 1, 2, 0); /* m: 65 -> 0,101 */
	reached2[65] = 1;
	trans[2][65]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	T = trans[2][101] = settr(368,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(368,2,66,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(368,2,99,0,0,"IF", 1, 2, 0);
	trans[2][66]	= settr(333,2,98,341,0,"((tcb[currentTask].state==1))", 1, 2, 0);
	T = trans[ 2][98] = settr(365,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(365,0,67,0,0,"sub-sequence", 1, 2, 0);
	trans[2][67]	= settr(334,2,79,342,342,"idx = 0", 1, 2, 0); /* m: 68 -> 0,79 */
	reached2[68] = 1;
	trans[2][68]	= settr(0,0,0,0,0,"found = 0",0,0,0);
	trans[2][69]	= settr(0,0,0,0,0,"prioLevel = tcb[currentTask].prio",0,0,0);
	trans[2][80]	= settr(347,2,79,1,0,".(goto)", 1, 2, 0);
	T = trans[2][79] = settr(346,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(346,2,70,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(346,2,77,0,0,"DO", 1, 2, 0);
	trans[2][70]	= settr(337,2,75,343,0,"(((idx<readyQueue[prioLevel].tailIndex)&&!(found)))", 1, 2, 0);
	T = trans[2][75] = settr(342,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(342,2,71,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(342,2,73,0,0,"IF", 1, 2, 0);
	trans[2][71]	= settr(338,2,79,344,344,"((readyQueue[prioLevel].tasks[idx]==currentTask))", 1, 2, 0); /* m: 72 -> 79,0 */
	reached2[72] = 1;
	trans[2][72]	= settr(0,0,0,0,0,"found = 1",0,0,0);
	trans[2][76]	= settr(343,2,79,1,0,".(goto)", 1, 2, 0);
	trans[2][73]	= settr(340,2,74,2,0,"else", 1, 2, 0);
	trans[2][74]	= settr(341,2,79,345,345,"idx = (idx+1)", 1, 2, 0);
	trans[2][77]	= settr(344,2,82,2,0,"else", 1, 2, 0);
	trans[2][78]	= settr(345,2,82,1,0,"goto :b7", 1, 2, 0); /* m: 82 -> 0,88 */
	reached2[82] = 1;
	trans[2][81]	= settr(348,2,82,1,0,"break", 1, 2, 0);
	trans[2][82]	= settr(349,2,88,346,346,"assert((found==1))", 1, 2, 0);
	trans[2][89]	= settr(356,2,88,1,0,".(goto)", 1, 2, 0);
	T = trans[2][88] = settr(355,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(355,2,83,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(355,2,86,0,0,"DO", 1, 2, 0);
	trans[2][83]	= settr(350,2,88,347,347,"((idx<(readyQueue[prioLevel].tailIndex-1)))", 1, 2, 0); /* m: 84 -> 88,0 */
	reached2[84] = 1;
	trans[2][84]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tasks[idx] = readyQueue[prioLevel].tasks[(idx+1)]",0,0,0);
	trans[2][85]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[2][86]	= settr(353,2,96,2,0,"else", 1, 2, 0);
	trans[2][87]	= settr(354,2,96,1,0,"goto :b8", 1, 2, 0);
	trans[2][90]	= settr(357,2,96,1,0,"break", 1, 2, 0);
	T = trans[2][96] = settr(363,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(363,2,91,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(363,2,94,0,0,"IF", 1, 2, 0);
	trans[2][91]	= settr(358,2,119,348,348,"((readyQueue[prioLevel].tailIndex>0))", 1, 2, 0); /* m: 92 -> 119,0 */
	reached2[92] = 1;
	trans[2][92]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tasks[(readyQueue[prioLevel].tailIndex-1)] = 255",0,0,0);
	trans[2][93]	= settr(0,0,0,0,0,"readyQueue[prioLevel].tailIndex = (readyQueue[prioLevel].tailIndex-1)",0,0,0);
	trans[2][97]	= settr(364,2,103,1,0,".(goto)", 1, 2, 0); /* m: 103 -> 0,119 */
	reached2[103] = 1;
	trans[2][94]	= settr(361,2,95,2,0,"else", 1, 2, 0);
	trans[2][95]	= settr(362,2,119,349,349,"(1)", 1, 2, 0); /* m: 103 -> 119,0 */
	reached2[103] = 1;
	trans[2][102]	= settr(369,2,103,1,0,".(goto)", 1, 2, 0); /* m: 103 -> 0,119 */
	reached2[103] = 1;
	trans[2][99]	= settr(366,2,100,2,0,"else", 1, 2, 0);
	trans[2][100]	= settr(367,2,119,350,350,"(1)", 1, 2, 0); /* m: 103 -> 119,0 */
	reached2[103] = 1;
	trans[2][103]	= settr(370,2,119,351,351,"tcb[currentTask].state = 2", 1, 2, 0); /* m: 104 -> 0,119 */
	reached2[104] = 1;
	trans[2][104]	= settr(0,0,0,0,0,"assert((g_taskSortLinkTail<(2+1)))",0,0,0);
	trans[2][105]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].taskId = currentTask",0,0,0);
	trans[2][106]	= settr(0,0,0,0,0,"g_taskSortLink[g_taskSortLinkTail].responseTime = 5",0,0,0);
	trans[2][107]	= settr(0,0,0,0,0,"tcb[currentTask].pendList = g_taskSortLinkTail",0,0,0);
	trans[2][108]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail+1)",0,0,0);
	T = trans[2][119] = settr(386,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,110,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(386,2,117,0,0,"IF", 1, 2, 0);
	trans[2][110]	= settr(377,2,112,352,352,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 2][112] = settr(379,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(379,0,111,0,0,"sub-sequence", 1, 2, 0);
	trans[2][111]	= settr(378,2,116,353,353,"intSave = 0", 1, 2, 0);
	T = trans[ 2][116] = settr(383,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(383,0,115,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 2][115] = settr(382,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(382,0,113,0,0,"sub-sequence", 1, 2, 0);
	trans[2][113]	= settr(380,2,131,354,354,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 114 -> 0,131 */
	reached2[114] = 1;
	trans[2][114]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[2][120]	= settr(387,2,131,1,0,".(goto)", 1, 2, 0);
	trans[2][117]	= settr(384,2,118,2,0,"else", 1, 2, 0);
	trans[2][118]	= settr(385,2,131,1,0,"(1)", 1, 2, 0);
	trans[2][121]	= settr(388,2,122,2,0,"else", 1, 2, 0);
	trans[2][122]	= settr(389,2,131,1,0,"(1)", 1, 2, 0);
	T = trans[2][131] = settr(398,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(398,2,126,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(398,2,130,0,0,"IF", 1, 2, 0);
	trans[2][126]	= settr(393,2,129,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][129] = settr(396,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(396,0,127,0,0,"sub-sequence", 1, 2, 0);
	trans[2][127]	= settr(394,2,146,355,355,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 128 -> 0,146 */
	reached2[128] = 1;
	trans[2][128]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[2][132]	= settr(399,2,146,1,0,".(goto)", 1, 2, 0);
	trans[2][130]	= settr(397,2,146,1,0,"(1)", 1, 2, 0);
	T = trans[2][146] = settr(413,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(413,2,133,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(413,2,144,0,0,"IF", 1, 2, 0);
	trans[2][133]	= settr(400,2,138,356,0,"((((((pending_exp>>0)&1)&&((BASEPRI==0)||(15<BASEPRI)))||(((pending_exp>>1)&1)&&((BASEPRI==0)||(15<BASEPRI))))&&(EP>=2)))", 1, 2, 0);
	T = trans[2][138] = settr(405,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(405,2,134,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(405,2,136,0,0,"IF", 1, 2, 0);
	trans[2][134]	= settr(401,2,142,357,357,"((EP>=2))", 1, 2, 0); /* m: 135 -> 142,0 */
	reached2[135] = 1;
	trans[2][135]	= settr(0,0,0,0,0,"chain_tick_used = 0",0,0,0);
	trans[2][139]	= settr(406,2,142,1,0,".(goto)", 1, 2, 0);
	trans[2][136]	= settr(403,2,137,2,0,"else", 1, 2, 0);
	trans[2][137]	= settr(404,2,142,1,0,"(1)", 1, 2, 0);
	T = trans[ 2][142] = settr(409,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(409,0,140,0,0,"sub-sequence", 1, 2, 0);
	trans[2][140]	= settr(407,0,149,358,358,"assert((EP_Stack==255))", 1, 2, 0); /* m: 141 -> 0,149 */
	reached2[141] = 1;
	trans[2][141]	= settr(0,0,0,0,0,"EP_Stack = EP",0,0,0);
	trans[2][143]	= settr(0,0,0,0,0,"EP = ( (((pending_exp>>0)&1)) -> (0) : (1) )",0,0,0);
	trans[2][147]	= settr(414,0,149,359,359,".(goto)", 1, 2, 0);
	trans[2][144]	= settr(411,2,145,2,0,"else", 1, 2, 0);
	trans[2][145]	= settr(412,0,149,360,360,"(1)", 1, 2, 0); /* m: 147 -> 149,0 */
	reached2[147] = 1;
	trans[2][151]	= settr(418,0,152,1,0,"break", 0, 2, 0);
	trans[2][152]	= settr(419,0,0,361,361,"-end-", 0, 3500, 0);

	/* proctype 1: SysTick_Handler */

	trans[1] = (Trans **) emalloc(123*sizeof(Trans *));

	trans[1][120]	= settr(265,0,119,1,0,".(goto)", 0, 2, 0);
	T = trans[1][119] = settr(264,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(264,0,1,0,0,"DO", 0, 2, 0);
	trans[1][1]	= settr(146,0,7,362,0,"((EP==1))", 1, 2, 0);
	T = trans[ 1][7] = settr(152,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(152,0,6,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6] = settr(151,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(151,2,2,0,0,"ATOMIC", 1, 2, 0);
	trans[1][2]	= settr(147,2,5,363,0,"((EP==1))", 1, 2, 0);
	T = trans[ 1][5] = settr(150,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(150,0,3,0,0,"sub-sequence", 1, 2, 0);
	trans[1][3]	= settr(148,4,78,364,364,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 4 -> 0,78 */
	reached1[4] = 1;
	trans[1][4]	= settr(0,0,0,0,0,"pending_exp = (pending_exp&~((1<<1)))",0,0,0);
	T = trans[ 1][78] = settr(223,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(223,2,8,0,0,"ATOMIC", 1, 2, 0);
	trans[1][8]	= settr(153,2,68,365,0,"((1==EP))", 1, 2, 0);
	T = trans[ 1][68] = settr(213,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(213,0,9,0,0,"sub-sequence", 1, 2, 0);
	trans[1][9]	= settr(154,2,57,366,366,"idx = 0", 1, 2, 0); /* m: 10 -> 0,57 */
	reached1[10] = 1;
	trans[1][10]	= settr(0,0,0,0,0,"taskId = 0",0,0,0);
	trans[1][11]	= settr(0,0,0,0,0,"needSched = 0",0,0,0);
	trans[1][12]	= settr(0,0,0,0,0,"g_tickCount = (g_tickCount+1)",0,0,0);
	trans[1][58]	= settr(203,2,57,1,0,".(goto)", 1, 2, 0);
	T = trans[1][57] = settr(202,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(202,2,13,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(202,2,55,0,0,"DO", 1, 2, 0);
	trans[1][13]	= settr(158,2,53,367,367,"((idx<g_taskSortLinkTail))", 1, 2, 0); /* m: 14 -> 53,0 */
	reached1[14] = 1;
	trans[1][14]	= settr(0,0,0,0,0,"taskId = g_taskSortLink[idx].taskId",0,0,0);
	T = trans[1][53] = settr(198,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(198,2,15,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(198,2,51,0,0,"IF", 1, 2, 0);
	trans[1][15]	= settr(160,2,49,368,368,"(((tcb[taskId].state==2)&&(g_taskSortLink[idx].responseTime>0)))", 1, 2, 0); /* m: 16 -> 49,0 */
	reached1[16] = 1;
	trans[1][16]	= settr(0,0,0,0,0,"g_taskSortLink[idx].responseTime = (g_taskSortLink[idx].responseTime-1)",0,0,0);
	T = trans[1][49] = settr(194,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(194,2,17,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(194,2,47,0,0,"IF", 1, 2, 0);
	trans[1][17]	= settr(162,2,26,369,369,"((g_taskSortLink[idx].responseTime==0))", 1, 2, 0); /* m: 18 -> 26,0 */
	reached1[18] = 1;
	trans[1][18]	= settr(0,0,0,0,0,"tcb[taskId].state = 1",0,0,0);
	T = trans[ 1][26] = settr(171,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(171,0,24,0,0,"sub-sequence", 1, 2, 0);
	T = trans[1][24] = settr(169,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(169,2,19,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(169,2,22,0,0,"IF", 1, 2, 0);
	trans[1][19]	= settr(164,2,40,370,370,"((readyQueue[tcb[taskId].prio].tailIndex<5))", 1, 2, 0); /* m: 20 -> 40,0 */
	reached1[20] = 1;
	trans[1][20]	= settr(0,0,0,0,0,"readyQueue[tcb[taskId].prio].tasks[readyQueue[tcb[taskId].prio].tailIndex] = taskId",0,0,0);
	trans[1][21]	= settr(0,0,0,0,0,"readyQueue[tcb[taskId].prio].tailIndex = (readyQueue[tcb[taskId].prio].tailIndex+1)",0,0,0);
	trans[1][25]	= settr(170,2,27,1,0,".(goto)", 1, 2, 0); /* m: 27 -> 0,40 */
	reached1[27] = 1;
	trans[1][22]	= settr(167,2,23,2,0,"else", 1, 2, 0);
	trans[1][23]	= settr(168,2,40,371,371,"assert(0)", 1, 2, 0); /* m: 27 -> 0,40 */
	reached1[27] = 1;
	trans[1][27]	= settr(172,2,40,372,372,"shiftIdx = idx", 1, 2, 0);
	trans[1][41]	= settr(186,2,40,1,0,".(goto)", 1, 2, 0);
	T = trans[1][40] = settr(185,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(185,2,28,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(185,2,38,0,0,"DO", 1, 2, 0);
	trans[1][28]	= settr(173,2,35,373,373,"((shiftIdx<(g_taskSortLinkTail-1)))", 1, 2, 0); /* m: 29 -> 35,0 */
	reached1[29] = 1;
	trans[1][29]	= settr(0,0,0,0,0,"g_taskSortLink[shiftIdx].taskId = g_taskSortLink[(shiftIdx+1)].taskId",0,0,0);
	trans[1][30]	= settr(0,0,0,0,0,"g_taskSortLink[shiftIdx].responseTime = g_taskSortLink[(shiftIdx+1)].responseTime",0,0,0);
	T = trans[1][35] = settr(180,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(180,2,31,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(180,2,33,0,0,"IF", 1, 2, 0);
	trans[1][31]	= settr(176,2,40,374,374,"((g_taskSortLink[shiftIdx].taskId!=255))", 1, 2, 0); /* m: 32 -> 40,0 */
	reached1[32] = 1;
	trans[1][32]	= settr(0,0,0,0,0,"tcb[g_taskSortLink[shiftIdx].taskId].pendList = shiftIdx",0,0,0);
	trans[1][36]	= settr(181,2,37,1,0,".(goto)", 1, 2, 0); /* m: 37 -> 0,40 */
	reached1[37] = 1;
	trans[1][33]	= settr(178,2,34,2,0,"else", 1, 2, 0);
	trans[1][34]	= settr(179,2,40,375,375,"(1)", 1, 2, 0); /* m: 37 -> 40,0 */
	reached1[37] = 1;
	trans[1][37]	= settr(182,2,40,376,376,"shiftIdx = (shiftIdx+1)", 1, 2, 0);
	trans[1][38]	= settr(183,2,43,2,0,"else", 1, 2, 0);
	trans[1][39]	= settr(184,2,43,1,0,"goto :b5", 1, 2, 0); /* m: 43 -> 0,57 */
	reached1[43] = 1;
	trans[1][42]	= settr(187,2,43,1,0,"break", 1, 2, 0);
	trans[1][43]	= settr(188,2,57,377,377,"g_taskSortLink[(g_taskSortLinkTail-1)].taskId = 255", 1, 2, 0); /* m: 44 -> 0,57 */
	reached1[44] = 1;
	trans[1][44]	= settr(0,0,0,0,0,"g_taskSortLink[(g_taskSortLinkTail-1)].responseTime = 255",0,0,0);
	trans[1][45]	= settr(0,0,0,0,0,"g_taskSortLinkTail = (g_taskSortLinkTail-1)",0,0,0);
	trans[1][46]	= settr(0,0,0,0,0,"needSched = 1",0,0,0);
	trans[1][50]	= settr(195,2,57,1,0,".(goto)", 1, 2, 0);
	trans[1][47]	= settr(192,2,48,2,0,"else", 1, 2, 0);
	trans[1][48]	= settr(193,2,57,378,378,"idx = (idx+1)", 1, 2, 0);
	trans[1][54]	= settr(199,2,57,1,0,".(goto)", 1, 2, 0);
	trans[1][51]	= settr(196,2,52,2,0,"else", 1, 2, 0);
	trans[1][52]	= settr(197,2,57,379,379,"idx = (idx+1)", 1, 2, 0);
	trans[1][55]	= settr(200,2,66,2,0,"else", 1, 2, 0);
	trans[1][56]	= settr(201,2,66,1,0,"goto :b4", 1, 2, 0);
	trans[1][59]	= settr(204,2,66,1,0,"break", 1, 2, 0);
	T = trans[1][66] = settr(211,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(211,2,60,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(211,2,64,0,0,"IF", 1, 2, 0);
	trans[1][60]	= settr(205,2,63,380,380,"((needSched&&g_taskScheduled))", 1, 2, 0);
	T = trans[ 1][63] = settr(208,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(208,0,61,0,0,"sub-sequence", 1, 2, 0);
	trans[1][61]	= settr(206,2,77,381,381,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 62 -> 0,77 */
	reached1[62] = 1;
	trans[1][62]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	trans[1][67]	= settr(212,2,77,1,0,".(goto)", 1, 2, 0);
	trans[1][64]	= settr(209,2,65,2,0,"else", 1, 2, 0);
	trans[1][65]	= settr(210,2,77,1,0,"(1)", 1, 2, 0);
	T = trans[ 1][77] = settr(222,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(222,0,75,0,0,"sub-sequence", 1, 2, 0);
	T = trans[1][75] = settr(220,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(220,2,69,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(220,2,74,0,0,"IF", 1, 2, 0);
	trans[1][69]	= settr(214,2,72,382,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 1][72] = settr(217,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(217,0,70,0,0,"sub-sequence", 1, 2, 0);
	trans[1][70]	= settr(215,4,92,383,383,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 71 -> 0,92 */
	reached1[71] = 1;
	trans[1][71]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[1][73]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[1][76]	= settr(221,0,92,384,384,".(goto)", 1, 2, 0);
	trans[1][74]	= settr(219,4,92,385,385,"(1)", 1, 2, 0); /* m: 76 -> 92,0 */
	reached1[76] = 1;
	T = trans[ 1][92] = settr(237,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(237,2,79,0,0,"ATOMIC", 1, 2, 0);
	trans[1][79]	= settr(224,2,82,386,0,"((1==EP))", 1, 2, 0);
	T = trans[ 1][82] = settr(227,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(227,0,80,0,0,"sub-sequence", 1, 2, 0);
	trans[1][80]	= settr(225,2,91,387,387,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 81 -> 0,91 */
	reached1[81] = 1;
	trans[1][81]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<0))",0,0,0);
	T = trans[ 1][91] = settr(236,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(236,0,89,0,0,"sub-sequence", 1, 2, 0);
	T = trans[1][89] = settr(234,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(234,2,83,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(234,2,88,0,0,"IF", 1, 2, 0);
	trans[1][83]	= settr(228,2,86,388,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 1][86] = settr(231,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(231,0,84,0,0,"sub-sequence", 1, 2, 0);
	trans[1][84]	= settr(229,4,118,389,389,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 85 -> 0,118 */
	reached1[85] = 1;
	trans[1][85]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[1][87]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[1][90]	= settr(235,0,118,390,390,".(goto)", 1, 2, 0);
	trans[1][88]	= settr(233,4,118,391,391,"(1)", 1, 2, 0); /* m: 90 -> 118,0 */
	reached1[90] = 1;
	T = trans[ 1][118] = settr(263,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(263,2,93,0,0,"ATOMIC", 1, 2, 0);
	trans[1][93]	= settr(238,2,108,392,0,"((1==EP))", 1, 2, 0);
	T = trans[ 1][108] = settr(253,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(253,0,106,0,0,"sub-sequence", 1, 2, 0);
	T = trans[1][106] = settr(251,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(251,2,94,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(251,2,101,0,0,"IF", 1, 2, 0);
	trans[1][94]	= settr(239,2,100,393,0,"((pending_exp>0))", 1, 2, 0);
	T = trans[ 1][100] = settr(245,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(245,0,96,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 1][96] = settr(241,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(241,0,95,0,0,"sub-sequence", 1, 2, 0);
	trans[1][95]	= settr(240,2,117,394,394,"tmp = ( (((pending_exp>>0)&1)) -> (0) : (1) )", 1, 2, 0); /* m: 97 -> 0,117 */
	reached1[97] = 1;
	trans[1][97]	= settr(0,0,0,0,0,"assert((((BASEPRI==0)||(15<BASEPRI))&&(EP_Stack>=2)))",0,0,0);
	trans[1][98]	= settr(0,0,0,0,0,"EP = tmp",0,0,0);
	trans[1][99]	= settr(0,0,0,0,0,"tmp = 255",0,0,0);
	trans[1][107]	= settr(252,2,117,1,0,".(goto)", 1, 2, 0);
	trans[1][101]	= settr(246,2,105,2,0,"else", 1, 2, 0);
	T = trans[ 1][105] = settr(250,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(250,0,102,0,0,"sub-sequence", 1, 2, 0);
	trans[1][102]	= settr(247,2,117,395,395,"assert((EP_Stack!=255))", 1, 2, 0); /* m: 103 -> 0,117 */
	reached1[103] = 1;
	trans[1][103]	= settr(0,0,0,0,0,"EP = EP_Stack",0,0,0);
	trans[1][104]	= settr(0,0,0,0,0,"EP_Stack = 255",0,0,0);
	T = trans[ 1][117] = settr(262,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(262,0,115,0,0,"sub-sequence", 1, 2, 0);
	T = trans[1][115] = settr(260,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(260,2,109,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(260,2,114,0,0,"IF", 1, 2, 0);
	trans[1][109]	= settr(254,2,112,396,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 1][112] = settr(257,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(257,0,110,0,0,"sub-sequence", 1, 2, 0);
	trans[1][110]	= settr(255,0,119,397,397,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 111 -> 0,119 */
	reached1[111] = 1;
	trans[1][111]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[1][113]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[1][116]	= settr(261,0,119,398,398,".(goto)", 1, 2, 0);
	trans[1][114]	= settr(259,0,119,399,399,"(1)", 1, 2, 0); /* m: 116 -> 119,0 */
	reached1[116] = 1;
	trans[1][121]	= settr(266,0,122,1,0,"break", 0, 2, 0);
	trans[1][122]	= settr(267,0,0,400,400,"-end-", 0, 3500, 0);

	/* proctype 0: PendSV_Handler */

	trans[0] = (Trans **) emalloc(147*sizeof(Trans *));

	trans[0][144]	= settr(143,0,143,1,0,".(goto)", 0, 2, 0);
	T = trans[0][143] = settr(142,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(142,0,1,0,0,"DO", 0, 2, 0);
	trans[0][1]	= settr(0,0,7,401,0,"((EP==0))", 1, 2, 0);
	T = trans[ 0][7] = settr(6,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6,0,6,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][6] = settr(5,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5,2,2,0,0,"ATOMIC", 1, 2, 0);
	trans[0][2]	= settr(1,2,5,402,0,"((EP==0))", 1, 2, 0);
	T = trans[ 0][5] = settr(4,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(4,0,3,0,0,"sub-sequence", 1, 2, 0);
	trans[0][3]	= settr(2,4,32,403,403,"assert(((0<2)&&(0<8)))", 1, 2, 0); /* m: 4 -> 0,32 */
	reached0[4] = 1;
	trans[0][4]	= settr(0,0,0,0,0,"pending_exp = (pending_exp&~((1<<0)))",0,0,0);
	T = trans[ 0][32] = settr(31,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(31,2,8,0,0,"ATOMIC", 1, 2, 0);
	trans[0][8]	= settr(7,2,21,404,0,"((0==EP))", 1, 2, 0);
	T = trans[0][21] = settr(20,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(20,2,9,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(20,2,19,0,0,"IF", 1, 2, 0);
	trans[0][9]	= settr(8,2,18,405,405,"((tcb[EP_Stack].state==4))", 1, 2, 0); /* m: 10 -> 18,0 */
	reached0[10] = 1;
	trans[0][10]	= settr(0,0,0,0,0,"tcb[EP_Stack].state = 1",0,0,0);
	T = trans[ 0][18] = settr(17,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(17,0,16,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][16] = settr(15,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15,2,11,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15,2,14,0,0,"IF", 1, 2, 0);
	trans[0][11]	= settr(10,2,31,406,406,"((readyQueue[tcb[EP_Stack].prio].tailIndex<5))", 1, 2, 0); /* m: 12 -> 31,0 */
	reached0[12] = 1;
	trans[0][12]	= settr(0,0,0,0,0,"readyQueue[tcb[EP_Stack].prio].tasks[readyQueue[tcb[EP_Stack].prio].tailIndex] = EP_Stack",0,0,0);
	trans[0][13]	= settr(0,0,0,0,0,"readyQueue[tcb[EP_Stack].prio].tailIndex = (readyQueue[tcb[EP_Stack].prio].tailIndex+1)",0,0,0);
	trans[0][17]	= settr(16,2,31,1,0,".(goto)", 1, 2, 0);
	trans[0][14]	= settr(13,2,15,2,0,"else", 1, 2, 0);
	trans[0][15]	= settr(14,2,31,407,0,"assert(0)", 1, 2, 0);
	trans[0][22]	= settr(21,2,31,1,0,".(goto)", 1, 2, 0);
	trans[0][19]	= settr(18,2,20,2,0,"else", 1, 2, 0);
	trans[0][20]	= settr(19,2,31,1,0,"(1)", 1, 2, 0);
	T = trans[ 0][31] = settr(30,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(30,0,29,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][29] = settr(28,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(28,2,23,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(28,2,28,0,0,"IF", 1, 2, 0);
	trans[0][23]	= settr(22,2,26,408,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][26] = settr(25,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(25,0,24,0,0,"sub-sequence", 1, 2, 0);
	trans[0][24]	= settr(23,4,62,409,409,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 25 -> 0,62 */
	reached0[25] = 1;
	trans[0][25]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][27]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][30]	= settr(29,0,62,410,410,".(goto)", 1, 2, 0);
	trans[0][28]	= settr(27,4,62,411,411,"(1)", 1, 2, 0); /* m: 30 -> 62,0 */
	reached0[30] = 1;
	T = trans[ 0][62] = settr(61,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(61,2,33,0,0,"ATOMIC", 1, 2, 0);
	trans[0][33]	= settr(32,2,52,412,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][52] = settr(51,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(51,0,34,0,0,"sub-sequence", 1, 2, 0);
	trans[0][34]	= settr(33,2,47,413,413,"prio = 0", 1, 2, 0); /* m: 35 -> 0,47 */
	reached0[35] = 1;
	trans[0][35]	= settr(0,0,0,0,0,"top_task = 0",0,0,0);
	trans[0][36]	= settr(0,0,0,0,0,"found = 0",0,0,0);
	trans[0][48]	= settr(47,2,47,1,0,".(goto)", 1, 2, 0);
	T = trans[0][47] = settr(46,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(46,2,37,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(46,2,45,0,0,"DO", 1, 2, 0);
	trans[0][37]	= settr(36,2,43,414,0,"(((prio<4)&&!(found)))", 1, 2, 0);
	T = trans[0][43] = settr(42,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(42,2,38,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(42,2,41,0,0,"IF", 1, 2, 0);
	trans[0][38]	= settr(37,2,47,415,415,"((readyQueue[prio].tailIndex>0))", 1, 2, 0); /* m: 39 -> 47,0 */
	reached0[39] = 1;
	trans[0][39]	= settr(0,0,0,0,0,"top_task = readyQueue[prio].tasks[0]",0,0,0);
	trans[0][40]	= settr(0,0,0,0,0,"found = 1",0,0,0);
	trans[0][44]	= settr(43,2,47,1,0,".(goto)", 1, 2, 0);
	trans[0][41]	= settr(40,2,42,2,0,"else", 1, 2, 0);
	trans[0][42]	= settr(41,2,47,416,416,"prio = (prio+1)", 1, 2, 0);
	trans[0][45]	= settr(44,2,50,2,0,"else", 1, 2, 0);
	trans[0][46]	= settr(45,2,50,1,0,"goto :b1", 1, 2, 0); /* m: 50 -> 0,61 */
	reached0[50] = 1;
	trans[0][49]	= settr(48,2,50,1,0,"break", 1, 2, 0);
	trans[0][50]	= settr(49,2,61,417,417,"tmp = top_task", 1, 2, 0); /* m: 51 -> 0,61 */
	reached0[51] = 1;
	trans[0][51]	= settr(0,0,0,0,0,"topPrio = prio",0,0,0);
	T = trans[ 0][61] = settr(60,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(60,0,59,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][59] = settr(58,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(58,2,53,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(58,2,58,0,0,"IF", 1, 2, 0);
	trans[0][53]	= settr(52,2,56,418,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][56] = settr(55,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(55,0,54,0,0,"sub-sequence", 1, 2, 0);
	trans[0][54]	= settr(53,4,90,419,419,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 55 -> 0,90 */
	reached0[55] = 1;
	trans[0][55]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][57]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][60]	= settr(59,0,90,420,420,".(goto)", 1, 2, 0);
	trans[0][58]	= settr(57,4,90,421,421,"(1)", 1, 2, 0); /* m: 60 -> 90,0 */
	reached0[60] = 1;
	T = trans[ 0][90] = settr(89,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(89,2,63,0,0,"ATOMIC", 1, 2, 0);
	trans[0][63]	= settr(62,2,80,422,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][80] = settr(79,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(79,0,64,0,0,"sub-sequence", 1, 2, 0);
	trans[0][64]	= settr(63,2,70,423,423,"idx = 0", 1, 2, 0);
	trans[0][71]	= settr(70,2,70,1,0,".(goto)", 1, 2, 0);
	T = trans[0][70] = settr(69,2,0,0,0,"DO", 1, 2, 0);
	T = T->nxt	= settr(69,2,65,0,0,"DO", 1, 2, 0);
	    T->nxt	= settr(69,2,68,0,0,"DO", 1, 2, 0);
	trans[0][65]	= settr(64,2,70,424,424,"((idx<(readyQueue[topPrio].tailIndex-1)))", 1, 2, 0); /* m: 66 -> 70,0 */
	reached0[66] = 1;
	trans[0][66]	= settr(0,0,0,0,0,"readyQueue[topPrio].tasks[idx] = readyQueue[topPrio].tasks[(idx+1)]",0,0,0);
	trans[0][67]	= settr(0,0,0,0,0,"idx = (idx+1)",0,0,0);
	trans[0][68]	= settr(67,2,78,2,0,"else", 1, 2, 0);
	trans[0][69]	= settr(68,2,78,1,0,"goto :b2", 1, 2, 0);
	trans[0][72]	= settr(71,2,78,1,0,"break", 1, 2, 0);
	T = trans[0][78] = settr(77,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(77,2,73,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(77,2,76,0,0,"IF", 1, 2, 0);
	trans[0][73]	= settr(72,2,89,425,425,"((readyQueue[topPrio].tailIndex>0))", 1, 2, 0); /* m: 74 -> 89,0 */
	reached0[74] = 1;
	trans[0][74]	= settr(0,0,0,0,0,"readyQueue[topPrio].tasks[(readyQueue[topPrio].tailIndex-1)] = 255",0,0,0);
	trans[0][75]	= settr(0,0,0,0,0,"readyQueue[topPrio].tailIndex = (readyQueue[topPrio].tailIndex-1)",0,0,0);
	trans[0][79]	= settr(78,2,89,1,0,".(goto)", 1, 2, 0);
	trans[0][76]	= settr(75,2,77,2,0,"else", 1, 2, 0);
	trans[0][77]	= settr(76,2,89,1,0,"(1)", 1, 2, 0);
	T = trans[ 0][89] = settr(88,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(88,0,87,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][87] = settr(86,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(86,2,81,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(86,2,86,0,0,"IF", 1, 2, 0);
	trans[0][81]	= settr(80,2,84,426,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][84] = settr(83,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(83,0,82,0,0,"sub-sequence", 1, 2, 0);
	trans[0][82]	= settr(81,4,102,427,427,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 83 -> 0,102 */
	reached0[83] = 1;
	trans[0][83]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][85]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][88]	= settr(87,0,102,428,428,".(goto)", 1, 2, 0);
	trans[0][86]	= settr(85,4,102,429,429,"(1)", 1, 2, 0); /* m: 88 -> 102,0 */
	reached0[88] = 1;
	T = trans[ 0][102] = settr(101,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(101,2,91,0,0,"ATOMIC", 1, 2, 0);
	trans[0][91]	= settr(90,2,101,430,430,"((0==EP))", 1, 2, 0); /* m: 92 -> 101,0 */
	reached0[92] = 1;
	trans[0][92]	= settr(0,0,0,0,0,"tcb[tmp].state = 4",0,0,0);
	T = trans[ 0][101] = settr(100,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(100,0,99,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][99] = settr(98,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(98,2,93,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(98,2,98,0,0,"IF", 1, 2, 0);
	trans[0][93]	= settr(92,2,96,431,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][96] = settr(95,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(95,0,94,0,0,"sub-sequence", 1, 2, 0);
	trans[0][94]	= settr(93,4,116,432,432,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 95 -> 0,116 */
	reached0[95] = 1;
	trans[0][95]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][97]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][100]	= settr(99,0,116,433,433,".(goto)", 1, 2, 0);
	trans[0][98]	= settr(97,4,116,434,434,"(1)", 1, 2, 0); /* m: 100 -> 116,0 */
	reached0[100] = 1;
	T = trans[ 0][116] = settr(115,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(115,2,103,0,0,"ATOMIC", 1, 2, 0);
	trans[0][103]	= settr(102,2,106,435,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][106] = settr(105,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(105,0,104,0,0,"sub-sequence", 1, 2, 0);
	trans[0][104]	= settr(103,2,115,436,436,"assert((((EP_Stack!=255)&&(EP_Stack>=2))&&(tmp>=2)))", 1, 2, 0); /* m: 105 -> 0,115 */
	reached0[105] = 1;
	trans[0][105]	= settr(0,0,0,0,0,"EP_Stack = tmp",0,0,0);
	T = trans[ 0][115] = settr(114,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(114,0,113,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][113] = settr(112,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(112,2,107,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(112,2,112,0,0,"IF", 1, 2, 0);
	trans[0][107]	= settr(106,2,110,437,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][110] = settr(109,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(109,0,108,0,0,"sub-sequence", 1, 2, 0);
	trans[0][108]	= settr(107,4,142,438,438,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 109 -> 0,142 */
	reached0[109] = 1;
	trans[0][109]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][111]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][114]	= settr(113,0,142,439,439,".(goto)", 1, 2, 0);
	trans[0][112]	= settr(111,4,142,440,440,"(1)", 1, 2, 0); /* m: 114 -> 142,0 */
	reached0[114] = 1;
	T = trans[ 0][142] = settr(141,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(141,2,117,0,0,"ATOMIC", 1, 2, 0);
	trans[0][117]	= settr(116,2,132,441,0,"((0==EP))", 1, 2, 0);
	T = trans[ 0][132] = settr(131,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(131,0,130,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][130] = settr(129,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(129,2,118,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(129,2,125,0,0,"IF", 1, 2, 0);
	trans[0][118]	= settr(117,2,124,442,0,"((pending_exp>0))", 1, 2, 0);
	T = trans[ 0][124] = settr(123,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(123,0,120,0,0,"sub-sequence", 1, 2, 0);
	T = trans[ 0][120] = settr(119,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(119,0,119,0,0,"sub-sequence", 1, 2, 0);
	trans[0][119]	= settr(118,2,141,443,443,"tmp = ( (((pending_exp>>0)&1)) -> (0) : (1) )", 1, 2, 0); /* m: 121 -> 0,141 */
	reached0[121] = 1;
	trans[0][121]	= settr(0,0,0,0,0,"assert((((BASEPRI==0)||(15<BASEPRI))&&(EP_Stack>=2)))",0,0,0);
	trans[0][122]	= settr(0,0,0,0,0,"EP = tmp",0,0,0);
	trans[0][123]	= settr(0,0,0,0,0,"tmp = 255",0,0,0);
	trans[0][131]	= settr(130,2,141,1,0,".(goto)", 1, 2, 0);
	trans[0][125]	= settr(124,2,129,2,0,"else", 1, 2, 0);
	T = trans[ 0][129] = settr(128,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(128,0,126,0,0,"sub-sequence", 1, 2, 0);
	trans[0][126]	= settr(125,2,141,444,444,"assert((EP_Stack!=255))", 1, 2, 0); /* m: 127 -> 0,141 */
	reached0[127] = 1;
	trans[0][127]	= settr(0,0,0,0,0,"EP = EP_Stack",0,0,0);
	trans[0][128]	= settr(0,0,0,0,0,"EP_Stack = 255",0,0,0);
	T = trans[ 0][141] = settr(140,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(140,0,139,0,0,"sub-sequence", 1, 2, 0);
	T = trans[0][139] = settr(138,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(138,2,133,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(138,2,138,0,0,"IF", 1, 2, 0);
	trans[0][133]	= settr(132,2,136,445,0,"(((chain_tick_used==0)&&(((pending_exp>>1)&1)==0)))", 1, 2, 0);
	T = trans[ 0][136] = settr(135,0,0,0,0,"sub-sequence", 1, 2, 0);
	T->nxt	= settr(135,0,134,0,0,"sub-sequence", 1, 2, 0);
	trans[0][134]	= settr(133,0,143,446,446,"assert(((1<2)&&(1<8)))", 1, 2, 0); /* m: 135 -> 0,143 */
	reached0[135] = 1;
	trans[0][135]	= settr(0,0,0,0,0,"pending_exp = (pending_exp|(1<<1))",0,0,0);
	trans[0][137]	= settr(0,0,0,0,0,"chain_tick_used = 1",0,0,0);
	trans[0][140]	= settr(139,0,143,447,447,".(goto)", 1, 2, 0);
	trans[0][138]	= settr(137,0,143,448,448,"(1)", 1, 2, 0); /* m: 140 -> 143,0 */
	reached0[140] = 1;
	trans[0][145]	= settr(144,0,146,1,0,"break", 0, 2, 0);
	trans[0][146]	= settr(145,0,0,449,449,"-end-", 0, 3500, 0);
	/* np_ demon: */
	trans[_NP_] = (Trans **) emalloc(3*sizeof(Trans *));
	T = trans[_NP_][0] = settr(9997,0,1,_T5,0,"(np_)", 1,2,0);
	    T->nxt	  = settr(9998,0,0,_T2,0,"(1)",   0,2,0);
	T = trans[_NP_][1] = settr(9999,0,1,_T5,0,"(np_)", 1,2,0);
}

Trans *
settr(	int t_id, int a, int b, int c, int d,
	char *t, int g, int tpe0, int tpe1)
{	Trans *tmp = (Trans *) emalloc(sizeof(Trans));

	tmp->atom  = a&(6|32);	/* only (2|8|32) have meaning */
	if (!g) tmp->atom |= 8;	/* no global references */
	tmp->st    = b;
	tmp->tpe[0] = tpe0;
	tmp->tpe[1] = tpe1;
	tmp->tp    = t;
	tmp->t_id  = t_id;
	tmp->forw  = c;
	tmp->back  = d;
	return tmp;
}

Trans *
cpytr(Trans *a)
{	Trans *tmp = (Trans *) emalloc(sizeof(Trans));

	int i;
	tmp->atom  = a->atom;
	tmp->st    = a->st;
#ifdef HAS_UNLESS
	tmp->e_trans = a->e_trans;
	for (i = 0; i < HAS_UNLESS; i++)
		tmp->escp[i] = a->escp[i];
#endif
	tmp->tpe[0] = a->tpe[0];
	tmp->tpe[1] = a->tpe[1];
	for (i = 0; i < 6; i++)
	{	tmp->qu[i] = a->qu[i];
		tmp->ty[i] = a->ty[i];
	}
	tmp->tp    = (char *) emalloc(strlen(a->tp)+1);
	strcpy(tmp->tp, a->tp);
	tmp->t_id  = a->t_id;
	tmp->forw  = a->forw;
	tmp->back  = a->back;
	return tmp;
}

#ifndef NOREDUCE
int
srinc_set(int n)
{	if (n <= 2) return LOCAL;
	if (n <= 2+  DELTA) return Q_FULL_F; /* 's' or nfull  */
	if (n <= 2+2*DELTA) return Q_EMPT_F; /* 'r' or nempty */
	if (n <= 2+3*DELTA) return Q_EMPT_T; /* empty */
	if (n <= 2+4*DELTA) return Q_FULL_T; /* full  */
	if (n ==   5*DELTA) return GLOBAL;
	if (n ==   6*DELTA) return TIMEOUT_F;
	if (n ==   7*DELTA) return ALPHA_F;
	Uerror("cannot happen srinc_class");
	return BAD;
}
int
srunc(int n, int m)
{	switch(m) {
	case Q_FULL_F: return n-2;
	case Q_EMPT_F: return n-2-DELTA;
	case Q_EMPT_T: return n-2-2*DELTA;
	case Q_FULL_T: return n-2-3*DELTA;
	case ALPHA_F:
	case TIMEOUT_F: return 257; /* non-zero, and > MAXQ */
	}
	Uerror("cannot happen srunc");
	return 0;
}
#endif
int cnt;
#ifdef HAS_UNLESS
int
isthere(Trans *a, int b)
{	Trans *t;
	for (t = a; t; t = t->nxt)
		if (t->t_id == b)
			return 1;
	return 0;
}
#endif
#ifndef NOREDUCE
int
mark_safety(Trans *t) /* for conditional safety */
{	int g = 0, i, j, k;

	if (!t) return 0;
	if (t->qu[0])
		return (t->qu[1])?2:1;	/* marked */

	for (i = 0; i < 2; i++)
	{	j = srinc_set(t->tpe[i]);
		if (j >= GLOBAL && j != ALPHA_F)
			return -1;
		if (j != LOCAL)
		{	k = srunc(t->tpe[i], j);
			if (g == 0
			||  t->qu[0] != k
			||  t->ty[0] != j)
			{	t->qu[g] = k;
				t->ty[g] = j;
				g++;
	}	}	}
	return g;
}
#endif
void
retrans(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
	/* process n, with m states, is=initial state */
{	Trans *T0, *T1, *T2, *T3;
	Trans *T4, *T5; /* t_reverse or has_unless */
	int i;
#if defined(HAS_UNLESS) || !defined(NOREDUCE)
	int k;
#endif
#ifndef NOREDUCE
	int g, h, j, aa;
#endif
#ifdef HAS_UNLESS
	int p;
#endif
	if (state_tables >= 4)
	{	printf("STEP 1 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
	do {
		for (i = 1, cnt = 0; i < m; i++)
		{	T2 = trans[n][i];
			T1 = T2?T2->nxt:(Trans *)0;
/* prescan: */		for (T0 = T1; T0; T0 = T0->nxt)
/* choice in choice */	{	if (T0->st && trans[n][T0->st]
				&&  trans[n][T0->st]->nxt)
					break;
			}
#if 0
		if (T0)
		printf("\tstate %d / %d: choice in choice\n",
		i, T0->st);
#endif
			if (T0)
			for (T0 = T1; T0; T0 = T0->nxt)
			{	T3 = trans[n][T0->st];
				if (!T3->nxt)
				{	T2->nxt = cpytr(T0);
					T2 = T2->nxt;
					imed(T2, T0->st, n, i);
					continue;
				}
				do {	T3 = T3->nxt;
					T2->nxt = cpytr(T3);
					T2 = T2->nxt;
					imed(T2, T0->st, n, i);
				} while (T3->nxt);
				cnt++;
			}
		}
	} while (cnt);
	if (state_tables >= 3)
	{	printf("STEP 2 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
	for (i = 1; i < m; i++)
	{	if (trans[n][i] && trans[n][i]->nxt) /* optimize */
		{	T1 = trans[n][i]->nxt;
#if 0
			printf("\t\tpull %d (%d) to %d\n",
			T1->st, T1->forw, i);
#endif
			srcln[i] = srcln[T1->st];	/* Oyvind Teig, 5.2.0 */

			if (!trans[n][T1->st]) continue;
			T0 = cpytr(trans[n][T1->st]);
			trans[n][i] = T0;
			reach[T1->st] = 1;
			imed(T0, T1->st, n, i);
			for (T1 = T1->nxt; T1; T1 = T1->nxt)
			{
#if 0
			printf("\t\tpull %d (%d) to %d\n",
				T1->st, T1->forw, i);
#endif
		/*		srcln[i] = srcln[T1->st];  gh: not useful */
				if (!trans[n][T1->st]) continue;
				T0->nxt = cpytr(trans[n][T1->st]);
				T0 = T0->nxt;
				reach[T1->st] = 1;
				imed(T0, T1->st, n, i);
	}	}	}
	if (state_tables >= 2)
	{	printf("STEP 3 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
#ifdef HAS_UNLESS
	for (i = 1; i < m; i++)
	{	if (!trans[n][i]) continue;
		/* check for each state i if an
		 * escape to some state p is defined
		 * if so, copy and mark p's transitions
		 * and prepend them to the transition-
		 * list of state i
		 */
	 if (!like_java) /* the default */
	 {	for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		for (k = HAS_UNLESS-1; k >= 0; k--)
		{	if (p = T0->escp[k])
			for (T1 = trans[n][p]; T1; T1 = T1->nxt)
			{	if (isthere(trans[n][i], T1->t_id))
					continue;
				T2 = cpytr(T1);
				T2->e_trans = p;
				T2->nxt = trans[n][i];
				trans[n][i] = T2;
		}	}
	 } else /* outermost unless checked first */
	 {	T4 = T3 = (Trans *) 0;
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		for (k = HAS_UNLESS-1; k >= 0; k--)
		{	if (p = T0->escp[k])
			for (T1 = trans[n][p]; T1; T1 = T1->nxt)
			{	if (isthere(trans[n][i], T1->t_id))
					continue;
				T2 = cpytr(T1);
				T2->nxt = (Trans *) 0;
				T2->e_trans = p;
				if (T3)	T3->nxt = T2;
				else	T4 = T2;
				T3 = T2;
		}	}
		if (T4)
		{	T3->nxt = trans[n][i];
			trans[n][i] = T4;
		}
	 }
	}
#endif
#ifndef NOREDUCE
	for (i = 1; i < m; i++)
	{	if (a_cycles)
		{ /* moves through these states are visible */
	#if PROG_LAB>0 && defined(HAS_NP)
			if (progstate[n][i])
				goto degrade;
			for (T1 = trans[n][i]; T1; T1 = T1->nxt)
				if (progstate[n][T1->st])
					goto degrade;
	#endif
			if (accpstate[n][i] || visstate[n][i])
				goto degrade;
			for (T1 = trans[n][i]; T1; T1 = T1->nxt)
				if (accpstate[n][T1->st])
					goto degrade;
		}
		T1 = trans[n][i];
		if (!T1) continue;
		g = mark_safety(T1);	/* V3.3.1 */
		if (g < 0) goto degrade; /* global */
		/* check if mixing of guards preserves reduction */
		if (T1->nxt)
		{	k = 0;
			for (T0 = T1; T0; T0 = T0->nxt)
			{	if (!(T0->atom&8))
					goto degrade;
				for (aa = 0; aa < 2; aa++)
				{	j = srinc_set(T0->tpe[aa]);
					if (j >= GLOBAL && j != ALPHA_F)
						goto degrade;
					if (T0->tpe[aa]
					&&  T0->tpe[aa]
					!=  T1->tpe[0])
						k = 1;
			}	}
			/* g = 0;	V3.3.1 */
			if (k)	/* non-uniform selection */
			for (T0 = T1; T0; T0 = T0->nxt)
			for (aa = 0; aa < 2; aa++)
			{	j = srinc_set(T0->tpe[aa]);
				if (j != LOCAL)
				{	k = srunc(T0->tpe[aa], j);
					for (h = 0; h < 6; h++)
						if (T1->qu[h] == k
						&&  T1->ty[h] == j)
							break;
					if (h >= 6)
					{	T1->qu[g%6] = k;
						T1->ty[g%6] = j;
						g++;
			}	}	}
			if (g > 6)
			{	T1->qu[0] = 0;	/* turn it off */
				printf("pan: warning, line %d, ",
					srcln[i]);
			 	printf("too many stmnt types (%d)",
					g);
			  	printf(" in selection\n");
			  goto degrade;
			}
		}
		/* mark all options global if >=1 is global */
		for (T1 = trans[n][i]; T1; T1 = T1->nxt)
			if (!(T1->atom&8)) break;
		if (T1)
degrade:	for (T1 = trans[n][i]; T1; T1 = T1->nxt)
			T1->atom &= ~8;	/* mark as unsafe */
		/* can only mix 'r's or 's's if on same chan */
		/* and not mixed with other local operations */
		T1 = trans[n][i];
		if (!T1 || T1->qu[0]) continue;
		j = T1->tpe[0];
		if (T1->nxt && T1->atom&8)
		{ if (j == 5*DELTA)
		  {	printf("warning: line %d ", srcln[i]);
			printf("mixed condition ");
			printf("(defeats reduction)\n");
			goto degrade;
		  }
		  for (T0 = T1; T0; T0 = T0->nxt)
		  for (aa = 0; aa < 2; aa++)
		  if  (T0->tpe[aa] && T0->tpe[aa] != j)
		  {	printf("warning: line %d ", srcln[i]);
			printf("[%d-%d] mixed %stion ",
				T0->tpe[aa], j, 
				(j==5*DELTA)?"condi":"selec");
			printf("(defeats reduction)\n");
			printf("	'%s' <-> '%s'\n",
				T1->tp, T0->tp);
			goto degrade;
		} }
	}
#endif
	for (i = 1; i < m; i++)
	{	T2 = trans[n][i];
		if (!T2
		||  T2->nxt
		||  strncmp(T2->tp, ".(goto)", 7)
		||  !stopstate[n][i])
			continue;
		stopstate[n][T2->st] = 1;
	}
	if (state_tables && !verbose)
	{	if (dodot)
		{	char buf[256], *q = buf, *p = procname[n];
			while (*p != '\0')
			{	if (*p != ':')
				{	*q++ = *p;
				}
				p++;
			}
			*q = '\0';
			printf("digraph ");
			switch (Btypes[n]) {
			case I_PROC:  printf("init {\n"); break;
			case N_CLAIM: printf("claim_%s {\n", buf); break;
			case E_TRACE: printf("notrace {\n"); break;
			case N_TRACE: printf("trace {\n"); break;
			default:      printf("p_%s {\n", buf); break;
			}
			printf("size=\"8,10\";\n");
			printf("  GT [shape=box,style=dotted,label=\"%s\"];\n", buf);
			printf("  GT -> S%d;\n", is);
		} else
		{	switch (Btypes[n]) {
			case I_PROC:  printf("init\n"); break;
			case N_CLAIM: printf("claim %s\n", procname[n]); break;
			case E_TRACE: printf("notrace assertion\n"); break;
			case N_TRACE: printf("trace assertion\n"); break;
			default:      printf("proctype %s\n", procname[n]); break;
		}	}
		for (i = 1; i < m; i++)
		{	reach[i] = 1;
		}
		tagtable(n, m, is, srcln, reach);
		if (dodot) printf("}\n");
	} else
	for (i = 1; i < m; i++)
	{	int nrelse;
		if (Btypes[n] != N_CLAIM)
		{	for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			{	if (T0->st == i
				&& strcmp(T0->tp, "(1)") == 0)
				{	printf("error: proctype '%s' ",
						procname[n]);
		  			printf("line %d, state %d: has un",
						srcln[i], i);
					printf("conditional self-loop\n");
					pan_exit(1);
		}	}	}
		nrelse = 0;
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		{	if (strcmp(T0->tp, "else") == 0)
				nrelse++;
		}
		if (nrelse > 1)
		{	printf("error: proctype '%s' state",
				procname[n]);
		  	printf(" %d, inherits %d", i, nrelse);
		  	printf(" 'else' stmnts\n");
			pan_exit(1);
	}	}
#if !defined(LOOPSTATE) && !defined(BFS_PAR)
	if (state_tables)
#endif
	do_dfs(n, m, is, srcln, reach, lpstate);

	if (!t_reverse)
	{	return;
	}
	/* process n, with m states, is=initial state -- reverse list */
	if (!state_tables && Btypes[n] != N_CLAIM)
	{	for (i = 1; i < m; i++)
		{	Trans *Tx = (Trans *) 0; /* list of escapes */
			Trans *Ty = (Trans *) 0; /* its tail element */
			T1 = (Trans *) 0; /* reversed list */
			T2 = (Trans *) 0; /* its tail */
			T3 = (Trans *) 0; /* remembers possible 'else' */

			/* find unless-escapes, they should go first */
			T4 = T5 = T0 = trans[n][i];
	#ifdef HAS_UNLESS
			while (T4 && T4->e_trans) /* escapes are first in orig list */
			{	T5 = T4;	  /* remember predecessor */
				T4 = T4->nxt;
			}
	#endif
			/* T4 points to first non-escape, T5 to its parent, T0 to original list */
			if (T4 != T0)		 /* there was at least one escape */
			{	T3 = T5->nxt;		 /* start of non-escapes */
				T5->nxt = (Trans *) 0;	 /* separate */
				Tx = T0;		 /* start of the escapes */
				Ty = T5;		 /* its tail */
				T0 = T3;		 /* the rest, to be reversed */
			}
			/* T0 points to first non-escape, Tx to the list of escapes, Ty to its tail */

			/* first tail-add non-escape transitions, reversed */
			T3 = (Trans *) 0;
			for (T5 = T0; T5; T5 = T4)
			{	T4 = T5->nxt;
	#ifdef HAS_UNLESS
				if (T5->e_trans)
				{	printf("error: cannot happen!\n");
					continue;
				}
	#endif
				if (strcmp(T5->tp, "else") == 0)
				{	T3 = T5;
					T5->nxt = (Trans *) 0;
				} else
				{	T5->nxt = T1;
					if (!T1) { T2 = T5; }
					T1 = T5;
			}	}
			/* T3 points to a possible else, which is removed from the list */
			/* T1 points to the reversed list so far (without escapes) */
			/* T2 points to the tail element -- where the else should go */
			if (T2 && T3)
			{	T2->nxt = T3;	/* add else */
			} else
			{	if (T3) /* there was an else, but there's no tail */
				{	if (!T1)	/* and no reversed list */
					{	T1 = T3; /* odd, but possible */
					} else		/* even stranger */
					{	T1->nxt = T3;
			}	}	}

			/* add in the escapes, to that they appear at the front */
			if (Tx && Ty) { Ty->nxt = T1; T1 = Tx; }

			trans[n][i] = T1;
			/* reversed, with escapes first and else last */
	}	}
	if (state_tables && verbose)
	{	printf("FINAL proctype %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
	}
}
void
imed(Trans *T, int v, int n, int j)	/* set intermediate state */
{	progstate[n][T->st] |= progstate[n][v];
	accpstate[n][T->st] |= accpstate[n][v];
	stopstate[n][T->st] |= stopstate[n][v];
	mapstate[n][j] = T->st;
}
void
tagtable(int n, int m, int is, short srcln[], uchar reach[])
{	Trans *z;

	if (is >= m || !trans[n][is]
	||  is <= 0 || reach[is] == 0)
		return;
	reach[is] = 0;
	if (state_tables)
	for (z = trans[n][is]; z; z = z->nxt)
	{	if (dodot)
			dot_crack(n, is, z);
		else
			crack(n, is, z, srcln);
	}

	for (z = trans[n][is]; z; z = z->nxt)
	{
#ifdef HAS_UNLESS
		int i, j;
#endif
		tagtable(n, m, z->st, srcln, reach);
#ifdef HAS_UNLESS
		for (i = 0; i < HAS_UNLESS; i++)
		{	j = trans[n][is]->escp[i];
			if (!j) break;
			tagtable(n, m, j, srcln, reach);
		}
#endif
	}
}

extern Trans *t_id_lkup[];

void
dfs_table(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
{	Trans *z;

	if (is >= m || is <= 0 || !trans[n][is])
		return;
	if ((reach[is] & (4|8|16)) != 0)
	{	if ((reach[is] & (8|16)) == 16)	/* on stack, not yet recorded */
		{	lpstate[is] = 1;
			reach[is] |= 8; /* recorded */
			if (state_tables && verbose)
			{	printf("state %d line %d is a loopstate\n", is, srcln[is]);
		}	}
		return;
	}
	reach[is] |= (4|16);	/* visited | onstack */
	for (z = trans[n][is]; z; z = z->nxt)
	{	t_id_lkup[z->t_id] = z;
#ifdef HAS_UNLESS
		int i, j;
#endif
		dfs_table(n, m, z->st, srcln, reach, lpstate);
#ifdef HAS_UNLESS
		for (i = 0; i < HAS_UNLESS; i++)
		{	j = trans[n][is]->escp[i];
			if (!j) break;
			dfs_table(n, m, j, srcln, reach, lpstate);
		}
#endif
	}
	reach[is] &= ~16; /* no longer on stack */
}
void
do_dfs(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
{	int i;
	dfs_table(n, m, is, srcln, reach, lpstate);
	for (i = 0; i < m; i++)
		reach[i] &= ~(4|8|16);
}
void
crack(int n, int j, Trans *z, short srcln[])
{	int i;

	if (!z) return;
	printf("	state %3d -(tr %3d)-> state %3d  ",
		j, z->forw, z->st);
	printf("[id %3d tp %3d", z->t_id, z->tpe[0]);
	if (z->tpe[1]) printf(",%d", z->tpe[1]);
#ifdef HAS_UNLESS
	if (z->e_trans)
		printf(" org %3d", z->e_trans);
	else if (state_tables >= 2)
	for (i = 0; i < HAS_UNLESS; i++)
	{	if (!z->escp[i]) break;
		printf(" esc %d", z->escp[i]);
	}
#endif
	printf("]");
	printf(" [%s%s%s%s%s] %s:%d => ",
		z->atom&6?"A":z->atom&32?"D":"-",
		accpstate[n][j]?"a" :"-",
		stopstate[n][j]?"e" : "-",
		progstate[n][j]?"p" : "-",
		z->atom & 8 ?"L":"G",
		PanSource, srcln[j]);
	for (i = 0; z->tp[i]; i++)
		if (z->tp[i] == '\n')
			printf("\\n");
		else
			putchar(z->tp[i]);
	if (verbose && z->qu[0])
	{	printf("\t[");
		for (i = 0; i < 6; i++)
			if (z->qu[i])
				printf("(%d,%d)",
				z->qu[i], z->ty[i]);
		printf("]");
	}
	printf("\n");
	fflush(stdout);
}
/* spin -a m.pml; cc -o pan pan.c; ./pan -D | dot -Tps > foo.ps; ps2pdf foo.ps */
void
dot_crack(int n, int j, Trans *z)
{	int i;

	if (!z) return;
	printf("	S%d -> S%d  [color=black", j, z->st);

	if (z->atom&6) printf(",style=dashed");
	else if (z->atom&32) printf(",style=dotted");
	else if (z->atom&8) printf(",style=solid");
	else printf(",style=bold");

	printf(",label=\"");
	for (i = 0; z->tp[i]; i++)
	{	if (z->tp[i] == '\\'
		&&  z->tp[i+1] == 'n')
		{	i++; printf(" ");
		} else
		{	putchar(z->tp[i]);
	}	}
	printf("\"];\n");
	if (accpstate[n][j]) printf("  S%d [color=red,style=bold];\n", j);
	else if (progstate[n][j]) printf("  S%d [color=green,style=bold];\n", j);
	if (stopstate[n][j]) printf("  S%d [color=blue,style=bold,shape=box];\n", j);
}

#ifdef VAR_RANGES
#define BYTESIZE	32	/* 2^8 : 2^3 = 256:8 = 32 */

typedef struct Vr_Ptr {
	char	*nm;
	uchar	vals[BYTESIZE];
	struct Vr_Ptr *nxt;
} Vr_Ptr;
Vr_Ptr *ranges = (Vr_Ptr *) 0;

void
logval(char *s, int v)
{	Vr_Ptr *tmp;

	if (v<0 || v > 255) return;
	for (tmp = ranges; tmp; tmp = tmp->nxt)
		if (!strcmp(tmp->nm, s))
			goto found;
	tmp = (Vr_Ptr *) emalloc(sizeof(Vr_Ptr));
	tmp->nxt = ranges;
	ranges = tmp;
	tmp->nm = s;
found:
	tmp->vals[(v)/8] |= 1<<((v)%8);
}

void
dumpval(uchar X[], int range)
{	int w, x, i, j = -1;

	for (w = i = 0; w < range; w++)
	for (x = 0; x < 8; x++, i++)
	{
from:		if ((X[w] & (1<<x)))
		{	printf("%d", i);
			j = i;
			goto upto;
	}	}
	return;
	for (w = 0; w < range; w++)
	for (x = 0; x < 8; x++, i++)
	{
upto:		if (!(X[w] & (1<<x)))
		{	if (i-1 == j)
				printf(", ");
			else
				printf("-%d, ", i-1);
			goto from;
	}	}
	if (j >= 0 && j != 255)
		printf("-255");
}

void
dumpranges(void)
{	Vr_Ptr *tmp;
	printf("\nValues assigned within ");
	printf("interval [0..255]:\n");
	for (tmp = ranges; tmp; tmp = tmp->nxt)
	{	printf("\t%s\t: ", tmp->nm);
		dumpval(tmp->vals, BYTESIZE);
		printf("\n");
	}
}
#endif
