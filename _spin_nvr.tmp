never back_to_user {    /* !([] (<> ((EP>=2)))) */
T0_init:
	do
	:: (! (((EP>=2)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((EP>=2)))) -> goto accept_S4
	od;
}
never exc_leads_to_user {    /* !([] ((! ((EP<2))) || (<> ((EP>=2))))) */
T0_init:
	do
	:: (! ((! ((EP<2)))) && ! (((EP>=2)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((EP>=2)))) -> goto accept_S4
	od;
}
never starvation_free_task1 {    /* !((! ([] ((! ((pending_exp>0))) || (<> ((EP>=2)))))) || ([] ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1)))) || (<> ((EP==2)))))) */
T0_init:
	do
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))) && ((EP>=2))) -> goto accept_S8
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto T0_S134
	:: ((! ((pending_exp>0))) && ! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto accept_S111
	:: (((! ((pending_exp>0))) || ((EP>=2)))) -> goto T0_init
	:: (1) -> goto T0_S201
	od;
accept_S8:
	do
	:: (! (((EP==2))) && ((EP>=2))) -> goto T0_S8
	:: (! (((EP==2)))) -> goto T0_S134
	:: ((! ((pending_exp>0))) && ! (((EP==2)))) -> goto T0_S111
	od;
accept_S111:
	do
	:: (! (((EP==2)))) -> goto T0_S134
	:: ((((! ((pending_exp>0))) && ! (((EP==2)))) || (! (((EP==2))) && ((EP>=2))))) -> goto T0_S111
	od;
accept_S134:
	do
	:: (! (((EP==2)))) -> goto T0_S134
	:: (! (((EP==2))) && ((EP>=2))) -> goto T0_S111
	od;
T0_S8:
	do
	:: (! (((EP==2))) && ((EP>=2))) -> goto accept_S8
	:: (! (((EP==2)))) -> goto T0_S134
	:: ((! ((pending_exp>0))) && ! (((EP==2)))) -> goto accept_S111
	od;
T0_S111:
	do
	:: (! (((EP==2)))) -> goto T0_S134
	:: ((((! ((pending_exp>0))) && ! (((EP==2)))) || (! (((EP==2))) && ((EP>=2))))) -> goto accept_S111
	od;
T0_S134:
	do
	:: (! (((EP==2)))) -> goto T0_S134
	:: (! (((EP==2))) && ((EP>=2))) -> goto accept_S111
	:: (! (((EP==2))) && ((EP>=2))) -> goto accept_S134
	od;
T0_S201:
	do
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto T0_S134
	:: (((EP>=2))) -> goto T0_init
	:: (1) -> goto T0_S201
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))) && ((EP>=2))) -> goto accept_S111
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))) && ((EP>=2))) -> goto accept_S134
	od;
}
never starvation_free_task2 {    /* !((! ([] ((! ((pending_exp>0))) || (<> ((EP>=2)))))) || ([] ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1)))) || (<> ((EP==(2+1))))))) */
T0_init:
	do
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S8
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto T0_S134
	:: ((! ((pending_exp>0))) && ! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto accept_S111
	:: (((! ((pending_exp>0))) || ((EP>=2)))) -> goto T0_init
	:: (1) -> goto T0_S201
	od;
accept_S8:
	do
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto T0_S8
	:: (! (((EP==(2+1))))) -> goto T0_S134
	:: ((! ((pending_exp>0))) && ! (((EP==(2+1))))) -> goto T0_S111
	od;
accept_S111:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S134
	:: ((((! ((pending_exp>0))) && ! (((EP==(2+1))))) || (! (((EP==(2+1)))) && ((EP>=2))))) -> goto T0_S111
	od;
accept_S134:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S134
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto T0_S111
	od;
T0_S8:
	do
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S8
	:: (! (((EP==(2+1))))) -> goto T0_S134
	:: ((! ((pending_exp>0))) && ! (((EP==(2+1))))) -> goto accept_S111
	od;
T0_S111:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S134
	:: ((((! ((pending_exp>0))) && ! (((EP==(2+1))))) || (! (((EP==(2+1)))) && ((EP>=2))))) -> goto accept_S111
	od;
T0_S134:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S134
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S111
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S134
	od;
T0_S201:
	do
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto T0_S134
	:: (((EP>=2))) -> goto T0_init
	:: (1) -> goto T0_S201
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S111
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S134
	od;
}
never all_starvation_free {    /* !((! ([] ((! ((pending_exp>0))) || (<> ((EP>=2)))))) || (([] ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1)))) || (<> ((EP==2))))) && ([] ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1)))) || (<> ((EP==(2+1)))))))) */
T0_init:
	do
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))) && ((EP>=2))) -> goto accept_S9
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto T0_S350
	:: ((! ((pending_exp>0))) && ! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto accept_S244
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S140
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto T0_S371
	:: ((! ((pending_exp>0))) && ! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto accept_S267
	:: (((EP>=2))) -> goto T0_init
	:: (1) -> goto T0_S384
	:: ((! ((pending_exp>0)))) -> goto T0_S317
	od;
accept_S9:
	do
	:: (! (((EP==2))) && ((EP>=2))) -> goto T0_S9
	:: (! (((EP==2)))) -> goto T0_S350
	:: ((! ((pending_exp>0))) && ! (((EP==2)))) -> goto T0_S244
	od;
accept_S140:
	do
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto T0_S140
	:: (! (((EP==(2+1))))) -> goto T0_S371
	:: ((! ((pending_exp>0))) && ! (((EP==(2+1))))) -> goto T0_S267
	od;
accept_S244:
	do
	:: (! (((EP==2)))) -> goto T0_S350
	:: ((((! ((pending_exp>0))) && ! (((EP==2)))) || (! (((EP==2))) && ((EP>=2))))) -> goto T0_S244
	od;
accept_S267:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S371
	:: ((((! ((pending_exp>0))) && ! (((EP==(2+1))))) || (! (((EP==(2+1)))) && ((EP>=2))))) -> goto T0_S267
	od;
accept_S350:
	do
	:: (! (((EP==2)))) -> goto T0_S350
	:: (! (((EP==2))) && ((EP>=2))) -> goto T0_S244
	od;
accept_S371:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S371
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto T0_S267
	od;
T0_S9:
	do
	:: (! (((EP==2))) && ((EP>=2))) -> goto accept_S9
	:: (! (((EP==2)))) -> goto T0_S350
	:: ((! ((pending_exp>0))) && ! (((EP==2)))) -> goto accept_S244
	od;
T0_S140:
	do
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S140
	:: (! (((EP==(2+1))))) -> goto T0_S371
	:: ((! ((pending_exp>0))) && ! (((EP==(2+1))))) -> goto accept_S267
	od;
T0_S244:
	do
	:: (! (((EP==2)))) -> goto T0_S350
	:: ((((! ((pending_exp>0))) && ! (((EP==2)))) || (! (((EP==2))) && ((EP>=2))))) -> goto accept_S244
	od;
T0_S267:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S371
	:: ((((! ((pending_exp>0))) && ! (((EP==(2+1))))) || (! (((EP==(2+1)))) && ((EP>=2))))) -> goto accept_S267
	od;
T0_S317:
	do
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto T0_S350
	:: ((((! ((pending_exp>0))) && (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))))) || (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && (! (((EP==2))) && ((EP>=2)))))) -> goto accept_S244
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto T0_S371
	:: ((((! ((pending_exp>0))) && (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))))) || (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && (! (((EP==(2+1)))) && ((EP>=2)))))) -> goto accept_S267
	:: (((EP>=2))) -> goto T0_init
	:: (1) -> goto T0_S384
	:: ((! ((pending_exp>0)))) -> goto T0_S317
	od;
T0_S350:
	do
	:: (! (((EP==2)))) -> goto T0_S350
	:: (! (((EP==2))) && ((EP>=2))) -> goto accept_S244
	:: (! (((EP==2))) && ((EP>=2))) -> goto accept_S350
	od;
T0_S371:
	do
	:: (! (((EP==(2+1))))) -> goto T0_S371
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S267
	:: (! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S371
	od;
T0_S384:
	do
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2)))) -> goto T0_S350
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1))))) -> goto T0_S371
	:: (((EP>=2))) -> goto T0_init
	:: (1) -> goto T0_S384
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))) && ((EP>=2))) -> goto accept_S244
	:: (! ((! (((tcb[2].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==2))) && ((EP>=2))) -> goto accept_S350
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S267
	:: (! ((! (((tcb[(2+1)].state==1)) && ((((pending_exp>>1)&1)==1))))) && ! (((EP==(2+1)))) && ((EP>=2))) -> goto accept_S371
	:: ((! ((pending_exp>0))) && ((EP>=2))) -> goto T0_S317
	od;
}
never P2_switching_not_P1_witness_unfolded {    /* !([] (! (<> ((((EP==1)) && ((EP_Stack==(2+1)))) && ((((EP==1)) && ((EP_Stack==(2+1)))) U ((((EP==0)) && ((EP_Stack==(2+1)))) && ((((EP==0)) && ((EP_Stack==(2+1)))) U ((((EP==0)) && ((EP_Stack==2))) && ((((EP==0)) && ((EP_Stack==2))) U ((((EP==1)) && ((EP_Stack==2))) && ((((EP==1)) && ((EP_Stack==2))) U ((((EP==0)) && ((EP_Stack==2))) && ((((EP==0)) && ((EP_Stack==2))) U ((((EP==0)) && ((EP_Stack==(2+1)))) && ((((EP==0)) && ((EP_Stack==(2+1)))) U ((EP==(2+1)))))))))))))))))) */
T0_init:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==(2+1)))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1)))) -> assert(!((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==(2+1)))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==(2+1)))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S84
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==(2+1)))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S83
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==(2+1)))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S82
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==(2+1))))) -> goto T0_S81
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==1)) && ((EP_Stack==(2+1))))) -> goto T0_S80
	:: ((((EP==1)) && ((EP_Stack==(2+1))))) -> goto T0_S79
	:: (1) -> goto T0_init
	od;
T0_S84:
	do
	:: atomic { (((EP==(2+1)))) -> assert(!(((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1))))) -> goto T0_S84
	od;
T0_S83:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==(2+1)))) && ((EP==(2+1)))) -> assert(!((((EP==0)) && ((EP_Stack==(2+1)))) && ((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1))))) -> goto T0_S84
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S83
	od;
T0_S82:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && ((EP==(2+1)))) -> assert(!((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && ((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2)))) -> goto T0_S84
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S83
	:: ((((EP==1)) && ((EP_Stack==2)))) -> goto T0_S82
	od;
T0_S81:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1)))) -> assert(!((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S84
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S83
	:: ((((EP==1)) && ((EP_Stack==2)))) -> goto T0_S82
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S81
	od;
T0_S80:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1)))) -> assert(!((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S84
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S83
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S82
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S81
	:: ((((EP==0)) && ((EP_Stack==(2+1))))) -> goto T0_S80
	od;
T0_S79:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1)))) -> assert(!((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==(2+1))))) }
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S84
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S83
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S82
	:: ((((EP==0)) && ((EP_Stack==(2+1)))) && (((EP==0)) && ((EP_Stack==2)))) -> goto T0_S81
	:: ((((EP==0)) && ((EP_Stack==(2+1))))) -> goto T0_S80
	:: ((((EP==1)) && ((EP_Stack==(2+1))))) -> goto T0_S79
	od;
accept_all:
	skip
}
never p2_double_context_switch {    /* !([] (! (<> ((((EP==3)) && ((((pending_exp>>1)&1)==1))) && ((((EP==3)) && ((((pending_exp>>1)&1)==1))) U ((((EP==1)) && ((EP_Stack==3))) && ((((EP==1)) && ((EP_Stack==3))) U ((((EP==0)) && ((EP_Stack==3))) && ((((EP==0)) && ((EP_Stack==3))) U ((((EP==0)) && ((EP_Stack==2))) && ((((EP==0)) && ((EP_Stack==2))) U ((((EP==1)) && ((EP_Stack==2))) && ((((EP==1)) && ((EP_Stack==2))) U ((((EP==0)) && ((EP_Stack==2))) && ((((EP==0)) && ((EP_Stack==2))) U ((((EP==0)) && ((EP_Stack==3))) && ((((EP==0)) && ((EP_Stack==3))) U ((EP==3))))))))))))))))))) */
T0_init:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S119
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S118
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S117
	:: ((((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S116
	:: ((((EP==1)) && ((EP_Stack==3))) && (((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S115
	:: ((((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S114
	:: (1) -> goto T0_init
	od;
T0_S120:
	do
	:: atomic { (((EP==3))) -> assert(!(((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==3)))) -> goto T0_S120
	od;
T0_S119:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==3))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==3))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==3)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S119
	od;
T0_S118:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S119
	:: ((((EP==1)) && ((EP_Stack==2)))) -> goto T0_S118
	od;
T0_S117:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S119
	:: ((((EP==1)) && ((EP_Stack==2)))) -> goto T0_S118
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S117
	od;
T0_S116:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S119
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S118
	:: ((((EP==0)) && ((EP_Stack==2)))) -> goto T0_S117
	:: ((((EP==0)) && ((EP_Stack==3)))) -> goto T0_S116
	od;
T0_S115:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S119
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2)))) -> goto T0_S118
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3)))) -> goto T0_S117
	:: ((((EP==0)) && ((EP_Stack==3)))) -> goto T0_S116
	:: ((((EP==1)) && ((EP_Stack==3)))) -> goto T0_S115
	od;
T0_S114:
	do
	:: atomic { ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && ((EP==3))) -> assert(!((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3))) && ((EP==3)))) }
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3)))) -> goto T0_S120
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3)))) -> goto T0_S119
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==2))) && (((EP==1)) && ((EP_Stack==3)))) -> goto T0_S118
	:: ((((EP==0)) && ((EP_Stack==2))) && (((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==3)))) -> goto T0_S117
	:: ((((EP==0)) && ((EP_Stack==3))) && (((EP==1)) && ((EP_Stack==3)))) -> goto T0_S116
	:: ((((EP==1)) && ((EP_Stack==3)))) -> goto T0_S115
	:: ((((EP==3)) && ((((pending_exp>>1)&1)==1)))) -> goto T0_S114
	od;
accept_all:
	skip
}
never smoke_P2_user_no_pending {    /* !([] (! ((((EP==(2+1))) && ((pending_exp==0))) && ((chain_tick_used==1))))) */
T0_init:
	do
	:: atomic { (! ((! ((((EP==(2+1))) && ((pending_exp==0))) && ((chain_tick_used==1)))))) -> assert(!(! ((! ((((EP==(2+1))) && ((pending_exp==0))) && ((chain_tick_used==1))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never smoke_P1_user_no_pending {    /* !([] (! ((((EP==2)) && ((pending_exp==0))) && ((chain_tick_used==1))))) */
T0_init:
	do
	:: atomic { (! ((! ((((EP==2)) && ((pending_exp==0))) && ((chain_tick_used==1)))))) -> assert(!(! ((! ((((EP==2)) && ((pending_exp==0))) && ((chain_tick_used==1))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
